{"version":3,"file":"static/webpack/2.72f91bcf77bee2a9e1e9.hot-update.js","sources":["webpack:///./src/games/zooparade/board.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IGameArgs } from '../../components/App/Game/GameBoardWrapper';\nimport { GameLayout } from '../../components/App/Game/GameLayout';\nimport { IGameCtx } from 'boardgame.io/core';\nimport { IG } from './interfaces';\n\nimport { BHand } from './components/bhand'; \nimport { BTrash } from './components/btrash'; \nimport { BPiles } from './components/bpiles'; \nimport { BToken } from './components/btoken';\nimport { BDeck } from './components/bdeck';\nimport { BButtons } from './components/bbuttons';\nimport { BNameBadge } from './components/bnamebadge';\nimport { BLog } from './components/blog';\n\n\ninterface IBoardProps {\n  G: IG;\n  ctx: IGameCtx;\n  moves: any;\n  playerID: string;\n  gameArgs?: IGameArgs;\n}\n\nlet handStyle = {\n  display: 'flex'\n}\n\nexport class Board extends React.Component<IBoardProps,  {}> {\n  render() {\n\n    var me = this.props.playerID ? parseInt(this.props.playerID) : 1 // TODO : Local Fix - defaults to player 1\n    var playerID = this.props.playerID ? this.props.playerID : \"1\" // TODO : Local Fix\n    \n    let hands = this.props.G.hands;\n    let rotatedHands = hands.slice(me + 1, hands.length).concat(hands.slice(0, me + 1));\n\n    return (\n      <GameLayout\n          gameArgs={this.props.gameArgs}\n          allowWiderScreen={true}\n          >\n          <div style={{display: 'flex'}}>\n            <div>\n                { rotatedHands.map(hand => {\n                      let index = hand.player;\n                      return (\n                        <div key={\"Board\" + index.toString()}\n                             style={handStyle}>\n                               <BNameBadge name={ this.props.gameArgs.players[index].name }\n                                          turn={  index.toString() == this.props.ctx.currentPlayer }\n                              ></BNameBadge>\n                            {index === me ?\n                              <><hr />Your Hand:</>\n                            :\n                              <BButtons onHintColor={(value: number) => {this.props.moves.moveHintColor(index, value)}}\n                                        onHintValue={(value: number) => {this.props.moves.moveHintValue(index, value)}}\n                                        myTurn={this.props.ctx.currentPlayer === playerID}\n                                        keyPropagation={\"Board\" + index.toString()}\n                                        > \n                              </BButtons>\n                            }\n                            <BHand hand={ hand } \n                                   me={me === index} \n                                   onPlay={(id: number) => {this.props.moves.movePlay(id)}}\n                                   onTrash={(id: number) => {this.props.moves.moveDiscard(id)}}\n                                   myTurn={this.props.ctx.currentPlayer === playerID}\n                                   keyPropagation={\"Board\" + index.toString()}\n                                   >\n                            </BHand>\n                        </div>\n                        )\n                })}\n            </div>\n            <div>\n                {\n                  this.props.G.trash.length === 0\n                  ?\n                  <BTrash card={ null } >\n                    </BTrash>\n                  :\n                  <BTrash card={this.props.G.trash[this.props.G.trash.length - 1]} >\n                    </BTrash>\n                }\n                <BToken treats={this.props.G.treats} countdown={this.props.G.countdown}></BToken>\n                <BDeck cardsLeft={this.props.G.deckindex}></BDeck>\n              </div>\n            <div style={{display: 'flex', flexDirection: 'column', maxWidth: '55px'}}>\n              <BPiles piles={this.props.G.piles}\n                          keyPropagation={\"Board\"}\n                          ></BPiles>\n            </div>\n            <div>\n              <BLog lines={ this.props.G.movelog }\n                    keyPropagation={\"Board\"}\n                    >\n              </BLog>\n            </div>\n          </div>\n      </GameLayout>\n    );\n  }\n}"],"mappingszEA;AACA;AADA;AAAA;;;;A","sourceRoot":""}