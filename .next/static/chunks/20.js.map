{"version":3,"file":"static/chunks/20.js","sources":["webpack:///./src/games/chess/ai.ts","webpack:///./src/games/chess/stockfish8.worker.js"],"sourcesContent":["import { IAIConfig } from '../index';\nimport StockfishWorker from './stockfish8.worker';\n\ninterface IPlayState {\n  G: any;\n  ctx: any;\n}\n\nconst LVL_MOVETIMES = [100, 200, 300, 400, 600, 800, 1000, 2000];\nconst LVL_DEPTHS = [1, 1, 2, 3, 5, 8, 13, 22];\n\nlet botLevel = 1;\n\nclass Stockfish {\n  worker: any;\n\n  constructor() {\n    this.worker = new StockfishWorker();\n  }\n\n  start() {\n    this.send('isready');\n  }\n\n  send(message: string) {\n    this.worker.postMessage(message);\n  }\n\n  async getMove(fen: string): Promise<string> {\n    return await new Promise((resolve) => {\n      this.worker.onmessage = (event: any) => {\n        const msg = event.data;\n        if (msg && msg.includes('bestmove')) {\n          resolve(msg.split(' ')[1]);\n        }\n      };\n      const lvl = Math.round(((botLevel - 1) * 20.0) / 7);\n      this.send(`setoption name Skill Level value ${lvl}`);\n      if (fen !== '') {\n        this.send(`position fen ${fen}`);\n      } else {\n        this.send('position startpos');\n      }\n      const depth = LVL_DEPTHS[botLevel - 1];\n      const movetime = LVL_MOVETIMES[botLevel - 1];\n      this.send(`go depth ${depth} movetime ${movetime}`);\n    });\n  }\n}\n\nexport class StockfishBot {\n  stockfish = new Stockfish();\n\n  constructor(isTest = false) {\n    if (!isTest) {\n      this.stockfish.start();\n    }\n  }\n\n  async play(state: IPlayState) {\n    if (!state.ctx.gameover) {\n      const move = await this.stockfish.getMove(state.G.fen);\n      return this.makeMove(move, state.ctx.currentPlayer);\n    } else {\n      return {};\n    }\n  }\n\n  makeMove(move: string, playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'move', args: [move], playerID } } };\n  }\n}\n\nconst config: IAIConfig = {\n  bgioAI: (level: string) => {\n    botLevel = Number(level);\n    return StockfishBot;\n  },\n};\nexport default config;\n","module.exports = function() {\n  return new Worker(\"/_next/\" + \"static/5bbc2c3c58bc22e27168.worker.js\");\n};"],"mappingsfA;AACA;AAeA;AACA;AACA;;;;;;;;;;;;;;;;AAGA;AAGA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAWA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApBA;AACA;AADA;AAAA;AAuBA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}