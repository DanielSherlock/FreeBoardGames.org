{"version":3,"file":"static/chunks/19.js","sources":["webpack:///./node_modules/boardgame.io/dist/esm/core.js","webpack:///./node_modules/boardgame.io/dist/esm/reducer-b8b81041.js","webpack:///./node_modules/immer/dist/immer.module.js","webpack:///./src/games/takesix/ai.ts","webpack:///./src/games/takesix/game.ts"],"sourcesContent":["import { k as _objectSpread2, b as _defineProperty } from './reducer-b8b81041.js';\nexport { q as ActivePlayers, I as INVALID_MOVE, t as Stage, T as TurnOrder } from './reducer-b8b81041.js';\nimport 'immer';\n\n/*\n * Copyright 2018 The boardgame.io Authors\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\n/**\n * PlayerView reducers.\n */\nvar PlayerView = {\n  /**\n   * STRIP_SECRETS\n   *\n   * Reducer which removes a key named `secret` and\n   * removes all the keys in `players`, except for the one\n   * corresponding to the current playerID.\n   */\n  STRIP_SECRETS: function STRIP_SECRETS(G, ctx, playerID) {\n    var r = _objectSpread2({}, G);\n\n    if (r.secret !== undefined) {\n      delete r.secret;\n    }\n\n    if (r.players) {\n      r.players = _defineProperty({}, playerID, r.players[playerID]);\n    }\n\n    return r;\n  }\n};\n\nexport { PlayerView };\n","import produce from 'immer';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nconst MAKE_MOVE = 'MAKE_MOVE';\r\nconst GAME_EVENT = 'GAME_EVENT';\r\nconst REDO = 'REDO';\r\nconst RESET = 'RESET';\r\nconst SYNC = 'SYNC';\r\nconst UNDO = 'UNDO';\r\nconst UPDATE = 'UPDATE';\r\nconst PLUGIN = 'PLUGIN';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Generate a move to be dispatched to the game move reducer.\r\n *\r\n * @param {string} type - The move type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst makeMove = (type, args, playerID, credentials) => ({\r\n    type: MAKE_MOVE,\r\n    payload: { type, args, playerID, credentials },\r\n});\r\n/**\r\n * Generate a game event to be dispatched to the flow reducer.\r\n *\r\n * @param {string} type - The event type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst gameEvent = (type, args, playerID, credentials) => ({\r\n    type: GAME_EVENT,\r\n    payload: { type, args, playerID, credentials },\r\n});\r\n/**\r\n * Generate an automatic game event that is a side-effect of a move.\r\n * @param {string} type - The event type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst automaticGameEvent = (type, args, playerID, credentials) => ({\r\n    type: GAME_EVENT,\r\n    payload: { type, args, playerID, credentials },\r\n    automatic: true,\r\n});\r\nconst sync = (info) => ({\r\n    type: SYNC,\r\n    state: info.state,\r\n    log: info.log,\r\n    initialState: info.initialState,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to update the Redux store's state in response to\r\n * an action coming from another player.\r\n * @param {object} state - The state to restore.\r\n * @param {Array} deltalog - A log delta.\r\n */\r\nconst update = (state, deltalog) => ({\r\n    type: UPDATE,\r\n    state,\r\n    deltalog,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to reset the game state.\r\n * @param {object} state - The initial state.\r\n */\r\nconst reset = (state) => ({\r\n    type: RESET,\r\n    state,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to undo the last move.\r\n */\r\nconst undo = () => ({\r\n    type: UNDO,\r\n});\r\n/**\r\n * Used to redo the last undone move.\r\n */\r\nconst redo = () => ({\r\n    type: REDO,\r\n});\r\n/**\r\n * Allows plugins to define their own actions and intercept them.\r\n */\r\nconst plugin = (type, args, playerID, credentials) => ({\r\n    type: PLUGIN,\r\n    payload: { type, args, playerID, credentials },\r\n});\n\nvar ActionCreators = /*#__PURE__*/Object.freeze({\n  makeMove: makeMove,\n  gameEvent: gameEvent,\n  automaticGameEvent: automaticGameEvent,\n  sync: sync,\n  update: update,\n  reset: reset,\n  undo: undo,\n  redo: redo,\n  plugin: plugin\n});\n\n/*\n * Copyright 2018 The boardgame.io Authors\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n/**\n * Plugin that allows using Immer to make immutable changes\n * to G by just mutating it.\n */\n\nvar PluginImmer = {\n  name: 'plugin-immer',\n  fnWrap: function fnWrap(move) {\n    return produce(move);\n  }\n};\n\n// Inlined version of Alea from https://github.com/davidbau/seedrandom.\n\n/*\n * Copyright 2015 David Bau.\n *\n * Permission is hereby granted, free of charge,\n * to any person obtaining a copy of this software\n * and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall\n * be included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nfunction Alea(seed) {\n  var me = this,\n      mash = Mash();\n\n  me.next = function () {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  }; // Apply the seeding algorithm from Baagoe.\n\n\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n\n  if (me.s0 < 0) {\n    me.s0 += 1;\n  }\n\n  me.s1 -= mash(seed);\n\n  if (me.s1 < 0) {\n    me.s1 += 1;\n  }\n\n  me.s2 -= mash(seed);\n\n  if (me.s2 < 0) {\n    me.s2 += 1;\n  }\n\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function mash(data) {\n    data = data.toString();\n\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\nfunction alea(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.quick = prng;\n\n  if (state) {\n    if (_typeof(state) == 'object') copy(state, xg);\n\n    prng.state = function () {\n      return copy(xg, {});\n    };\n  }\n\n  return prng;\n}\n\n/**\n * Random\n *\n * Calls that require a pseudorandom number generator.\n * Uses a seed from ctx, and also persists the PRNG\n * state in ctx so that moves can stay pure.\n */\n\nvar Random =\n/*#__PURE__*/\nfunction () {\n  /**\n   * constructor\n   * @param {object} ctx - The ctx object to initialize from.\n   */\n  function Random(state) {\n    _classCallCheck(this, Random);\n\n    // If we are on the client, the seed is not present.\n    // Just use a temporary seed to execute the move without\n    // crashing it. The move state itself is discarded,\n    // so the actual value doesn't matter.\n    this.state = state;\n    this.used = false;\n  }\n\n  _createClass(Random, [{\n    key: \"isUsed\",\n    value: function isUsed() {\n      return this.used;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.state;\n    }\n    /**\n     * Generate a random number.\n     */\n\n  }, {\n    key: \"_random\",\n    value: function _random() {\n      this.used = true;\n      var R = this.state;\n      var fn;\n\n      if (R.prngstate === undefined) {\n        // No call to a random function has been made.\n        fn = new alea(R.seed, {\n          state: true\n        });\n      } else {\n        fn = new alea('', {\n          state: R.prngstate\n        });\n      }\n\n      var number = fn();\n      this.state = _objectSpread2({}, R, {\n        prngstate: fn.state()\n      });\n      return number;\n    }\n  }, {\n    key: \"api\",\n    value: function api() {\n      var random = this._random.bind(this);\n\n      var SpotValue = {\n        D4: 4,\n        D6: 6,\n        D8: 8,\n        D10: 10,\n        D12: 12,\n        D20: 20\n      }; // Generate functions for predefined dice values D4 - D20.\n\n      var predefined = {};\n\n      var _loop = function _loop(key) {\n        var spotvalue = SpotValue[key];\n\n        predefined[key] = function (diceCount) {\n          if (diceCount === undefined) {\n            return Math.floor(random() * spotvalue) + 1;\n          } else {\n            return _toConsumableArray(new Array(diceCount).keys()).map(function () {\n              return Math.floor(random() * spotvalue) + 1;\n            });\n          }\n        };\n      };\n\n      for (var key in SpotValue) {\n        _loop(key);\n      }\n\n      return _objectSpread2({}, predefined, {\n        /**\n         * Roll a die of specified spot value.\n         *\n         * @param {number} spotvalue - The die dimension (default: 6).\n         * @param {number} diceCount - number of dice to throw.\n         *                             if not defined, defaults to 1 and returns the value directly.\n         *                             if defined, returns an array containing the random dice values.\n         */\n        Die: function Die(spotvalue, diceCount) {\n          if (spotvalue === undefined) {\n            spotvalue = 6;\n          }\n\n          if (diceCount === undefined) {\n            return Math.floor(random() * spotvalue) + 1;\n          } else {\n            return _toConsumableArray(new Array(diceCount).keys()).map(function () {\n              return Math.floor(random() * spotvalue) + 1;\n            });\n          }\n        },\n\n        /**\n         * Generate a random number between 0 and 1.\n         */\n        Number: function Number() {\n          return random();\n        },\n\n        /**\n         * Shuffle an array.\n         *\n         * @param {Array} deck - The array to shuffle. Does not mutate\n         *                       the input, but returns the shuffled array.\n         */\n        Shuffle: function Shuffle(deck) {\n          var clone = deck.slice(0);\n          var srcIndex = deck.length;\n          var dstIndex = 0;\n          var shuffled = new Array(srcIndex);\n\n          while (srcIndex) {\n            var randIndex = srcIndex * random() | 0;\n            shuffled[dstIndex++] = clone[randIndex];\n            clone[randIndex] = clone[--srcIndex];\n          }\n\n          return shuffled;\n        },\n        _obj: this\n      });\n    }\n  }]);\n\n  return Random;\n}();\n/**\n * Generates a new seed from the current date / time.\n */\n\nRandom.seed = function () {\n  return (+new Date()).toString(36).slice(-10);\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nvar PluginRandom = {\r\n    name: 'random',\r\n    noClient: ({ api }) => {\r\n        return api._obj.isUsed();\r\n    },\r\n    flush: ({ api }) => {\r\n        return api._obj.getState();\r\n    },\r\n    api: ({ data }) => {\r\n        const random = new Random(data);\r\n        return random.api();\r\n    },\r\n    setup: ({ game }) => {\r\n        let seed = game.seed;\r\n        if (seed === undefined) {\r\n            seed = Random.seed();\r\n        }\r\n        return { seed };\r\n    },\r\n};\n\n/**\n * Events\n */\n\nvar Events =\n/*#__PURE__*/\nfunction () {\n  function Events(flow, playerID) {\n    _classCallCheck(this, Events);\n\n    this.flow = flow;\n    this.playerID = playerID;\n    this.dispatch = [];\n  }\n  /**\n   * Attaches the Events API to ctx.\n   * @param {object} ctx - The ctx object to attach to.\n   */\n\n\n  _createClass(Events, [{\n    key: \"api\",\n    value: function api(ctx) {\n      var _this = this;\n\n      var events = {};\n      var phase = ctx.phase,\n          turn = ctx.turn;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var key = _step.value;\n\n          events[key] = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            _this.dispatch.push({\n              key: key,\n              args: args,\n              phase: phase,\n              turn: turn\n            });\n          };\n        };\n\n        for (var _iterator = this.flow.eventNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      events._obj = this;\n      return events;\n    }\n  }, {\n    key: \"isUsed\",\n    value: function isUsed() {\n      return this.dispatch.length > 0;\n    }\n    /**\n     * Updates ctx with the triggered events.\n     * @param {object} state - The state object { G, ctx }.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(state) {\n      for (var i = 0; i < this.dispatch.length; i++) {\n        var item = this.dispatch[i]; // If the turn already ended some other way,\n        // don't try to end the turn again.\n\n        if (item.key === 'endTurn' && item.turn !== state.ctx.turn) {\n          continue;\n        } // If the phase already ended some other way,\n        // don't try to end the phase again.\n\n\n        if ((item.key === 'endPhase' || item.key === 'setPhase') && item.phase !== state.ctx.phase) {\n          continue;\n        }\n\n        var action = automaticGameEvent(item.key, item.args, this.playerID);\n        state = _objectSpread2({}, state, {}, this.flow.processEvent(state, action));\n      }\n\n      return state;\n    }\n  }]);\n\n  return Events;\n}();\n\n/*\r\n * Copyright 2020 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nvar PluginEvents = {\r\n    name: 'events',\r\n    noClient: ({ api }) => {\r\n        return api._obj.isUsed();\r\n    },\r\n    flushRaw: ({ state, api }) => {\r\n        return api._obj.update(state);\r\n    },\r\n    api: ({ game, playerID, ctx }) => {\r\n        return new Events(game.flow, playerID).api(ctx);\r\n    },\r\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * List of plugins that are always added.\r\n */\r\nconst DEFAULT_PLUGINS = [PluginImmer, PluginRandom, PluginEvents];\r\n/**\r\n * Allow plugins to intercept actions and process them.\r\n */\r\nconst ProcessAction = (state, action, opts) => {\r\n    opts.game.plugins\r\n        .filter(plugin => plugin.action !== undefined)\r\n        .filter(plugin => plugin.name === action.payload.type)\r\n        .forEach(plugin => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name] || { data: {} };\r\n        const data = plugin.action(pluginState.data, action.payload);\r\n        state = {\r\n            ...state,\r\n            plugins: {\r\n                ...state.plugins,\r\n                [name]: { ...pluginState, data },\r\n            },\r\n        };\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * The API's created by various plugins are stored in the plugins\r\n * section of the state object:\r\n *\r\n * {\r\n *   G: {},\r\n *   ctx: {},\r\n *   plugins: {\r\n *     plugin-a: {\r\n *       data: {},  // this is generated by the plugin at Setup / Flush.\r\n *       api: {},   // this is ephemeral and generated by Enhance.\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * This function takes these API's and stuffs them back into\r\n * ctx for consumption inside a move function or hook.\r\n */\r\nconst EnhanceCtx = (state) => {\r\n    let ctx = { ...state.ctx };\r\n    const plugins = state.plugins || {};\r\n    Object.entries(plugins).forEach(([name, { api }]) => {\r\n        ctx[name] = api;\r\n    });\r\n    return ctx;\r\n};\r\n/**\r\n * Applies the provided plugins to the given move / flow function.\r\n *\r\n * @param {function} fn - The move function or trigger to apply the plugins to.\r\n * @param {object} plugins - The list of plugins.\r\n */\r\nconst FnWrap = (fn, plugins) => {\r\n    const reducer = (acc, { fnWrap }) => fnWrap(acc, plugins);\r\n    return [...DEFAULT_PLUGINS, ...plugins]\r\n        .filter(plugin => plugin.fnWrap !== undefined)\r\n        .reduce(reducer, fn);\r\n};\r\n/**\r\n * Allows the plugin to generate its initial state.\r\n */\r\nconst Setup = (state, opts) => {\r\n    [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter(plugin => plugin.setup !== undefined)\r\n        .forEach(plugin => {\r\n        const name = plugin.name;\r\n        const data = plugin.setup({\r\n            G: state.G,\r\n            ctx: state.ctx,\r\n            game: opts.game,\r\n        });\r\n        state = {\r\n            ...state,\r\n            plugins: {\r\n                ...state.plugins,\r\n                [name]: { data },\r\n            },\r\n        };\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * Invokes the plugin before a move or event.\r\n * The API that the plugin generates is stored inside\r\n * the `plugins` section of the state (which is subsequently\r\n * merged into ctx).\r\n */\r\nconst Enhance = (state, opts) => {\r\n    [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter(plugin => plugin.api !== undefined)\r\n        .forEach(plugin => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name] || { data: {} };\r\n        const api = plugin.api({\r\n            G: state.G,\r\n            ctx: state.ctx,\r\n            data: pluginState.data,\r\n            game: opts.game,\r\n        });\r\n        state = {\r\n            ...state,\r\n            plugins: {\r\n                ...state.plugins,\r\n                [name]: { ...pluginState, api },\r\n            },\r\n        };\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * Allows plugins to update their state after a move / event.\r\n */\r\nconst Flush = (state, opts) => {\r\n    [...DEFAULT_PLUGINS, ...opts.game.plugins].forEach(plugin => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name] || { data: {} };\r\n        if (plugin.flush) {\r\n            const newData = plugin.flush({\r\n                G: state.G,\r\n                ctx: state.ctx,\r\n                game: opts.game,\r\n                api: pluginState.api,\r\n                data: pluginState.data,\r\n            });\r\n            state = {\r\n                ...state,\r\n                plugins: {\r\n                    ...state.plugins,\r\n                    [plugin.name]: { data: newData },\r\n                },\r\n            };\r\n        }\r\n        else if (plugin.flushRaw) {\r\n            state = plugin.flushRaw({\r\n                state,\r\n                game: opts.game,\r\n                api: pluginState.api,\r\n                data: pluginState.data,\r\n            });\r\n            // Remove everything other than data.\r\n            const data = state.plugins[name].data;\r\n            state = {\r\n                ...state,\r\n                plugins: {\r\n                    ...state.plugins,\r\n                    [plugin.name]: { data },\r\n                },\r\n            };\r\n        }\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * Allows plugins to indicate if they should not be materialized on the client.\r\n * This will cause the client to discard the state update and wait for the\r\n * master instead.\r\n */\r\nconst NoClient = (state, opts) => {\r\n    return [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter(plugin => plugin.noClient !== undefined)\r\n        .map(plugin => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name];\r\n        if (pluginState) {\r\n            return plugin.noClient({\r\n                G: state.G,\r\n                ctx: state.ctx,\r\n                game: opts.game,\r\n                api: pluginState.api,\r\n                data: pluginState.data,\r\n            });\r\n        }\r\n        return false;\r\n    })\r\n        .some(value => value === true);\r\n};\n\n/*\n * Copyright 2018 The boardgame.io Authors\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\nvar production = process.env.NODE_ENV === 'production';\nvar logfn = production ? function () {} : console.log;\nvar errorfn = console.error;\nfunction info(msg) {\n  logfn(\"INFO: \".concat(msg));\n}\nfunction error(error) {\n  errorfn('ERROR:', error);\n}\n\n/**\n * Event to change the active players (and their stages) in the current turn.\n */\n\nfunction SetActivePlayersEvent(state, _playerID, arg) {\n  return _objectSpread2({}, state, {\n    ctx: SetActivePlayers(state.ctx, arg)\n  });\n}\nfunction SetActivePlayers(ctx, arg) {\n  var _prevActivePlayers = ctx._prevActivePlayers;\n\n  var _nextActivePlayers = arg.next || null;\n\n  if (arg.revert) {\n    _prevActivePlayers = _prevActivePlayers.concat({\n      activePlayers: ctx.activePlayers,\n      _activePlayersMoveLimit: ctx._activePlayersMoveLimit,\n      _activePlayersNumMoves: ctx._activePlayersNumMoves\n    });\n  } else {\n    _prevActivePlayers = [];\n  }\n\n  var activePlayers = {};\n  var _activePlayersMoveLimit = {};\n\n  if (Array.isArray(arg)) {\n    var value = {};\n    arg.forEach(function (v) {\n      return value[v] = Stage.NULL;\n    });\n    activePlayers = value;\n  }\n\n  if (arg.currentPlayer !== undefined) {\n    ApplyActivePlayerArgument(activePlayers, _activePlayersMoveLimit, ctx.currentPlayer, arg.currentPlayer);\n  }\n\n  if (arg.others !== undefined) {\n    for (var i = 0; i < ctx.playOrder.length; i++) {\n      var id = ctx.playOrder[i];\n\n      if (id !== ctx.currentPlayer) {\n        ApplyActivePlayerArgument(activePlayers, _activePlayersMoveLimit, id, arg.others);\n      }\n    }\n  }\n\n  if (arg.all !== undefined) {\n    for (var _i = 0; _i < ctx.playOrder.length; _i++) {\n      var _id = ctx.playOrder[_i];\n      ApplyActivePlayerArgument(activePlayers, _activePlayersMoveLimit, _id, arg.all);\n    }\n  }\n\n  if (arg.value) {\n    for (var _id2 in arg.value) {\n      ApplyActivePlayerArgument(activePlayers, _activePlayersMoveLimit, _id2, arg.value[_id2]);\n    }\n  }\n\n  if (arg.moveLimit) {\n    for (var _id3 in activePlayers) {\n      if (_activePlayersMoveLimit[_id3] === undefined) {\n        _activePlayersMoveLimit[_id3] = arg.moveLimit;\n      }\n    }\n  }\n\n  if (Object.keys(activePlayers).length == 0) {\n    activePlayers = null;\n  }\n\n  if (Object.keys(_activePlayersMoveLimit).length == 0) {\n    _activePlayersMoveLimit = null;\n  }\n\n  var _activePlayersNumMoves = {};\n\n  for (var _id4 in activePlayers) {\n    _activePlayersNumMoves[_id4] = 0;\n  }\n\n  return _objectSpread2({}, ctx, {\n    activePlayers: activePlayers,\n    _activePlayersMoveLimit: _activePlayersMoveLimit,\n    _activePlayersNumMoves: _activePlayersNumMoves,\n    _prevActivePlayers: _prevActivePlayers,\n    _nextActivePlayers: _nextActivePlayers\n  });\n}\n/**\n * Update activePlayers, setting it to previous, next or null values\n * when it becomes empty.\n * @param {Object} ctx\n */\n\nfunction UpdateActivePlayersOnceEmpty(ctx) {\n  var _ctx = ctx,\n      activePlayers = _ctx.activePlayers,\n      _activePlayersMoveLimit = _ctx._activePlayersMoveLimit,\n      _activePlayersNumMoves = _ctx._activePlayersNumMoves,\n      _prevActivePlayers = _ctx._prevActivePlayers;\n\n  if (activePlayers && Object.keys(activePlayers).length == 0) {\n    if (ctx._nextActivePlayers) {\n      ctx = SetActivePlayers(ctx, ctx._nextActivePlayers);\n      var _ctx2 = ctx;\n      activePlayers = _ctx2.activePlayers;\n      _activePlayersMoveLimit = _ctx2._activePlayersMoveLimit;\n      _activePlayersNumMoves = _ctx2._activePlayersNumMoves;\n      _prevActivePlayers = _ctx2._prevActivePlayers;\n    } else if (_prevActivePlayers.length > 0) {\n      var lastIndex = _prevActivePlayers.length - 1;\n      var _prevActivePlayers$la = _prevActivePlayers[lastIndex];\n      activePlayers = _prevActivePlayers$la.activePlayers;\n      _activePlayersMoveLimit = _prevActivePlayers$la._activePlayersMoveLimit;\n      _activePlayersNumMoves = _prevActivePlayers$la._activePlayersNumMoves;\n      _prevActivePlayers = _prevActivePlayers.slice(0, lastIndex);\n    } else {\n      activePlayers = null;\n      _activePlayersMoveLimit = null;\n    }\n  }\n\n  return _objectSpread2({}, ctx, {\n    activePlayers: activePlayers,\n    _activePlayersMoveLimit: _activePlayersMoveLimit,\n    _activePlayersNumMoves: _activePlayersNumMoves,\n    _prevActivePlayers: _prevActivePlayers\n  });\n}\n/**\n * Apply an active player argument to the given player ID\n * @param {Object} activePlayers\n * @param {Object} _activePlayersMoveLimit\n * @param {String} playerID The player to apply the parameter to\n * @param {(String|Object)} arg An active player argument\n */\n\nfunction ApplyActivePlayerArgument(activePlayers, _activePlayersMoveLimit, playerID, arg) {\n  if (_typeof(arg) !== 'object' || arg === Stage.NULL) {\n    arg = {\n      stage: arg\n    };\n  }\n\n  if (arg.stage !== undefined) {\n    activePlayers[playerID] = arg.stage;\n    if (arg.moveLimit) _activePlayersMoveLimit[playerID] = arg.moveLimit;\n  }\n}\n/**\n * Converts a playOrderPos index into its value in playOrder.\n * @param {Array} playOrder - An array of player ID's.\n * @param {number} playOrderPos - An index into the above.\n */\n\n\nfunction getCurrentPlayer(playOrder, playOrderPos) {\n  return playOrder[playOrderPos] + '';\n}\n/**\n * Called at the start of a turn to initialize turn order state.\n *\n * TODO: This is called inside StartTurn, which is called from\n * both UpdateTurn and StartPhase (so it's called at the beginning\n * of a new phase as well as between turns). We should probably\n * split it into two.\n *\n * @param {object} G - The game object G.\n * @param {object} ctx - The game object ctx.\n * @param {object} turn - A turn object for this phase.\n */\n\n\nfunction InitTurnOrderState(G, ctx, turn) {\n  var order = turn.order;\n\n  var playOrder = _toConsumableArray(new Array(ctx.numPlayers)).map(function (d, i) {\n    return i + '';\n  });\n\n  if (order.playOrder !== undefined) {\n    playOrder = order.playOrder(G, ctx);\n  }\n\n  var playOrderPos = order.first(G, ctx);\n  var currentPlayer = getCurrentPlayer(playOrder, playOrderPos);\n  ctx = _objectSpread2({}, ctx, {\n    currentPlayer: currentPlayer,\n    playOrderPos: playOrderPos,\n    playOrder: playOrder\n  });\n  ctx = SetActivePlayers(ctx, turn.activePlayers || {});\n  return ctx;\n}\n/**\n * Called at the end of each turn to update the turn order state.\n * @param {object} G - The game object G.\n * @param {object} ctx - The game object ctx.\n * @param {object} turn - A turn object for this phase.\n * @param {string} endTurnArg - An optional argument to endTurn that\n                                may specify the next player.\n */\n\nfunction UpdateTurnOrderState(G, ctx, turn, endTurnArg) {\n  var order = turn.order;\n  var playOrderPos = ctx.playOrderPos;\n  var currentPlayer = ctx.currentPlayer;\n  var endPhase = false;\n\n  if (endTurnArg && endTurnArg !== true) {\n    if (_typeof(endTurnArg) !== 'object') {\n      error(\"invalid argument to endTurn: \".concat(endTurnArg));\n    }\n\n    Object.keys(endTurnArg).forEach(function (arg) {\n      switch (arg) {\n        case 'remove':\n          currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\n          break;\n\n        case 'next':\n          playOrderPos = ctx.playOrder.indexOf(endTurnArg.next);\n          currentPlayer = endTurnArg.next;\n          break;\n\n        default:\n          error(\"invalid argument to endTurn: \".concat(arg));\n      }\n    });\n  } else {\n    var t = order.next(G, ctx);\n\n    if (t === undefined) {\n      endPhase = true;\n    } else {\n      playOrderPos = t;\n      currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\n    }\n  }\n\n  ctx = _objectSpread2({}, ctx, {\n    playOrderPos: playOrderPos,\n    currentPlayer: currentPlayer\n  });\n  return {\n    endPhase: endPhase,\n    ctx: ctx\n  };\n}\n/**\n * Set of different turn orders possible in a phase.\n * These are meant to be passed to the `turn` setting\n * in the flow objects.\n *\n * Each object defines the first player when the phase / game\n * begins, and also a function `next` to determine who the\n * next player is when the turn ends.\n *\n * The phase ends if next() returns undefined.\n */\n\nvar TurnOrder = {\n  /**\n   * DEFAULT\n   *\n   * The default round-robin turn order.\n   */\n  DEFAULT: {\n    first: function first(G, ctx) {\n      return ctx.turn === 0 ? ctx.playOrderPos : (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    },\n    next: function next(G, ctx) {\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  },\n\n  /**\n   * RESET\n   *\n   * Similar to DEFAULT, but starts from 0 each time.\n   */\n  RESET: {\n    first: function first() {\n      return 0;\n    },\n    next: function next(G, ctx) {\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  },\n\n  /**\n   * CONTINUE\n   *\n   * Similar to DEFAULT, but starts with the player who ended the last phase.\n   */\n  CONTINUE: {\n    first: function first(G, ctx) {\n      return ctx.playOrderPos;\n    },\n    next: function next(G, ctx) {\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  },\n\n  /**\n   * ONCE\n   *\n   * Another round-robin turn order, but goes around just once.\n   * The phase ends after all players have played.\n   */\n  ONCE: {\n    first: function first() {\n      return 0;\n    },\n    next: function next(G, ctx) {\n      if (ctx.playOrderPos < ctx.playOrder.length - 1) {\n        return ctx.playOrderPos + 1;\n      }\n    }\n  },\n\n  /**\n   * CUSTOM\n   *\n   * Identical to DEFAULT, but also sets playOrder at the\n   * beginning of the phase.\n   *\n   * @param {Array} playOrder - The play order.\n   */\n  CUSTOM: function CUSTOM(_playOrder) {\n    return {\n      playOrder: function playOrder() {\n        return _playOrder;\n      },\n      first: function first() {\n        return 0;\n      },\n      next: function next(G, ctx) {\n        return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n      }\n    };\n  },\n\n  /**\n   * CUSTOM_FROM\n   *\n   * Identical to DEFAULT, but also sets playOrder at the\n   * beginning of the phase to a value specified by a field\n   * in G.\n   *\n   * @param {string} playOrderField - Field in G.\n   */\n  CUSTOM_FROM: function CUSTOM_FROM(playOrderField) {\n    return {\n      playOrder: function playOrder(G) {\n        return G[playOrderField];\n      },\n      first: function first() {\n        return 0;\n      },\n      next: function next(G, ctx) {\n        return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n      }\n    };\n  }\n};\nvar Stage = {\n  NULL: null\n};\nvar ActivePlayers = {\n  /**\n   * ALL\n   *\n   * The turn stays with one player, but any player can play (in any order)\n   * until the phase ends.\n   */\n  ALL: {\n    all: Stage.NULL\n  },\n\n  /**\n   * ALL_ONCE\n   *\n   * The turn stays with one player, but any player can play (once, and in any order).\n   * This is typically used in a phase where you want to elicit a response\n   * from every player in the game.\n   */\n  ALL_ONCE: {\n    all: Stage.NULL,\n    moveLimit: 1\n  },\n\n  /**\n   * OTHERS\n   *\n   * The turn stays with one player, and every *other* player can play (in any order)\n   * until the phase ends.\n   */\n  OTHERS: {\n    others: Stage.NULL\n  },\n\n  /**\n   * OTHERS_ONCE\n   *\n   * The turn stays with one player, and every *other* player can play (once, and in any order).\n   * This is typically used in a phase where you want to elicit a response\n   * from every *other* player in the game.\n   */\n  OTHERS_ONCE: {\n    others: Stage.NULL,\n    moveLimit: 1\n  }\n};\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Flow\r\n *\r\n * Creates a reducer that updates ctx (analogous to how moves update G).\r\n */\r\nfunction Flow({ moves, phases, endIf, onEnd, turn, events, plugins, }) {\r\n    // Attach defaults.\r\n    if (moves === undefined) {\r\n        moves = {};\r\n    }\r\n    if (events === undefined) {\r\n        events = {};\r\n    }\r\n    if (plugins === undefined) {\r\n        plugins = [];\r\n    }\r\n    if (phases === undefined) {\r\n        phases = {};\r\n    }\r\n    if (!endIf)\r\n        endIf = () => undefined;\r\n    if (!onEnd)\r\n        onEnd = G => G;\r\n    if (!turn)\r\n        turn = {};\r\n    const phaseMap = { ...phases };\r\n    if ('' in phaseMap) {\r\n        error('cannot specify phase with empty name');\r\n    }\r\n    phaseMap[''] = {};\r\n    let moveMap = {};\r\n    let moveNames = new Set();\r\n    let startingPhase = null;\r\n    Object.keys(moves).forEach(name => moveNames.add(name));\r\n    const HookWrapper = (fn) => {\r\n        const withPlugins = FnWrap(fn, plugins);\r\n        return (state) => {\r\n            const ctxWithAPI = EnhanceCtx(state);\r\n            return withPlugins(state.G, ctxWithAPI);\r\n        };\r\n    };\r\n    const TriggerWrapper = (endIf) => {\r\n        return (state) => {\r\n            let ctxWithAPI = EnhanceCtx(state);\r\n            return endIf(state.G, ctxWithAPI);\r\n        };\r\n    };\r\n    const wrapped = {\r\n        onEnd: HookWrapper(onEnd),\r\n        endIf: TriggerWrapper(endIf),\r\n    };\r\n    for (let phase in phaseMap) {\r\n        const conf = phaseMap[phase];\r\n        if (conf.start === true) {\r\n            startingPhase = phase;\r\n        }\r\n        if (conf.moves !== undefined) {\r\n            for (let move of Object.keys(conf.moves)) {\r\n                moveMap[phase + '.' + move] = conf.moves[move];\r\n                moveNames.add(move);\r\n            }\r\n        }\r\n        if (conf.endIf === undefined) {\r\n            conf.endIf = () => undefined;\r\n        }\r\n        if (conf.onBegin === undefined) {\r\n            conf.onBegin = G => G;\r\n        }\r\n        if (conf.onEnd === undefined) {\r\n            conf.onEnd = G => G;\r\n        }\r\n        if (conf.turn === undefined) {\r\n            conf.turn = turn;\r\n        }\r\n        if (conf.turn.order === undefined) {\r\n            conf.turn.order = TurnOrder.DEFAULT;\r\n        }\r\n        if (conf.turn.onBegin === undefined) {\r\n            conf.turn.onBegin = G => G;\r\n        }\r\n        if (conf.turn.onEnd === undefined) {\r\n            conf.turn.onEnd = G => G;\r\n        }\r\n        if (conf.turn.endIf === undefined) {\r\n            conf.turn.endIf = () => false;\r\n        }\r\n        if (conf.turn.onMove === undefined) {\r\n            conf.turn.onMove = G => G;\r\n        }\r\n        if (conf.turn.stages === undefined) {\r\n            conf.turn.stages = {};\r\n        }\r\n        for (const stage in conf.turn.stages) {\r\n            const stageConfig = conf.turn.stages[stage];\r\n            const moves = stageConfig.moves || {};\r\n            for (let move of Object.keys(moves)) {\r\n                let key = phase + '.' + stage + '.' + move;\r\n                moveMap[key] = moves[move];\r\n                moveNames.add(move);\r\n            }\r\n        }\r\n        conf.wrapped = {\r\n            onBegin: HookWrapper(conf.onBegin),\r\n            onEnd: HookWrapper(conf.onEnd),\r\n            endIf: TriggerWrapper(conf.endIf),\r\n        };\r\n        conf.turn.wrapped = {\r\n            onMove: HookWrapper(conf.turn.onMove),\r\n            onBegin: HookWrapper(conf.turn.onBegin),\r\n            onEnd: HookWrapper(conf.turn.onEnd),\r\n            endIf: TriggerWrapper(conf.turn.endIf),\r\n        };\r\n    }\r\n    function GetPhase(ctx) {\r\n        return ctx.phase ? phaseMap[ctx.phase] : phaseMap[''];\r\n    }\r\n    function OnMove(s) {\r\n        return s;\r\n    }\r\n    function Process(state, events) {\r\n        const phasesEnded = new Set();\r\n        const turnsEnded = new Set();\r\n        for (let i = 0; i < events.length; i++) {\r\n            const { fn, arg, ...rest } = events[i];\r\n            // Detect a loop of EndPhase calls.\r\n            // This could potentially even be an infinite loop\r\n            // if the endIf condition of each phase blindly\r\n            // returns true. The moment we detect a single\r\n            // loop, we just bail out of all phases.\r\n            if (fn === EndPhase) {\r\n                turnsEnded.clear();\r\n                const phase = state.ctx.phase;\r\n                if (phasesEnded.has(phase)) {\r\n                    const ctx = { ...state.ctx, phase: null };\r\n                    return { ...state, ctx };\r\n                }\r\n                phasesEnded.add(phase);\r\n            }\r\n            // Process event.\r\n            let next = [];\r\n            state = fn(state, {\r\n                ...rest,\r\n                arg,\r\n                next,\r\n            });\r\n            if (fn === EndGame) {\r\n                break;\r\n            }\r\n            // Check if we should end the game.\r\n            const shouldEndGame = ShouldEndGame(state);\r\n            if (shouldEndGame) {\r\n                events.push({\r\n                    fn: EndGame,\r\n                    arg: shouldEndGame,\r\n                    turn: state.ctx.turn,\r\n                    phase: state.ctx.phase,\r\n                    automatic: true,\r\n                });\r\n                continue;\r\n            }\r\n            // Check if we should end the phase.\r\n            const shouldEndPhase = ShouldEndPhase(state);\r\n            if (shouldEndPhase) {\r\n                events.push({\r\n                    fn: EndPhase,\r\n                    arg: shouldEndPhase,\r\n                    turn: state.ctx.turn,\r\n                    phase: state.ctx.phase,\r\n                    automatic: true,\r\n                });\r\n                continue;\r\n            }\r\n            // Check if we should end the turn.\r\n            if (fn === OnMove) {\r\n                const shouldEndTurn = ShouldEndTurn(state);\r\n                if (shouldEndTurn) {\r\n                    events.push({\r\n                        fn: EndTurn,\r\n                        arg: shouldEndTurn,\r\n                        turn: state.ctx.turn,\r\n                        phase: state.ctx.phase,\r\n                        automatic: true,\r\n                    });\r\n                    continue;\r\n                }\r\n            }\r\n            events.push(...next);\r\n        }\r\n        return state;\r\n    }\r\n    ///////////\r\n    // Start //\r\n    ///////////\r\n    function StartGame(state, { next }) {\r\n        next.push({ fn: StartPhase });\r\n        return state;\r\n    }\r\n    function StartPhase(state, { next }) {\r\n        let { G, ctx } = state;\r\n        const conf = GetPhase(ctx);\r\n        // Run any phase setup code provided by the user.\r\n        G = conf.wrapped.onBegin(state);\r\n        next.push({ fn: StartTurn });\r\n        return { ...state, G, ctx };\r\n    }\r\n    function StartTurn(state, { currentPlayer }) {\r\n        let { G, ctx } = state;\r\n        const conf = GetPhase(ctx);\r\n        // Initialize the turn order state.\r\n        if (currentPlayer) {\r\n            ctx = { ...ctx, currentPlayer };\r\n            if (conf.turn.activePlayers) {\r\n                ctx = SetActivePlayers(ctx, conf.turn.activePlayers);\r\n            }\r\n        }\r\n        else {\r\n            // This is only called at the beginning of the phase\r\n            // when there is no currentPlayer yet.\r\n            ctx = InitTurnOrderState(G, ctx, conf.turn);\r\n        }\r\n        const turn = ctx.turn + 1;\r\n        ctx = { ...ctx, turn, numMoves: 0, _prevActivePlayers: [] };\r\n        G = conf.turn.wrapped.onBegin({ ...state, G, ctx });\r\n        const _undo = [{ G, ctx }];\r\n        return { ...state, G, ctx, _undo, _redo: [] };\r\n    }\r\n    ////////////\r\n    // Update //\r\n    ////////////\r\n    function UpdatePhase(state, { arg, next, phase }) {\r\n        const conf = GetPhase({ phase });\r\n        let { ctx } = state;\r\n        if (arg && arg.next) {\r\n            if (arg.next in phaseMap) {\r\n                ctx = { ...ctx, phase: arg.next };\r\n            }\r\n            else {\r\n                error('invalid phase: ' + arg.next);\r\n                return state;\r\n            }\r\n        }\r\n        else if (conf.next !== undefined) {\r\n            ctx = { ...ctx, phase: conf.next };\r\n        }\r\n        else {\r\n            ctx = { ...ctx, phase: null };\r\n        }\r\n        state = { ...state, ctx };\r\n        // Start the new phase.\r\n        next.push({ fn: StartPhase });\r\n        return state;\r\n    }\r\n    function UpdateTurn(state, { arg, currentPlayer, next }) {\r\n        let { G, ctx } = state;\r\n        const conf = GetPhase(ctx);\r\n        // Update turn order state.\r\n        const { endPhase, ctx: newCtx } = UpdateTurnOrderState(G, { ...ctx, currentPlayer }, conf.turn, arg);\r\n        ctx = newCtx;\r\n        state = { ...state, G, ctx };\r\n        if (endPhase) {\r\n            next.push({ fn: EndPhase, turn: ctx.turn, phase: ctx.phase });\r\n        }\r\n        else {\r\n            next.push({ fn: StartTurn, currentPlayer: ctx.currentPlayer });\r\n        }\r\n        return state;\r\n    }\r\n    function UpdateStage(state, { arg, playerID }) {\r\n        if (typeof arg === 'string') {\r\n            arg = { stage: arg };\r\n        }\r\n        let { ctx } = state;\r\n        let { activePlayers, _activePlayersMoveLimit, _activePlayersNumMoves, } = ctx;\r\n        if (arg.stage) {\r\n            if (activePlayers === null) {\r\n                activePlayers = {};\r\n            }\r\n            activePlayers[playerID] = arg.stage;\r\n            _activePlayersNumMoves[playerID] = 0;\r\n            if (arg.moveLimit) {\r\n                if (_activePlayersMoveLimit === null) {\r\n                    _activePlayersMoveLimit = {};\r\n                }\r\n                _activePlayersMoveLimit[playerID] = arg.moveLimit;\r\n            }\r\n        }\r\n        ctx = {\r\n            ...ctx,\r\n            activePlayers,\r\n            _activePlayersMoveLimit,\r\n            _activePlayersNumMoves,\r\n        };\r\n        return { ...state, ctx };\r\n    }\r\n    ///////////////\r\n    // ShouldEnd //\r\n    ///////////////\r\n    function ShouldEndGame(state) {\r\n        return wrapped.endIf(state);\r\n    }\r\n    function ShouldEndPhase(state) {\r\n        const conf = GetPhase(state.ctx);\r\n        return conf.wrapped.endIf(state);\r\n    }\r\n    function ShouldEndTurn(state) {\r\n        const conf = GetPhase(state.ctx);\r\n        // End the turn if the required number of moves has been made.\r\n        const currentPlayerMoves = state.ctx.numMoves || 0;\r\n        if (conf.turn.moveLimit && currentPlayerMoves >= conf.turn.moveLimit) {\r\n            return true;\r\n        }\r\n        return conf.turn.wrapped.endIf(state);\r\n    }\r\n    /////////\r\n    // End //\r\n    /////////\r\n    function EndGame(state, { arg, phase }) {\r\n        state = EndPhase(state, { phase });\r\n        if (arg === undefined) {\r\n            arg = true;\r\n        }\r\n        state = { ...state, ctx: { ...state.ctx, gameover: arg } };\r\n        // Run game end hook.\r\n        const G = wrapped.onEnd(state);\r\n        return { ...state, G };\r\n    }\r\n    function EndPhase(state, { arg, next, turn, automatic }) {\r\n        // End the turn first.\r\n        state = EndTurn(state, { turn, force: true });\r\n        let G = state.G;\r\n        let ctx = state.ctx;\r\n        if (next) {\r\n            next.push({ fn: UpdatePhase, arg, phase: ctx.phase });\r\n        }\r\n        // If we aren't in a phase, there is nothing else to do.\r\n        if (ctx.phase === null) {\r\n            return state;\r\n        }\r\n        // Run any cleanup code for the phase that is about to end.\r\n        const conf = GetPhase(ctx);\r\n        G = conf.wrapped.onEnd(state);\r\n        // Reset the phase.\r\n        ctx = { ...ctx, phase: null };\r\n        // Add log entry.\r\n        const action = gameEvent('endPhase', arg);\r\n        const logEntry = {\r\n            action,\r\n            _stateID: state._stateID,\r\n            turn: state.ctx.turn,\r\n            phase: state.ctx.phase,\r\n        };\r\n        if (automatic) {\r\n            logEntry.automatic = true;\r\n        }\r\n        const deltalog = [...state.deltalog, logEntry];\r\n        return { ...state, G, ctx, deltalog };\r\n    }\r\n    function EndTurn(state, { arg, next, turn, force, automatic, playerID }) {\r\n        // This is not the turn that EndTurn was originally\r\n        // called for. The turn was probably ended some other way.\r\n        if (turn !== state.ctx.turn) {\r\n            return state;\r\n        }\r\n        let { G, ctx } = state;\r\n        const conf = GetPhase(ctx);\r\n        // Prevent ending the turn if moveLimit hasn't been reached.\r\n        const currentPlayerMoves = ctx.numMoves || 0;\r\n        if (!force &&\r\n            conf.turn.moveLimit &&\r\n            currentPlayerMoves < conf.turn.moveLimit) {\r\n            info(`cannot end turn before making ${conf.turn.moveLimit} moves`);\r\n            return state;\r\n        }\r\n        // Run turn-end triggers.\r\n        G = conf.turn.wrapped.onEnd(state);\r\n        if (next) {\r\n            next.push({ fn: UpdateTurn, arg, currentPlayer: ctx.currentPlayer });\r\n        }\r\n        // Reset activePlayers.\r\n        ctx = { ...ctx, activePlayers: null };\r\n        // Remove player from playerOrder\r\n        if (arg && arg.remove) {\r\n            playerID = playerID || ctx.currentPlayer;\r\n            const playOrder = ctx.playOrder.filter(i => i != playerID);\r\n            const playOrderPos = ctx.playOrderPos > playOrder.length - 1 ? 0 : ctx.playOrderPos;\r\n            ctx = { ...ctx, playOrder, playOrderPos };\r\n            if (playOrder.length === 0) {\r\n                next.push({ fn: EndPhase, turn: ctx.turn, phase: ctx.phase });\r\n                return state;\r\n            }\r\n        }\r\n        // Add log entry.\r\n        const action = gameEvent('endTurn', arg);\r\n        const logEntry = {\r\n            action,\r\n            _stateID: state._stateID,\r\n            turn: state.ctx.turn,\r\n            phase: state.ctx.phase,\r\n        };\r\n        if (automatic) {\r\n            logEntry.automatic = true;\r\n        }\r\n        const deltalog = [...(state.deltalog || []), logEntry];\r\n        return { ...state, G, ctx, deltalog, _undo: [], _redo: [] };\r\n    }\r\n    function EndStage(state, { arg, next, automatic, playerID }) {\r\n        playerID = playerID || state.ctx.currentPlayer;\r\n        let { ctx } = state;\r\n        let { activePlayers, _activePlayersMoveLimit } = ctx;\r\n        const playerInStage = activePlayers !== null && playerID in activePlayers;\r\n        if (!arg && playerInStage) {\r\n            const conf = GetPhase(ctx);\r\n            const stage = conf.turn.stages[activePlayers[playerID]];\r\n            if (stage && stage.next)\r\n                arg = stage.next;\r\n        }\r\n        if (next && arg) {\r\n            next.push({ fn: UpdateStage, arg, playerID });\r\n        }\r\n        // If player isn’t in a stage, there is nothing else to do.\r\n        if (!playerInStage)\r\n            return state;\r\n        // Remove player from activePlayers.\r\n        activePlayers = Object.keys(activePlayers)\r\n            .filter(id => id !== playerID)\r\n            .reduce((obj, key) => {\r\n            obj[key] = activePlayers[key];\r\n            return obj;\r\n        }, {});\r\n        if (_activePlayersMoveLimit) {\r\n            // Remove player from _activePlayersMoveLimit.\r\n            _activePlayersMoveLimit = Object.keys(_activePlayersMoveLimit)\r\n                .filter(id => id !== playerID)\r\n                .reduce((obj, key) => {\r\n                obj[key] = _activePlayersMoveLimit[key];\r\n                return obj;\r\n            }, {});\r\n        }\r\n        ctx = UpdateActivePlayersOnceEmpty({\r\n            ...ctx,\r\n            activePlayers,\r\n            _activePlayersMoveLimit,\r\n        });\r\n        // Add log entry.\r\n        const action = gameEvent('endStage', arg);\r\n        const logEntry = {\r\n            action,\r\n            _stateID: state._stateID,\r\n            turn: state.ctx.turn,\r\n            phase: state.ctx.phase,\r\n        };\r\n        if (automatic) {\r\n            logEntry.automatic = true;\r\n        }\r\n        const deltalog = [...(state.deltalog || []), logEntry];\r\n        return { ...state, ctx, deltalog };\r\n    }\r\n    /**\r\n     * Retrieves the relevant move that can be played by playerID.\r\n     *\r\n     * If ctx.activePlayers is set (i.e. one or more players are in some stage),\r\n     * then it attempts to find the move inside the stages config for\r\n     * that turn. If the stage for a player is '', then the player is\r\n     * allowed to make a move (as determined by the phase config), but\r\n     * isn't restricted to a particular set as defined in the stage config.\r\n     *\r\n     * If not, it then looks for the move inside the phase.\r\n     *\r\n     * If it doesn't find the move there, it looks at the global move definition.\r\n     *\r\n     * @param {object} ctx\r\n     * @param {string} name\r\n     * @param {string} playerID\r\n     */\r\n    function GetMove(ctx, name, playerID) {\r\n        const conf = GetPhase(ctx);\r\n        const stages = conf.turn.stages;\r\n        const { activePlayers } = ctx;\r\n        if (activePlayers &&\r\n            activePlayers[playerID] !== undefined &&\r\n            activePlayers[playerID] !== Stage.NULL &&\r\n            stages[activePlayers[playerID]] !== undefined &&\r\n            stages[activePlayers[playerID]].moves !== undefined) {\r\n            // Check if moves are defined for the player's stage.\r\n            const stage = stages[activePlayers[playerID]];\r\n            const moves = stage.moves;\r\n            if (name in moves) {\r\n                return moves[name];\r\n            }\r\n        }\r\n        else if (conf.moves) {\r\n            // Check if moves are defined for the current phase.\r\n            if (name in conf.moves) {\r\n                return conf.moves[name];\r\n            }\r\n        }\r\n        else if (name in moves) {\r\n            // Check for the move globally.\r\n            return moves[name];\r\n        }\r\n        return null;\r\n    }\r\n    function ProcessMove(state, action) {\r\n        let conf = GetPhase(state.ctx);\r\n        let { ctx } = state;\r\n        let { _activePlayersNumMoves } = ctx;\r\n        const { playerID } = action;\r\n        if (ctx.activePlayers)\r\n            _activePlayersNumMoves[playerID]++;\r\n        let numMoves = state.ctx.numMoves;\r\n        if (playerID == state.ctx.currentPlayer) {\r\n            numMoves++;\r\n        }\r\n        state = {\r\n            ...state,\r\n            ctx: {\r\n                ...ctx,\r\n                numMoves,\r\n                _activePlayersNumMoves,\r\n            },\r\n        };\r\n        if (ctx._activePlayersMoveLimit &&\r\n            _activePlayersNumMoves[playerID] >= ctx._activePlayersMoveLimit[playerID]) {\r\n            state = EndStage(state, { playerID, automatic: true });\r\n        }\r\n        const G = conf.turn.wrapped.onMove(state);\r\n        state = { ...state, G };\r\n        // Update undo / redo state.\r\n        const undo = state._undo || [];\r\n        const moveType = action.type;\r\n        state = {\r\n            ...state,\r\n            _undo: [...undo, { G: state.G, ctx: state.ctx, moveType }],\r\n            _redo: [],\r\n        };\r\n        let events = [{ fn: OnMove }];\r\n        return Process(state, events);\r\n    }\r\n    function SetStageEvent(state, playerID, arg) {\r\n        return Process(state, [{ fn: EndStage, arg, playerID }]);\r\n    }\r\n    function EndStageEvent(state, playerID) {\r\n        return Process(state, [{ fn: EndStage, playerID }]);\r\n    }\r\n    function SetPhaseEvent(state, _playerID, newPhase) {\r\n        return Process(state, [\r\n            {\r\n                fn: EndPhase,\r\n                phase: state.ctx.phase,\r\n                turn: state.ctx.turn,\r\n                arg: { next: newPhase },\r\n            },\r\n        ]);\r\n    }\r\n    function EndPhaseEvent(state) {\r\n        return Process(state, [\r\n            { fn: EndPhase, phase: state.ctx.phase, turn: state.ctx.turn },\r\n        ]);\r\n    }\r\n    function EndTurnEvent(state, _playerID, arg) {\r\n        return Process(state, [\r\n            { fn: EndTurn, turn: state.ctx.turn, phase: state.ctx.phase, arg },\r\n        ]);\r\n    }\r\n    function PassEvent(state, _playerID, arg) {\r\n        return Process(state, [\r\n            {\r\n                fn: EndTurn,\r\n                turn: state.ctx.turn,\r\n                phase: state.ctx.phase,\r\n                force: true,\r\n                arg,\r\n            },\r\n        ]);\r\n    }\r\n    function EndGameEvent(state, _playerID, arg) {\r\n        return Process(state, [\r\n            { fn: EndGame, turn: state.ctx.turn, phase: state.ctx.phase, arg },\r\n        ]);\r\n    }\r\n    const eventHandlers = {\r\n        endStage: EndStageEvent,\r\n        setStage: SetStageEvent,\r\n        endTurn: EndTurnEvent,\r\n        pass: PassEvent,\r\n        endPhase: EndPhaseEvent,\r\n        setPhase: SetPhaseEvent,\r\n        endGame: EndGameEvent,\r\n        setActivePlayers: SetActivePlayersEvent,\r\n    };\r\n    let enabledEventNames = [];\r\n    if (events.endTurn !== false) {\r\n        enabledEventNames.push('endTurn');\r\n    }\r\n    if (events.pass !== false) {\r\n        enabledEventNames.push('pass');\r\n    }\r\n    if (events.endPhase !== false) {\r\n        enabledEventNames.push('endPhase');\r\n    }\r\n    if (events.setPhase !== false) {\r\n        enabledEventNames.push('setPhase');\r\n    }\r\n    if (events.endGame !== false) {\r\n        enabledEventNames.push('endGame');\r\n    }\r\n    if (events.setActivePlayers !== false) {\r\n        enabledEventNames.push('setActivePlayers');\r\n    }\r\n    if (events.endStage !== false) {\r\n        enabledEventNames.push('endStage');\r\n    }\r\n    if (events.setStage !== false) {\r\n        enabledEventNames.push('setStage');\r\n    }\r\n    function ProcessEvent(state, action) {\r\n        const { type, playerID, args } = action.payload;\r\n        if (eventHandlers.hasOwnProperty(type)) {\r\n            const eventArgs = [state, playerID].concat(args);\r\n            return eventHandlers[type].apply({}, eventArgs);\r\n        }\r\n        return state;\r\n    }\r\n    function IsPlayerActive(_G, ctx, playerID) {\r\n        if (ctx.activePlayers) {\r\n            return playerID in ctx.activePlayers;\r\n        }\r\n        return ctx.currentPlayer === playerID;\r\n    }\r\n    return {\r\n        ctx: (numPlayers) => ({\r\n            numPlayers,\r\n            turn: 0,\r\n            currentPlayer: '0',\r\n            playOrder: [...new Array(numPlayers)].map((_d, i) => i + ''),\r\n            playOrderPos: 0,\r\n            phase: startingPhase,\r\n            activePlayers: null,\r\n        }),\r\n        init: (state) => {\r\n            return Process(state, [{ fn: StartGame }]);\r\n        },\r\n        isPlayerActive: IsPlayerActive,\r\n        eventHandlers,\r\n        eventNames: Object.keys(eventHandlers),\r\n        enabledEventNames,\r\n        moveMap,\r\n        moveNames: [...moveNames.values()],\r\n        processMove: ProcessMove,\r\n        processEvent: ProcessEvent,\r\n        getMove: GetMove,\r\n    };\r\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nfunction IsProcessed(game) {\r\n    return game.processMove !== undefined;\r\n}\r\n/**\r\n * Game\r\n *\r\n * Helper to generate the game move reducer. The returned\r\n * reducer has the following signature:\r\n *\r\n * (G, action, ctx) => {}\r\n *\r\n * You can roll your own if you like, or use any Redux\r\n * addon to generate such a reducer.\r\n *\r\n * The convention used in this framework is to\r\n * have action.type contain the name of the move, and\r\n * action.args contain any additional arguments as an\r\n * Array.\r\n */\r\nfunction Game(game) {\r\n    // The Game() function has already been called on this\r\n    // config object, so just pass it through.\r\n    if (IsProcessed(game)) {\r\n        return game;\r\n    }\r\n    if (game.name === undefined)\r\n        game.name = 'default';\r\n    if (game.setup === undefined)\r\n        game.setup = () => ({});\r\n    if (game.moves === undefined)\r\n        game.moves = {};\r\n    if (game.playerView === undefined)\r\n        game.playerView = G => G;\r\n    if (game.plugins === undefined)\r\n        game.plugins = [];\r\n    game.plugins.forEach(plugin => {\r\n        if (plugin.name === undefined) {\r\n            throw new Error('Plugin missing name attribute');\r\n        }\r\n        if (plugin.name.includes(' ')) {\r\n            throw new Error(plugin.name + ': Plugin name must not include spaces');\r\n        }\r\n    });\r\n    if (game.name.includes(' ')) {\r\n        throw new Error(game.name + ': Game name must not include spaces');\r\n    }\r\n    const flow = Flow(game);\r\n    return {\r\n        ...game,\r\n        flow,\r\n        moveNames: flow.moveNames,\r\n        pluginNames: game.plugins.map(p => p.name),\r\n        processMove: (state, action) => {\r\n            let moveFn = flow.getMove(state.ctx, action.type, action.playerID);\r\n            if (IsLongFormMove(moveFn)) {\r\n                moveFn = moveFn.move;\r\n            }\r\n            if (moveFn instanceof Function) {\r\n                const fn = FnWrap(moveFn, game.plugins);\r\n                const ctxWithAPI = {\r\n                    ...EnhanceCtx(state),\r\n                    playerID: action.playerID,\r\n                };\r\n                let args = [state.G, ctxWithAPI];\r\n                if (action.args !== undefined) {\r\n                    args = args.concat(action.args);\r\n                }\r\n                return fn(...args);\r\n            }\r\n            error(`invalid move object: ${action.type}`);\r\n            return state.G;\r\n        },\r\n    };\r\n}\r\nfunction IsLongFormMove(move) {\r\n    return move instanceof Object && move.move !== undefined;\r\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Returns true if a move can be undone.\r\n */\r\nconst CanUndoMove = (G, ctx, move) => {\r\n    function HasUndoable(move) {\r\n        return move.undoable !== undefined;\r\n    }\r\n    function IsFunction(undoable) {\r\n        return undoable instanceof Function;\r\n    }\r\n    if (!HasUndoable(move)) {\r\n        return true;\r\n    }\r\n    if (IsFunction(move.undoable)) {\r\n        return move.undoable(G, ctx);\r\n    }\r\n    return move.undoable;\r\n};\r\n/**\r\n * Moves can return this when they want to indicate\r\n * that the combination of arguments is illegal and\r\n * the move ought to be discarded.\r\n */\r\nconst INVALID_MOVE = 'INVALID_MOVE';\r\n/**\r\n * CreateGameReducer\r\n *\r\n * Creates the main game state reducer.\r\n */\r\nfunction CreateGameReducer({ game, isClient, }) {\r\n    game = Game(game);\r\n    /**\r\n     * GameReducer\r\n     *\r\n     * Redux reducer that maintains the overall game state.\r\n     * @param {object} state - The state before the action.\r\n     * @param {object} action - A Redux action.\r\n     */\r\n    return (state = null, action) => {\r\n        switch (action.type) {\r\n            case GAME_EVENT: {\r\n                state = { ...state, deltalog: [] };\r\n                // Process game events only on the server.\r\n                // These events like `endTurn` typically\r\n                // contain code that may rely on secret state\r\n                // and cannot be computed on the client.\r\n                if (isClient) {\r\n                    return state;\r\n                }\r\n                // Disallow events once the game is over.\r\n                if (state.ctx.gameover !== undefined) {\r\n                    error(`cannot call event after game end`);\r\n                    return state;\r\n                }\r\n                // Ignore the event if the player isn't active.\r\n                if (action.payload.playerID !== null &&\r\n                    action.payload.playerID !== undefined &&\r\n                    !game.flow.isPlayerActive(state.G, state.ctx, action.payload.playerID)) {\r\n                    error(`disallowed event: ${action.payload.type}`);\r\n                    return state;\r\n                }\r\n                // Execute plugins.\r\n                state = Enhance(state, { game, isClient: false });\r\n                // Process event.\r\n                let newState = game.flow.processEvent(state, action);\r\n                // Execute plugins.\r\n                newState = Flush(newState, { game, isClient: false });\r\n                return { ...newState, _stateID: state._stateID + 1 };\r\n            }\r\n            case MAKE_MOVE: {\r\n                state = { ...state, deltalog: [] };\r\n                // Check whether the move is allowed at this time.\r\n                const move = game.flow.getMove(state.ctx, action.payload.type, action.payload.playerID || state.ctx.currentPlayer);\r\n                if (move === null) {\r\n                    error(`disallowed move: ${action.payload.type}`);\r\n                    return state;\r\n                }\r\n                // Don't run move on client if move says so.\r\n                if (isClient && move.client === false) {\r\n                    return state;\r\n                }\r\n                // Disallow moves once the game is over.\r\n                if (state.ctx.gameover !== undefined) {\r\n                    error(`cannot make move after game end`);\r\n                    return state;\r\n                }\r\n                // Ignore the move if the player isn't active.\r\n                if (action.payload.playerID !== null &&\r\n                    action.payload.playerID !== undefined &&\r\n                    !game.flow.isPlayerActive(state.G, state.ctx, action.payload.playerID)) {\r\n                    error(`disallowed move: ${action.payload.type}`);\r\n                    return state;\r\n                }\r\n                // Execute plugins.\r\n                state = Enhance(state, {\r\n                    game,\r\n                    isClient,\r\n                });\r\n                // Process the move.\r\n                let G = game.processMove(state, action.payload);\r\n                // The game declared the move as invalid.\r\n                if (G === INVALID_MOVE) {\r\n                    error(`invalid move: ${action.payload.type} args: ${action.payload.args}`);\r\n                    return state;\r\n                }\r\n                // Create a log entry for this move.\r\n                let logEntry = {\r\n                    action,\r\n                    _stateID: state._stateID,\r\n                    turn: state.ctx.turn,\r\n                    phase: state.ctx.phase,\r\n                };\r\n                if (move.redact === true) {\r\n                    logEntry.redact = true;\r\n                }\r\n                const newState = {\r\n                    ...state,\r\n                    G,\r\n                    deltalog: [logEntry],\r\n                    _stateID: state._stateID + 1,\r\n                };\r\n                // Some plugin indicated that it is not suitable to be\r\n                // materialized on the client (and must wait for the server\r\n                // response instead).\r\n                if (isClient && NoClient(newState, { game })) {\r\n                    return state;\r\n                }\r\n                state = newState;\r\n                // If we're on the client, just process the move\r\n                // and no triggers in multiplayer mode.\r\n                // These will be processed on the server, which\r\n                // will send back a state update.\r\n                if (isClient) {\r\n                    state = Flush(state, {\r\n                        game,\r\n                        isClient: true,\r\n                    });\r\n                    return state;\r\n                }\r\n                // Allow the flow reducer to process any triggers that happen after moves.\r\n                state = game.flow.processMove(state, action.payload);\r\n                state = Flush(state, { game });\r\n                return state;\r\n            }\r\n            case RESET:\r\n            case UPDATE:\r\n            case SYNC: {\r\n                return action.state;\r\n            }\r\n            case UNDO: {\r\n                const { _undo, _redo } = state;\r\n                if (_undo.length < 2) {\r\n                    return state;\r\n                }\r\n                const last = _undo[_undo.length - 1];\r\n                const restore = _undo[_undo.length - 2];\r\n                // Only allow undoable moves to be undone.\r\n                const lastMove = game.flow.getMove(state.ctx, last.moveType, state.ctx.currentPlayer);\r\n                if (!CanUndoMove(state.G, state.ctx, lastMove)) {\r\n                    return state;\r\n                }\r\n                return {\r\n                    ...state,\r\n                    G: restore.G,\r\n                    ctx: restore.ctx,\r\n                    _undo: _undo.slice(0, _undo.length - 1),\r\n                    _redo: [last, ..._redo],\r\n                };\r\n            }\r\n            case REDO: {\r\n                const { _undo, _redo } = state;\r\n                if (_redo.length == 0) {\r\n                    return state;\r\n                }\r\n                const first = _redo[0];\r\n                return {\r\n                    ...state,\r\n                    G: first.G,\r\n                    ctx: first.ctx,\r\n                    _undo: [..._undo, first],\r\n                    _redo: _redo.slice(1),\r\n                };\r\n            }\r\n            case PLUGIN: {\r\n                return ProcessAction(state, action, { game });\r\n            }\r\n            default: {\r\n                return state;\r\n            }\r\n        }\r\n    };\r\n}\n\nexport { ActionCreators as A, CreateGameReducer as C, Enhance as E, Flush as F, Game as G, INVALID_MOVE as I, MAKE_MOVE as M, RESET as R, Setup as S, TurnOrder as T, UPDATE as U, _createClass as _, _classCallCheck as a, _defineProperty as b, alea as c, _inherits as d, error as e, _possibleConstructorReturn as f, gameEvent as g, _getPrototypeOf as h, _typeof as i, EnhanceCtx as j, _objectSpread2 as k, redo as l, makeMove as m, GAME_EVENT as n, _toConsumableArray as o, SYNC as p, ActivePlayers as q, reset as r, sync as s, Stage as t, undo as u, _assertThisInitialized as v, update as w, UNDO as x, REDO as y, _objectWithoutProperties as z };\n","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : defineProperty({}, \"immer-nothing\", true);\n\nvar DRAFTABLE = typeof Symbol !== \"undefined\" ? Symbol(\"immer-draftable\") : \"__$immer_draftable\";\n\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" ? Symbol(\"immer-state\") : \"__$immer_state\";\n\nfunction isDraft(value) {\n    return !!value && !!value[DRAFT_STATE];\n}\n\nfunction isDraftable(value) {\n    if (!value || (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) !== \"object\") return false;\n    if (Array.isArray(value)) return true;\n    var proto = Object.getPrototypeOf(value);\n    if (!proto || proto === Object.prototype) return true;\n    return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE];\n}\n\nfunction original(value) {\n    if (value && value[DRAFT_STATE]) {\n        return value[DRAFT_STATE].base;\n    }\n    // otherwise return undefined\n}\n\nvar assign = Object.assign || function assign(target, value) {\n    for (var key in value) {\n        if (has(value, key)) {\n            target[key] = value[key];\n        }\n    }\n    return target;\n};\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : Object.getOwnPropertyNames;\n\nfunction shallowCopy(base) {\n    var invokeGetters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (Array.isArray(base)) return base.slice();\n    var clone = Object.create(Object.getPrototypeOf(base));\n    ownKeys(base).forEach(function (key) {\n        if (key === DRAFT_STATE) {\n            return; // Never copy over draft state.\n        }\n        var desc = Object.getOwnPropertyDescriptor(base, key);\n        if (desc.get) {\n            if (!invokeGetters) {\n                throw new Error(\"Immer drafts cannot have computed properties\");\n            }\n            desc.value = desc.get.call(base);\n        }\n        if (desc.enumerable) {\n            clone[key] = desc.value;\n        } else {\n            Object.defineProperty(clone, key, {\n                value: desc.value,\n                writable: true,\n                configurable: true\n            });\n        }\n    });\n    return clone;\n}\n\nfunction each(value, cb) {\n    if (Array.isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n            cb(i, value[i], value);\n        }\n    } else {\n        ownKeys(value).forEach(function (key) {\n            return cb(key, value[key], value);\n        });\n    }\n}\n\nfunction isEnumerable(base, prop) {\n    return Object.getOwnPropertyDescriptor(base, prop).enumerable;\n}\n\nfunction has(thing, prop) {\n    return Object.prototype.hasOwnProperty.call(thing, prop);\n}\n\nfunction is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y;\n    } else {\n        return x !== x && y !== y;\n    }\n}\n\n// @ts-check\n\nvar descriptors = {};\n\n// For nested produce calls:\nvar scopes = [];\nvar currentScope = function currentScope() {\n    return scopes[scopes.length - 1];\n};\n\nfunction willFinalize(result, baseDraft, needPatches) {\n    var scope = currentScope();\n    scope.forEach(function (state) {\n        return state.finalizing = true;\n    });\n    if (result === undefined || result === baseDraft) {\n        if (needPatches) markChangesRecursively(baseDraft);\n        // This is faster when we don't care about which attributes changed.\n        markChangesSweep(scope);\n    }\n}\n\nfunction createDraft(base, parent) {\n    var isArray = Array.isArray(base);\n    var draft = clonePotentialDraft(base);\n    each(draft, function (prop) {\n        proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n    });\n\n    // See \"proxy.js\" for property documentation.\n    var state = {\n        scope: parent ? parent.scope : currentScope(),\n        modified: false,\n        finalizing: false, // es5 only\n        finalized: false,\n        assigned: {},\n        parent: parent,\n        base: base,\n        draft: draft,\n        copy: null,\n        revoke: revoke,\n        revoked: false // es5 only\n    };\n\n    createHiddenProperty(draft, DRAFT_STATE, state);\n    state.scope.push(state);\n    return draft;\n}\n\nfunction revoke() {\n    this.revoked = true;\n}\n\nfunction source(state) {\n    return state.copy || state.base;\n}\n\nfunction _get(state, prop) {\n    assertUnrevoked(state);\n    var value = source(state)[prop];\n    // Drafts are only created for proxyable values that exist in the base state.\n    if (!state.finalizing && value === state.base[prop] && isDraftable(value)) {\n        prepareCopy(state);\n        return state.copy[prop] = createDraft(value, state);\n    }\n    return value;\n}\n\nfunction _set(state, prop, value) {\n    assertUnrevoked(state);\n    state.assigned[prop] = true;\n    if (!state.modified) {\n        if (is(source(state)[prop], value)) return;\n        markChanged(state);\n        prepareCopy(state);\n    }\n    state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true;\n        if (state.parent) markChanged(state.parent);\n    }\n}\n\nfunction prepareCopy(state) {\n    if (!state.copy) state.copy = clonePotentialDraft(state.base);\n}\n\nfunction clonePotentialDraft(base) {\n    var state = base && base[DRAFT_STATE];\n    if (state) {\n        state.finalizing = true;\n        var draft = shallowCopy(state.draft, true);\n        state.finalizing = false;\n        return draft;\n    }\n    return shallowCopy(base);\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n    var desc = descriptors[prop];\n    if (desc) {\n        desc.enumerable = enumerable;\n    } else {\n        descriptors[prop] = desc = {\n            configurable: true,\n            enumerable: enumerable,\n            get: function get$$1() {\n                return _get(this[DRAFT_STATE], prop);\n            },\n            set: function set$$1(value) {\n                _set(this[DRAFT_STATE], prop, value);\n            }\n        };\n    }\n    Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n    if (state.revoked === true) throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(source(state)));\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(scope) {\n    // The natural order of drafts in the `scope` array is based on when they\n    // were accessed. By processing drafts in reverse natural order, we have a\n    // better chance of processing leaf nodes first. When a leaf node is known to\n    // have changed, we can avoid any traversal of its ancestor nodes.\n    for (var i = scope.length - 1; i >= 0; i--) {\n        var state = scope[i];\n        if (state.modified === false) {\n            if (Array.isArray(state.base)) {\n                if (hasArrayChanges(state)) markChanged(state);\n            } else if (hasObjectChanges(state)) markChanged(state);\n        }\n    }\n}\n\nfunction markChangesRecursively(object) {\n    if (!object || (typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) !== \"object\") return;\n    var state = object[DRAFT_STATE];\n    if (!state) return;\n    var base = state.base,\n        draft = state.draft,\n        assigned = state.assigned;\n\n    if (!Array.isArray(object)) {\n        // Look for added keys.\n        Object.keys(draft).forEach(function (key) {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (base[key] === undefined && !has(base, key)) {\n                assigned[key] = true;\n                markChanged(state);\n            } else if (!assigned[key]) {\n                // Only untouched properties trigger recursion.\n                markChangesRecursively(draft[key]);\n            }\n        });\n        // Look for removed keys.\n        Object.keys(base).forEach(function (key) {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (draft[key] === undefined && !has(draft, key)) {\n                assigned[key] = false;\n                markChanged(state);\n            }\n        });\n    } else if (hasArrayChanges(state)) {\n        markChanged(state);\n        assigned.length = true;\n        if (draft.length < base.length) {\n            for (var i = draft.length; i < base.length; i++) {\n                assigned[i] = false;\n            }\n        } else {\n            for (var _i = base.length; _i < draft.length; _i++) {\n                assigned[_i] = true;\n            }\n        }\n        for (var _i2 = 0; _i2 < draft.length; _i2++) {\n            // Only untouched indices trigger recursion.\n            if (assigned[_i2] === undefined) markChangesRecursively(draft[_i2]);\n        }\n    }\n}\n\nfunction hasObjectChanges(state) {\n    var base = state.base,\n        draft = state.draft;\n\n    // Search for added keys. Start at the back, because non-numeric keys\n    // are ordered by time of definition on the object.\n\n    var keys = Object.keys(draft);\n    for (var i = keys.length - 1; i >= 0; i--) {\n        // The `undefined` check is a fast path for pre-existing keys.\n        if (base[keys[i]] === undefined && !has(base, keys[i])) {\n            return true;\n        }\n    }\n\n    // Since no keys have been added, we can compare lengths to know if an\n    // object has been deleted.\n    return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n    var draft = state.draft;\n\n    if (draft.length !== state.base.length) return true;\n    // See #116\n    // If we first shorten the length, our array interceptors will be removed.\n    // If after that new items are added, result in the same original length,\n    // those last items will have no intercepting property.\n    // So if there is no own descriptor on the last position, we know that items were removed and added\n    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n    // the last one\n    var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1);\n    // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n    if (descriptor && !descriptor.get) return true;\n    // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n    return false;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value: value,\n        enumerable: false,\n        writable: true\n    });\n}\n\n\n\nvar legacyProxy = Object.freeze({\n\tscopes: scopes,\n\tcurrentScope: currentScope,\n\twillFinalize: willFinalize,\n\tcreateDraft: createDraft\n});\n\n// @ts-check\n\n// For nested produce calls:\nvar scopes$1 = [];\nvar currentScope$1 = function currentScope() {\n    return scopes$1[scopes$1.length - 1];\n};\n\n// Do nothing before being finalized.\nfunction willFinalize$1() {}\n\nfunction createDraft$1(base, parent) {\n    var state = {\n        // Track which produce call this is associated with.\n        scope: parent ? parent.scope : currentScope$1(),\n        // True for both shallow and deep changes.\n        modified: false,\n        // Used during finalization.\n        finalized: false,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned: {},\n        // The parent draft state.\n        parent: parent,\n        // The base state.\n        base: base,\n        // The base proxy.\n        draft: null,\n        // Any property proxies.\n        drafts: {},\n        // The base copy with any updated values.\n        copy: null,\n        // Called by the `produce` function.\n        revoke: null\n    };\n\n    var _ref = Array.isArray(base) ? Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps),\n        revoke = _ref.revoke,\n        proxy = _ref.proxy;\n\n    state.draft = proxy;\n    state.revoke = revoke;\n\n    state.scope.push(state);\n    return proxy;\n}\n\nvar objectTraps = {\n    get: get$1,\n    has: function has$$1(target, prop) {\n        return prop in source$1(target);\n    },\n    ownKeys: function ownKeys$$1(target) {\n        return Reflect.ownKeys(source$1(target));\n    },\n\n    set: set$1,\n    deleteProperty: deleteProperty,\n    getOwnPropertyDescriptor: getOwnPropertyDescriptor,\n    defineProperty: function defineProperty() {\n        throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n    },\n    getPrototypeOf: function getPrototypeOf(target) {\n        return Object.getPrototypeOf(target.base);\n    },\n    setPrototypeOf: function setPrototypeOf() {\n        throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n    }\n};\n\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n    arrayTraps[key] = function () {\n        arguments[0] = arguments[0][0];\n        return fn.apply(this, arguments);\n    };\n});\narrayTraps.deleteProperty = function (state, prop) {\n    if (isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n    }\n    return objectTraps.deleteProperty.call(this, state[0], prop);\n};\narrayTraps.set = function (state, prop, value) {\n    if (prop !== \"length\" && isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n    }\n    return objectTraps.set.call(this, state[0], prop, value);\n};\n\nfunction source$1(state) {\n    return state.copy || state.base;\n}\n\nfunction get$1(state, prop) {\n    if (prop === DRAFT_STATE) return state;\n    var drafts = state.drafts;\n\n    // Check for existing draft in unmodified state.\n\n    if (!state.modified && has(drafts, prop)) {\n        return drafts[prop];\n    }\n\n    var value = source$1(state)[prop];\n    if (state.finalized || !isDraftable(value)) return value;\n\n    // Check for existing draft in modified state.\n    if (state.modified) {\n        // Assigned values are never drafted. This catches any drafts we created, too.\n        if (value !== state.base[prop]) return value;\n        // Store drafts on the copy (when one exists).\n        drafts = state.copy;\n    }\n\n    return drafts[prop] = createDraft$1(value, state);\n}\n\nfunction set$1(state, prop, value) {\n    if (!state.modified) {\n        // Optimize based on value's truthiness. Truthy values are guaranteed to\n        // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n        // values may be drafts, but falsy values are never drafts.\n        var isUnchanged = value ? is(state.base[prop], value) || value === state.drafts[prop] : is(state.base[prop], value) && prop in state.base;\n        if (isUnchanged) return true;\n        markChanged$1(state);\n    }\n    state.assigned[prop] = true;\n    state.copy[prop] = value;\n    return true;\n}\n\nfunction deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (state.base[prop] !== undefined || prop in state.base) {\n        state.assigned[prop] = false;\n        markChanged$1(state);\n    }\n    if (state.copy) delete state.copy[prop];\n    return true;\n}\n\nfunction getOwnPropertyDescriptor(state, prop) {\n    var owner = source$1(state);\n    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n    if (desc) {\n        desc.writable = true;\n        desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n    }\n    return desc;\n}\n\nfunction markChanged$1(state) {\n    if (!state.modified) {\n        state.modified = true;\n        state.copy = assign(shallowCopy(state.base), state.drafts);\n        state.drafts = null;\n        if (state.parent) markChanged$1(state.parent);\n    }\n}\n\nvar modernProxy = Object.freeze({\n\tscopes: scopes$1,\n\tcurrentScope: currentScope$1,\n\twillFinalize: willFinalize$1,\n\tcreateDraft: createDraft$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n    Array.isArray(state.base) ? generateArrayPatches(state, basePath, patches, inversePatches) : generateObjectPatches(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n    var base = state.base,\n        copy = state.copy,\n        assigned = state.assigned;\n\n    var minLength = Math.min(base.length, copy.length);\n\n    // Look for replaced indices.\n    for (var i = 0; i < minLength; i++) {\n        if (assigned[i] && base[i] !== copy[i]) {\n            var path = basePath.concat(i);\n            patches.push({ op: \"replace\", path: path, value: copy[i] });\n            inversePatches.push({ op: \"replace\", path: path, value: base[i] });\n        }\n    }\n\n    // Did the array expand?\n    if (minLength < copy.length) {\n        for (var _i = minLength; _i < copy.length; _i++) {\n            patches.push({\n                op: \"add\",\n                path: basePath.concat(_i),\n                value: copy[_i]\n            });\n        }\n        inversePatches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: base.length\n        });\n    }\n\n    // ...or did it shrink?\n    else if (minLength < base.length) {\n            patches.push({\n                op: \"replace\",\n                path: basePath.concat(\"length\"),\n                value: copy.length\n            });\n            for (var _i2 = minLength; _i2 < base.length; _i2++) {\n                inversePatches.push({\n                    op: \"add\",\n                    path: basePath.concat(_i2),\n                    value: base[_i2]\n                });\n            }\n        }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n    var base = state.base,\n        copy = state.copy;\n\n    each(state.assigned, function (key, assignedValue) {\n        var origValue = base[key];\n        var value = copy[key];\n        var op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\";\n        if (origValue === value && op === \"replace\") return;\n        var path = basePath.concat(key);\n        patches.push(op === \"remove\" ? { op: op, path: path } : { op: op, path: path, value: value });\n        inversePatches.push(op === \"add\" ? { op: \"remove\", path: path } : op === \"remove\" ? { op: \"add\", path: path, value: origValue } : { op: \"replace\", path: path, value: origValue });\n    });\n}\n\nfunction applyPatches(draft, patches) {\n    for (var i = 0; i < patches.length; i++) {\n        var patch = patches[i];\n        var path = patch.path;\n\n        if (path.length === 0 && patch.op === \"replace\") {\n            draft = patch.value;\n        } else {\n            var base = draft;\n            for (var _i3 = 0; _i3 < path.length - 1; _i3++) {\n                base = base[path[_i3]];\n                if (!base || (typeof base === \"undefined\" ? \"undefined\" : _typeof(base)) !== \"object\") throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")); // prettier-ignore\n            }\n            var key = path[path.length - 1];\n            switch (patch.op) {\n                case \"replace\":\n                case \"add\":\n                    // TODO: add support is not extensive, it does not support insertion or `-` atm!\n                    base[key] = patch.value;\n                    break;\n                case \"remove\":\n                    if (Array.isArray(base)) {\n                        if (key !== base.length - 1) throw new Error(\"Only the last index of an array can be removed, index: \" + key + \", length: \" + base.length); // prettier-ignore\n                        base.length -= 1;\n                    } else {\n                        delete base[key];\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unsupported patch operation: \" + patch.op);\n            }\n        }\n    }\n    return draft;\n}\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n    useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n    autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n    onAssign: null,\n    onDelete: null,\n    onCopy: null\n};\n\nvar Immer = function () {\n    function Immer(config) {\n        classCallCheck(this, Immer);\n\n        assign(this, configDefaults, config);\n        this.setUseProxies(this.useProxies);\n        this.produce = this.produce.bind(this);\n    }\n\n    createClass(Immer, [{\n        key: \"produce\",\n        value: function produce(base, recipe, patchListener) {\n            var _this = this;\n\n            // curried invocation\n            if (typeof base === \"function\" && typeof recipe !== \"function\") {\n                var defaultBase = recipe;\n                recipe = base;\n\n                // prettier-ignore\n                return function () {\n                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                        args[_key - 1] = arguments[_key];\n                    }\n\n                    var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBase;\n                    return _this.produce(base, function (draft) {\n                        var _recipe;\n\n                        return (_recipe = recipe).call.apply(_recipe, [draft, draft].concat(args));\n                    });\n                };\n            }\n\n            // prettier-ignore\n            {\n                if (typeof recipe !== \"function\") throw new Error(\"if first argument is not a function, the second argument to produce should be a function\");\n                if (patchListener !== undefined && typeof patchListener !== \"function\") throw new Error(\"the third argument of a producer should not be set or a function\");\n            }\n\n            var result = void 0;\n            // Only create proxies for plain objects/arrays.\n            if (!isDraftable(base)) {\n                result = recipe(base);\n                if (result === undefined) return base;\n            }\n            // The given value must be proxied.\n            else {\n                    this.scopes.push([]);\n                    var baseDraft = this.createDraft(base);\n                    try {\n                        result = recipe.call(baseDraft, baseDraft);\n                        this.willFinalize(result, baseDraft, !!patchListener);\n\n                        // Never generate patches when no listener exists.\n                        var patches = patchListener && [],\n                            inversePatches = patchListener && [];\n\n                        // Finalize the modified draft...\n                        if (result === undefined || result === baseDraft) {\n                            result = this.finalize(baseDraft, [], patches, inversePatches);\n                        }\n                        // ...or use a replacement value.\n                        else {\n                                // Users must never modify the draft _and_ return something else.\n                                if (baseDraft[DRAFT_STATE].modified) throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n\n                                // Finalize the replacement in case it contains (or is) a subset of the draft.\n                                if (isDraftable(result)) result = this.finalize(result);\n\n                                if (patchListener) {\n                                    patches.push({\n                                        op: \"replace\",\n                                        path: [],\n                                        value: result\n                                    });\n                                    inversePatches.push({\n                                        op: \"replace\",\n                                        path: [],\n                                        value: base\n                                    });\n                                }\n                            }\n                    } finally {\n                        this.currentScope().forEach(function (state) {\n                            return state.revoke();\n                        });\n                        this.scopes.pop();\n                    }\n                    patchListener && patchListener(patches, inversePatches);\n                }\n            // Normalize the result.\n            return result === NOTHING ? undefined : result;\n        }\n    }, {\n        key: \"setAutoFreeze\",\n        value: function setAutoFreeze(value) {\n            this.autoFreeze = value;\n        }\n    }, {\n        key: \"setUseProxies\",\n        value: function setUseProxies(value) {\n            this.useProxies = value;\n            assign(this, value ? modernProxy : legacyProxy);\n        }\n    }, {\n        key: \"applyPatches\",\n        value: function applyPatches$$1(base, patches) {\n            // Mutate the base state when a draft is passed.\n            if (isDraft(base)) {\n                return applyPatches(base, patches);\n            }\n            // Otherwise, produce a copy of the base state.\n            return this.produce(base, function (draft) {\n                return applyPatches(draft, patches);\n            });\n        }\n        /**\n         * @internal\n         * Finalize a draft, returning either the unmodified base state or a modified\n         * copy of the base state.\n         */\n\n    }, {\n        key: \"finalize\",\n        value: function finalize(draft, path, patches, inversePatches) {\n            var _this2 = this;\n\n            var state = draft[DRAFT_STATE];\n            if (!state) {\n                if (Object.isFrozen(draft)) return draft;\n                return this.finalizeTree(draft);\n            }\n            // Never finalize drafts owned by an outer scope.\n            if (state.scope !== this.currentScope()) {\n                return draft;\n            }\n            if (!state.modified) return state.base;\n            if (!state.finalized) {\n                state.finalized = true;\n                this.finalizeTree(state.draft, path, patches, inversePatches);\n                if (this.onDelete) {\n                    // The `assigned` object is unreliable with ES5 drafts.\n                    if (this.useProxies) {\n                        var assigned = state.assigned;\n\n                        for (var prop in assigned) {\n                            if (!assigned[prop]) this.onDelete(state, prop);\n                        }\n                    } else {\n                        var base = state.base,\n                            copy = state.copy;\n\n                        each(base, function (prop) {\n                            if (!has(copy, prop)) _this2.onDelete(state, prop);\n                        });\n                    }\n                }\n                if (this.onCopy) this.onCopy(state);\n\n                // Nested producers must never auto-freeze their result,\n                // because it may contain drafts from parent producers.\n                if (this.autoFreeze && this.scopes.length === 1) {\n                    Object.freeze(state.copy);\n                }\n\n                if (patches) generatePatches(state, path, patches, inversePatches);\n            }\n            return state.copy;\n        }\n        /**\n         * @internal\n         * Finalize all drafts in the given state tree.\n         */\n\n    }, {\n        key: \"finalizeTree\",\n        value: function finalizeTree(root, path, patches, inversePatches) {\n            var _this3 = this;\n\n            var state = root[DRAFT_STATE];\n            if (state) {\n                if (!this.useProxies) {\n                    state.finalizing = true;\n                    state.copy = shallowCopy(state.draft, true);\n                    state.finalizing = false;\n                }\n                root = state.copy;\n            }\n\n            var onAssign = this.onAssign;\n\n            var finalizeProperty = function finalizeProperty(prop, value, parent) {\n                if (value === parent) {\n                    throw Error(\"Immer forbids circular references\");\n                }\n\n                // The only possible draft (in the scope of a `finalizeTree` call) is the `root` object.\n                var inDraft = !!state && parent === root;\n\n                if (isDraft(value)) {\n                    value =\n                    // Patches are never generated for assigned properties.\n                    patches && inDraft && !state.assigned[prop] ? _this3.finalize(value, path.concat(prop), patches, inversePatches) // prettier-ignore\n                    : _this3.finalize(value);\n\n                    // Preserve non-enumerable properties.\n                    if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n                        parent[prop] = value;\n                    } else {\n                        Object.defineProperty(parent, prop, { value: value });\n                    }\n\n                    // Unchanged drafts are never passed to the `onAssign` hook.\n                    if (inDraft && value === state.base[prop]) return;\n                }\n                // Unchanged draft properties are ignored.\n                else if (inDraft && is(value, state.base[prop])) {\n                        return;\n                    }\n                    // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n                    else if (isDraftable(value) && !Object.isFrozen(value)) {\n                            each(value, finalizeProperty);\n                        }\n\n                if (inDraft && onAssign) {\n                    onAssign(state, prop, value);\n                }\n            };\n\n            each(root, finalizeProperty);\n            return root;\n        }\n    }]);\n    return Immer;\n}();\n\nvar immer = new Immer();\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nvar produce = immer.produce;\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nvar setUseProxies = immer.setUseProxies.bind(immer);\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nvar applyPatches$1 = immer.applyPatches.bind(immer);\n\nexport { produce, setAutoFreeze, setUseProxies, applyPatches$1 as applyPatches, Immer, original, isDraft, isDraftable, NOTHING as nothing, DRAFTABLE as immerable };\nexport default produce;\n//# sourceMappingURL=immer.module.js.map\n","import { IAIConfig } from '../index';\nimport { IG, getCards, isAllowedDeck } from './game';\nimport { IGameCtx } from 'boardgame.io/core';\n\ninterface IPlayState {\n  G: IG;\n  ctx: IGameCtx;\n}\n\nexport class TakeSixBot {\n  async play(state: IPlayState, playerID: string) {\n    await sleep(300);\n    if (state.ctx.phase === 'CARD_SELECT') {\n      // const randomCard = Math.floor(state.G.players[playerID as any].cards.length * Math.random());  // https://github.com/babel/minify/issues/904\n      const randomCard = (state.G.players[playerID as any].cards.length * Math.random()) << 0;\n      return this.makeSelectCardMove(randomCard, playerID);\n    } else {\n      const deckId = this.getBestDeck(state.G, playerID);\n      return this.makeSelectDeckMove(deckId, playerID);\n    }\n  }\n\n  getBestDeck(G: IG, playerID: string): number {\n    const { card, lastCards } = getCards(G, playerID);\n    if (card.number < lastCards[0].number) {\n      return G.decks\n        .map((deck, i) => ({ value: deck.reduce((acc, card) => acc + card.value, 0), id: i }), 0)\n        .sort((a, b) => a.value - b.value)[0].id;\n    } else {\n      return G.decks.findIndex((deck, i) => isAllowedDeck(G, i, playerID));\n    }\n  }\n\n  makeSelectCardMove(cardId: number, playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'selectCard', args: [cardId], playerID } } };\n  }\n\n  makeSelectDeckMove(deckId: number, playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'selectDeck', args: [deckId], playerID } } };\n  }\n}\n\nexport const config: IAIConfig = {\n  bgioAI: () => {\n    return TakeSixBot;\n  },\n};\n\nfunction sleep(milliseconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n}\n\nexport default config;\n","import { IGameArgs, IGameCtx, INVALID_MOVE, ActivePlayers } from 'boardgame.io/core';\nimport { IScore } from '../common/Scoreboard';\nimport Card from './card';\nimport Player from './player';\n\nexport interface IG {\n  players: Player[];\n  decks: Card[][];\n  cardOrder: string[];\n  end: boolean;\n}\n\nexport interface IGetCards {\n  card: Card;\n  lastCards: Card[];\n}\n\nfunction sortCards(a: Card, b: Card) {\n  return a.number - b.number;\n}\n\nexport function isAllowedDeck(G: IG, deckId: number, playerID: string): boolean {\n  const { card, lastCards } = getCards(G, playerID);\n  if (card.number < lastCards[0].number) {\n    return true;\n  }\n  const diffs: number[] = G.decks.map((deck) => card.number - deck[deck.length - 1].number);\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  diffs.forEach((diff, index) => {\n    if (diff > 0 && diff < min) {\n      min = diff;\n      minIndex = index;\n    }\n  });\n  return minIndex === deckId;\n}\n\nexport function getCards(G: IG, playerID: string): IGetCards {\n  const lastCards = G.decks.map((deck) => deck[deck.length - 1]).sort(sortCards);\n  const card = G.players[playerID as any].selectedCard;\n  return { card, lastCards: lastCards };\n}\n\nfunction moveToHand(G: IG, ctx: IGameCtx, card: Card, deckId: number): any {\n  return {\n    ...G,\n    players: Object.values({\n      ...G.players,\n      [ctx.playerID]: {\n        ...G.players[ctx.playerID as any],\n        penaltyCards: [...G.players[ctx.playerID as any].penaltyCards, ...G.decks[deckId]],\n      },\n    }),\n    decks: Object.values({\n      ...G.decks,\n      [deckId]: [card],\n    }),\n  };\n}\n\nexport function selectCard(G: IG, ctx: IGameCtx, id: number): any {\n  if (id < 0 || id >= G.players[ctx.playerID as any].cards.length) {\n    return INVALID_MOVE;\n  }\n  return {\n    ...G,\n    players: Object.values({\n      ...G.players,\n      [ctx.playerID]: {\n        ...G.players[ctx.playerID as any],\n        selectedCard: G.players[ctx.playerID as any].cards[id], // Set card as selected\n        cards: G.players[ctx.playerID as any].cards.filter((_, index) => index !== id), // Remove card from player's deck\n      },\n    }),\n  };\n}\n\nexport function getScoreBoard(G: IG): IScore[] {\n  return G.players\n    .map((player, i) => ({\n      playerID: i.toString(),\n      score: player.penaltyCards.reduce((acc, card) => acc + card.value, 0),\n    }))\n    .sort((a, b) => a.score - b.score);\n}\n\nexport function selectDeck(G: IG, ctx: IGameCtx, id: number): any {\n  if (!isAllowedDeck(G, id, ctx.playerID)) {\n    return INVALID_MOVE;\n  }\n  const { card, lastCards } = getCards(G, ctx.playerID);\n\n  // Card is lower than every in deck OR\n  // card is #6 move all cards from deck to player's hand\n  if (card.number < lastCards[0].number || G.decks[id].length === 5) {\n    return moveToHand(G, ctx, card, id);\n  }\n\n  // Append card\n  return {\n    ...G,\n    decks: Object.values({\n      ...G.decks,\n      [id]: [...G.decks[id], card],\n    }),\n  };\n}\n\nconst GameConfig: IGameArgs = {\n  name: 'takesix',\n  phases: {\n    // Everyone needs to select card\n    CARD_SELECT: {\n      moves: { selectCard },\n      next: 'DECK_SELECT',\n      // Determine player order\n      onEnd: (G: IG) => {\n        const selectedCards = G.players.map((player) => player.selectedCard);\n        selectedCards.sort(sortCards);\n        return {\n          ...G,\n          cardOrder: selectedCards.map((card) => card.owner).map((owner) => owner.toString()),\n        };\n      },\n      start: true,\n      turn: {\n        activePlayers: ActivePlayers.ALL_ONCE,\n        onMove: (_, ctx) => {\n          if (ctx.activePlayers === null) {\n            ctx.events.endPhase();\n          }\n        },\n      },\n    },\n    // Select deck\n    DECK_SELECT: {\n      moves: { selectDeck },\n      next: 'CARD_SELECT',\n      onEnd: (G: IG) => {\n        if (G.players[0].cards.length === 0) {\n          G.end = true;\n        }\n      },\n      turn: {\n        moveLimit: 1,\n        order: {\n          playOrder: (G: IG) => G.cardOrder,\n          first: () => 0,\n          next: (_, ctx) => {\n            if (ctx.playOrderPos < ctx.playOrder.length - 1) {\n              return ctx.playOrderPos + 1;\n            }\n          },\n        },\n      },\n    },\n  },\n  endIf: (G: IG) => {\n    if (G.end === true) {\n      const scoreboard = getScoreBoard(G);\n      if (scoreboard[0].score === scoreboard[1].score) {\n        return { draw: true };\n      } else {\n        return { winner: scoreboard[0].playerID.toString() };\n      }\n    }\n  },\n  events: {\n    endTurn: false,\n    endGame: false,\n    endPhase: false,\n  },\n  // playerView: PlayerView.STRIP_SECRETS,\n  setup: (ctx): IG => {\n    // Generate deck\n    const deck = ctx.random.Shuffle(\n      new Array(104).fill(0).map((_, i) => {\n        let value = 1;\n        if ((i + 1) % 55 === 0) {\n          value = 7;\n        } else if ((i + 1) % 11 === 0) {\n          value = 5;\n        } else if ((i + 1) % 10 === 0) {\n          value = 3;\n        } else if ((i + 1) % 5 === 0) {\n          value = 2;\n        }\n        return { number: i + 1, value, owner: null };\n      }),\n    );\n\n    // Set initial state\n    return {\n      decks: new Array(4)\n        .fill(0)\n        .map(() => deck.pop())\n        .sort(sortCards)\n        .map((card) => [card]),\n      players: new Array(ctx.numPlayers).fill(0).map((_, i) => ({\n        cards: new Array(10)\n          .fill(0)\n          .map(() => {\n            const card = deck.pop();\n            card.owner = i;\n            return card;\n          })\n          .sort(sortCards),\n        penaltyCards: [],\n      })),\n      cardOrder: [],\n      end: false,\n    };\n  },\n};\n\nexport const TakeSixGame = GameConfig;\nexport const TakeSixGameForTest = (override: any) => ({\n  ...GameConfig,\n  ...override,\n});\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtxh8BA;AAQA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AACA;AADA;AAAA;AAQA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAtBA;AAAA;AAAA;AAwBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1BA;AAAA;AAAA;AA4BA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9BA;AACA;AADA;AAAA;AAitDA;AACA;AAgBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAIA;AAbA;AAcA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAIA;AAJA;AAOA;AATA;AAcA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAFA;AAIA;AAEA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAFA;AAWA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAFA;AAAA;AAAA;AAOA;AACA;AACA;AATA;AACA;AAOA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AACA;AAVA;AAaA;AAEA;AAFA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAFA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AANA;AAbA;AAsBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAPA;AAFA;AARA;AAzBA;AA+CA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAEA;AAAA;AAAA;AACA;AAXA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAmBA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAEA;AAFA;AAGA;AACA;AAEA;AATA;AAUA;AACA;AACA;AAlBA;AAoBA;AAxGA;AA2GA;;AACA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}