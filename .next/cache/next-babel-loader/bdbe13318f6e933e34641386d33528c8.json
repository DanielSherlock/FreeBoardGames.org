{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction cov_q65kpg81() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/tictactoe/ai.ts\";\n  var hash = \"63b1f20091f6176ced1c1c4d265d21047637270c\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/tictactoe/ai.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 11,\n          column: 17\n        },\n        end: {\n          line: 11,\n          column: 47\n        }\n      },\n      \"1\": {\n        start: {\n          line: 12,\n          column: 4\n        },\n        end: {\n          line: 12,\n          column: 41\n        }\n      },\n      \"2\": {\n        start: {\n          line: 15,\n          column: 29\n        },\n        end: {\n          line: 15,\n          column: 31\n        }\n      },\n      \"3\": {\n        start: {\n          line: 16,\n          column: 18\n        },\n        end: {\n          line: 16,\n          column: 31\n        }\n      },\n      \"4\": {\n        start: {\n          line: 17,\n          column: 4\n        },\n        end: {\n          line: 21,\n          column: 5\n        }\n      },\n      \"5\": {\n        start: {\n          line: 17,\n          column: 17\n        },\n        end: {\n          line: 17,\n          column: 18\n        }\n      },\n      \"6\": {\n        start: {\n          line: 18,\n          column: 6\n        },\n        end: {\n          line: 20,\n          column: 7\n        }\n      },\n      \"7\": {\n        start: {\n          line: 19,\n          column: 8\n        },\n        end: {\n          line: 19,\n          column: 33\n        }\n      },\n      \"8\": {\n        start: {\n          line: 22,\n          column: 22\n        },\n        end: {\n          line: 22,\n          column: 71\n        }\n      },\n      \"9\": {\n        start: {\n          line: 23,\n          column: 17\n        },\n        end: {\n          line: 23,\n          column: 44\n        }\n      },\n      \"10\": {\n        start: {\n          line: 24,\n          column: 4\n        },\n        end: {\n          line: 24,\n          column: 16\n        }\n      },\n      \"11\": {\n        start: {\n          line: 27,\n          column: 4\n        },\n        end: {\n          line: 27,\n          column: 101\n        }\n      },\n      \"12\": {\n        start: {\n          line: 31,\n          column: 4\n        },\n        end: {\n          line: 31,\n          column: 56\n        }\n      },\n      \"13\": {\n        start: {\n          line: 34,\n          column: 26\n        },\n        end: {\n          line: 57,\n          column: 1\n        }\n      },\n      \"14\": {\n        start: {\n          line: 36,\n          column: 4\n        },\n        end: {\n          line: 55,\n          column: 5\n        }\n      },\n      \"15\": {\n        start: {\n          line: 38,\n          column: 6\n        },\n        end: {\n          line: 51,\n          column: 8\n        }\n      },\n      \"16\": {\n        start: {\n          line: 42,\n          column: 26\n        },\n        end: {\n          line: 42,\n          column: 28\n        }\n      },\n      \"17\": {\n        start: {\n          line: 43,\n          column: 12\n        },\n        end: {\n          line: 47,\n          column: 13\n        }\n      },\n      \"18\": {\n        start: {\n          line: 43,\n          column: 25\n        },\n        end: {\n          line: 43,\n          column: 26\n        }\n      },\n      \"19\": {\n        start: {\n          line: 44,\n          column: 14\n        },\n        end: {\n          line: 46,\n          column: 15\n        }\n      },\n      \"20\": {\n        start: {\n          line: 45,\n          column: 16\n        },\n        end: {\n          line: 45,\n          column: 61\n        }\n      },\n      \"21\": {\n        start: {\n          line: 48,\n          column: 12\n        },\n        end: {\n          line: 48,\n          column: 25\n        }\n      },\n      \"22\": {\n        start: {\n          line: 52,\n          column: 11\n        },\n        end: {\n          line: 55,\n          column: 5\n        }\n      },\n      \"23\": {\n        start: {\n          line: 54,\n          column: 6\n        },\n        end: {\n          line: 54,\n          column: 40\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 10,\n            column: 2\n          },\n          end: {\n            line: 10,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 10,\n            column: 50\n          },\n          end: {\n            line: 13,\n            column: 3\n          }\n        },\n        line: 10\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 14,\n            column: 2\n          },\n          end: {\n            line: 14,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 14,\n            column: 40\n          },\n          end: {\n            line: 25,\n            column: 3\n          }\n        },\n        line: 14\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 26,\n            column: 2\n          },\n          end: {\n            line: 26,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 26,\n            column: 43\n          },\n          end: {\n            line: 28,\n            column: 3\n          }\n        },\n        line: 26\n      },\n      \"3\": {\n        name: \"(anonymous_3)\",\n        decl: {\n          start: {\n            line: 29,\n            column: 2\n          },\n          end: {\n            line: 29,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 29,\n            column: 41\n          },\n          end: {\n            line: 32,\n            column: 3\n          }\n        },\n        line: 29\n      },\n      \"4\": {\n        name: \"(anonymous_4)\",\n        decl: {\n          start: {\n            line: 35,\n            column: 10\n          },\n          end: {\n            line: 35,\n            column: 11\n          }\n        },\n        loc: {\n          start: {\n            line: 35,\n            column: 29\n          },\n          end: {\n            line: 56,\n            column: 3\n          }\n        },\n        line: 35\n      },\n      \"5\": {\n        name: \"(anonymous_5)\",\n        decl: {\n          start: {\n            line: 41,\n            column: 21\n          },\n          end: {\n            line: 41,\n            column: 22\n          }\n        },\n        loc: {\n          start: {\n            line: 41,\n            column: 33\n          },\n          end: {\n            line: 49,\n            column: 11\n          }\n        },\n        line: 41\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 18,\n            column: 6\n          },\n          end: {\n            line: 20,\n            column: 7\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 18,\n            column: 6\n          },\n          end: {\n            line: 20,\n            column: 7\n          }\n        }, {\n          start: {\n            line: 18,\n            column: 6\n          },\n          end: {\n            line: 20,\n            column: 7\n          }\n        }],\n        line: 18\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 36,\n            column: 4\n          },\n          end: {\n            line: 55,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 36,\n            column: 4\n          },\n          end: {\n            line: 55,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 36,\n            column: 4\n          },\n          end: {\n            line: 55,\n            column: 5\n          }\n        }],\n        line: 36\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 44,\n            column: 14\n          },\n          end: {\n            line: 46,\n            column: 15\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 44,\n            column: 14\n          },\n          end: {\n            line: 46,\n            column: 15\n          }\n        }, {\n          start: {\n            line: 44,\n            column: 14\n          },\n          end: {\n            line: 46,\n            column: 15\n          }\n        }],\n        line: 44\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 52,\n            column: 11\n          },\n          end: {\n            line: 55,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 52,\n            column: 11\n          },\n          end: {\n            line: 55,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 52,\n            column: 11\n          },\n          end: {\n            line: 55,\n            column: 5\n          }\n        }],\n        line: 52\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0,\n      \"9\": 0,\n      \"10\": 0,\n      \"11\": 0,\n      \"12\": 0,\n      \"13\": 0,\n      \"14\": 0,\n      \"15\": 0,\n      \"16\": 0,\n      \"17\": 0,\n      \"18\": 0,\n      \"19\": 0,\n      \"20\": 0,\n      \"21\": 0,\n      \"22\": 0,\n      \"23\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"63b1f20091f6176ced1c1c4d265d21047637270c\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_q65kpg81 = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_q65kpg81();\nimport { MCTSBot } from 'boardgame.io/ai';\n\nvar TictactoeRandomBot = /*#__PURE__*/function () {\n  function TictactoeRandomBot() {\n    _classCallCheck(this, TictactoeRandomBot);\n  }\n\n  _createClass(TictactoeRandomBot, [{\n    key: \"play\",\n    value: function play(state, playerID) {\n      var cell;\n      return _regeneratorRuntime.async(function play$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cov_q65kpg81().f[0]++;\n              cell = (cov_q65kpg81().s[0]++, this.generateRandomMove(state));\n              cov_q65kpg81().s[1]++;\n              return _context.abrupt(\"return\", this.makeMove(playerID, cell));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"generateRandomMove\",\n    value: function generateRandomMove(state) {\n      cov_q65kpg81().f[1]++;\n      var freeCellsIndexes = (cov_q65kpg81().s[2]++, []);\n      var cells = (cov_q65kpg81().s[3]++, state.G.cells);\n      cov_q65kpg81().s[4]++;\n\n      for (var i = (cov_q65kpg81().s[5]++, 0); i < cells.length; i++) {\n        cov_q65kpg81().s[6]++;\n\n        if (cells[i] === null) {\n          cov_q65kpg81().b[0][0]++;\n          cov_q65kpg81().s[7]++;\n          freeCellsIndexes.push(i);\n        } else {\n          cov_q65kpg81().b[0][1]++;\n        }\n      }\n\n      var randIndex = (cov_q65kpg81().s[8]++, this.randomNumber(0, freeCellsIndexes.length - 1));\n      var cell = (cov_q65kpg81().s[9]++, freeCellsIndexes[randIndex]);\n      cov_q65kpg81().s[10]++;\n      return cell;\n    }\n  }, {\n    key: \"makeMove\",\n    value: function makeMove(playerID, cell) {\n      cov_q65kpg81().f[2]++;\n      cov_q65kpg81().s[11]++;\n      return {\n        action: {\n          type: 'MAKE_MOVE',\n          payload: {\n            type: 'clickCell',\n            args: [cell],\n            playerID: playerID\n          }\n        }\n      };\n    }\n  }, {\n    key: \"randomNumber\",\n    value: function randomNumber(min, max) {\n      cov_q65kpg81().f[3]++;\n      cov_q65kpg81().s[12]++;\n      // return Math.floor(Math.random() * (max - min + 1) + min);  // https://github.com/babel/minify/issues/904\n      return Math.random() * (max - min + 1) + min << 0;\n    }\n  }]);\n\n  return TictactoeRandomBot;\n}();\n\nvar config = (cov_q65kpg81().s[13]++, {\n  bgioAI: function bgioAI(level) {\n    cov_q65kpg81().f[4]++;\n    cov_q65kpg81().s[14]++;\n\n    if (level === '2') {\n      cov_q65kpg81().b[1][0]++;\n      cov_q65kpg81().s[15]++;\n      // Hard\n      return {\n        type: MCTSBot,\n        ai: {\n          enumerate: function enumerate(G) {\n            cov_q65kpg81().f[5]++;\n            var moves = (cov_q65kpg81().s[16]++, []);\n            cov_q65kpg81().s[17]++;\n\n            for (var i = (cov_q65kpg81().s[18]++, 0); i < 9; i++) {\n              cov_q65kpg81().s[19]++;\n\n              if (G.cells[i] === null) {\n                cov_q65kpg81().b[2][0]++;\n                cov_q65kpg81().s[20]++;\n                moves.push({\n                  move: 'clickCell',\n                  args: [i]\n                });\n              } else {\n                cov_q65kpg81().b[2][1]++;\n              }\n            }\n\n            cov_q65kpg81().s[21]++;\n            return moves;\n          }\n        }\n      };\n    } else {\n      cov_q65kpg81().b[1][1]++;\n      cov_q65kpg81().s[22]++;\n\n      if (level === '1') {\n        cov_q65kpg81().b[3][0]++;\n        cov_q65kpg81().s[23]++;\n        // Easy\n        return {\n          ai: TictactoeRandomBot\n        };\n      } else {\n        cov_q65kpg81().b[3][1]++;\n      }\n    }\n  }\n});\nexport default config;","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/tictactoe/ai.ts"],"names":["MCTSBot","TictactoeRandomBot","state","playerID","cell","generateRandomMove","makeMove","freeCellsIndexes","cells","G","i","length","push","randIndex","randomNumber","action","type","payload","args","min","max","Math","random","config","bgioAI","level","ai","enumerate","moves","move"],"mappingswB,iBAAxB;;IAOMC,kB;;;;;;;yBACOC,K,EAAmBC,Q;;;;;;;AACtBC,cAAAA,I,2BAAO,KAAKC,kBAAL,CAAwBH,KAAxB,C;;+CACN,KAAKI,QAAL,CAAcH,QAAd,EAAwBC,IAAxB,C;;;;;;;;;;;uCAEUF,K,EAAmB;AAAA;AACpC,UAAMK,gBAAgB,2BAAG,EAAH,CAAtB;AACA,UAAMC,KAAK,2BAAGN,KAAK,CAACO,CAAN,CAAQD,KAAX,CAAX;AAFoC;;AAGpC,WAAK,IAAIE,CAAC,2BAAG,CAAH,CAAV,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAA;;AACrC,YAAIF,KAAK,CAACE,CAAD,CAAL,KAAa,IAAjB,EAAuB;AAAA;AAAA;AACrBH,UAAAA,gBAAgB,CAACK,IAAjB,CAAsBF,CAAtB;AACD,SAFD;AAAA;AAAA;AAGD;;AACD,UAAMG,SAAS,2BAAG,KAAKC,YAAL,CAAkB,CAAlB,EAAqBP,gBAAgB,CAACI,MAAjB,GAA0B,CAA/C,CAAH,CAAf;AACA,UAAMP,IAAI,2BAAGG,gBAAgB,CAACM,SAAD,CAAnB,CAAV;AAToC;AAUpC,aAAOT,IAAP;AACD;;;6BACQD,Q,EAAkBC,I,EAAc;AAAA;AAAA;AACvC,aAAO;AAAEW,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,WAAR;AAAqBC,UAAAA,OAAO,EAAE;AAAED,YAAAA,IAAI,EAAE,WAAR;AAAqBE,YAAAA,IAAI,EAAE,CAACd,IAAD,CAA3B;AAAmCD,YAAAA,QAAQ,EAARA;AAAnC;AAA9B;AAAV,OAAP;AACD;;;iCACYgB,G,EAAaC,G,EAAa;AAAA;AAAA;AACrC;AACA,aAAQC,IAAI,CAACC,MAAL,MAAiBF,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAAnC,IAA2C,CAAlD;AACD;;;;;;AAEH,IAAMI,MAAiB,4BAAG;AACxBC,EAAAA,MAAM,EAAE,gBAACC,KAAD,EAAmB;AAAA;AAAA;;AACzB,QAAIA,KAAK,KAAK,GAAd,EAAmB;AAAA;AAAA;AACjB;AACA,aAAO;AACLT,QAAAA,IAAI,EAAEhB,OADD;AAEL0B,QAAAA,EAAE,EAAE;AACFC,UAAAA,SAAS,EAAE,mBAAClB,CAAD,EAAY;AAAA;AACrB,gBAAMmB,KAAK,4BAAG,EAAH,CAAX;AADqB;;AAErB,iBAAK,IAAIlB,CAAC,4BAAG,CAAH,CAAV,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAAA;;AAC1B,kBAAID,CAAC,CAACD,KAAF,CAAQE,CAAR,MAAe,IAAnB,EAAyB;AAAA;AAAA;AACvBkB,gBAAAA,KAAK,CAAChB,IAAN,CAAW;AAAEiB,kBAAAA,IAAI,EAAE,WAAR;AAAqBX,kBAAAA,IAAI,EAAE,CAACR,CAAD;AAA3B,iBAAX;AACD,eAFD;AAAA;AAAA;AAGD;;AANoB;AAOrB,mBAAOkB,KAAP;AACD;AATC;AAFC,OAAP;AAcD,KAhBD,MAgBO;AAAA;AAAA;;AAAA,UAAIH,KAAK,KAAK,GAAd,EAAmB;AAAA;AAAA;AACxB;AACA,eAAO;AAAEC,UAAAA,EAAE,EAAEzB;AAAN,SAAP;AACD,OAHM;AAAA;AAAA;AAGN;AACF;AAtBuB,CAAH,CAAvB;AAwBA,eAAesB,MAAf","sourcesContent":["import { IAIConfig } from '../index';\nimport { MCTSBot } from 'boardgame.io/ai';\n\ninterface IPlayState {\n  G: any;\n  ctx: any;\n}\n\nclass TictactoeRandomBot {\n  async play(state: IPlayState, playerID: string) {\n    const cell = this.generateRandomMove(state);\n    return this.makeMove(playerID, cell);\n  }\n  generateRandomMove(state: IPlayState) {\n    const freeCellsIndexes = [];\n    const cells = state.G.cells;\n    for (let i = 0; i < cells.length; i++) {\n      if (cells[i] === null) {\n        freeCellsIndexes.push(i);\n      }\n    }\n    const randIndex = this.randomNumber(0, freeCellsIndexes.length - 1);\n    const cell = freeCellsIndexes[randIndex];\n    return cell;\n  }\n  makeMove(playerID: string, cell: number) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'clickCell', args: [cell], playerID } } };\n  }\n  randomNumber(min: number, max: number) {\n    // return Math.floor(Math.random() * (max - min + 1) + min);  // https://github.com/babel/minify/issues/904\n    return (Math.random() * (max - min + 1) + min) << 0;\n  }\n}\nconst config: IAIConfig = {\n  bgioAI: (level: string) => {\n    if (level === '2') {\n      // Hard\n      return {\n        type: MCTSBot,\n        ai: {\n          enumerate: (G: any) => {\n            const moves = [];\n            for (let i = 0; i < 9; i++) {\n              if (G.cells[i] === null) {\n                moves.push({ move: 'clickCell', args: [i] });\n              }\n            }\n            return moves;\n          },\n        },\n      };\n    } else if (level === '1') {\n      // Easy\n      return { ai: TictactoeRandomBot };\n    }\n  },\n};\nexport default config;\n"]},"metadata":{},"sourceType":"module"}