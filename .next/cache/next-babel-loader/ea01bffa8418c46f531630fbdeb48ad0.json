{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction cov_2ghw71axd9() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/hangman/util.ts\";\n  var hash = \"15c05528ae9f01371b2ffdde1c12c878b17e7f27\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/hangman/util.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 7,\n          column: 2\n        },\n        end: {\n          line: 9,\n          column: 3\n        }\n      },\n      \"1\": {\n        start: {\n          line: 8,\n          column: 4\n        },\n        end: {\n          line: 8,\n          column: 24\n        }\n      },\n      \"2\": {\n        start: {\n          line: 10,\n          column: 2\n        },\n        end: {\n          line: 10,\n          column: 32\n        }\n      },\n      \"3\": {\n        start: {\n          line: 11,\n          column: 2\n        },\n        end: {\n          line: 13,\n          column: 3\n        }\n      },\n      \"4\": {\n        start: {\n          line: 12,\n          column: 4\n        },\n        end: {\n          line: 12,\n          column: 26\n        }\n      },\n      \"5\": {\n        start: {\n          line: 14,\n          column: 2\n        },\n        end: {\n          line: 24,\n          column: 4\n        }\n      },\n      \"6\": {\n        start: {\n          line: 28,\n          column: 2\n        },\n        end: {\n          line: 33,\n          column: 3\n        }\n      },\n      \"7\": {\n        start: {\n          line: 30,\n          column: 6\n        },\n        end: {\n          line: 30,\n          column: 17\n        }\n      },\n      \"8\": {\n        start: {\n          line: 32,\n          column: 6\n        },\n        end: {\n          line: 32,\n          column: 17\n        }\n      },\n      \"9\": {\n        start: {\n          line: 34,\n          column: 2\n        },\n        end: {\n          line: 34,\n          column: 76\n        }\n      },\n      \"10\": {\n        start: {\n          line: 38,\n          column: 18\n        },\n        end: {\n          line: 38,\n          column: 20\n        }\n      },\n      \"11\": {\n        start: {\n          line: 39,\n          column: 2\n        },\n        end: {\n          line: 43,\n          column: 3\n        }\n      },\n      \"12\": {\n        start: {\n          line: 39,\n          column: 15\n        },\n        end: {\n          line: 39,\n          column: 16\n        }\n      },\n      \"13\": {\n        start: {\n          line: 40,\n          column: 4\n        },\n        end: {\n          line: 42,\n          column: 5\n        }\n      },\n      \"14\": {\n        start: {\n          line: 41,\n          column: 6\n        },\n        end: {\n          line: 41,\n          column: 22\n        }\n      },\n      \"15\": {\n        start: {\n          line: 44,\n          column: 2\n        },\n        end: {\n          line: 44,\n          column: 17\n        }\n      },\n      \"16\": {\n        start: {\n          line: 49,\n          column: 17\n        },\n        end: {\n          line: 49,\n          column: 40\n        }\n      },\n      \"17\": {\n        start: {\n          line: 50,\n          column: 2\n        },\n        end: {\n          line: 54,\n          column: 3\n        }\n      },\n      \"18\": {\n        start: {\n          line: 51,\n          column: 4\n        },\n        end: {\n          line: 53,\n          column: 5\n        }\n      },\n      \"19\": {\n        start: {\n          line: 52,\n          column: 6\n        },\n        end: {\n          line: 52,\n          column: 29\n        }\n      },\n      \"20\": {\n        start: {\n          line: 55,\n          column: 2\n        },\n        end: {\n          line: 55,\n          column: 16\n        }\n      },\n      \"21\": {\n        start: {\n          line: 60,\n          column: 14\n        },\n        end: {\n          line: 60,\n          column: 15\n        }\n      },\n      \"22\": {\n        start: {\n          line: 61,\n          column: 2\n        },\n        end: {\n          line: 65,\n          column: 3\n        }\n      },\n      \"23\": {\n        start: {\n          line: 62,\n          column: 4\n        },\n        end: {\n          line: 64,\n          column: 5\n        }\n      },\n      \"24\": {\n        start: {\n          line: 63,\n          column: 6\n        },\n        end: {\n          line: 63,\n          column: 14\n        }\n      },\n      \"25\": {\n        start: {\n          line: 66,\n          column: 2\n        },\n        end: {\n          line: 66,\n          column: 15\n        }\n      },\n      \"26\": {\n        start: {\n          line: 70,\n          column: 14\n        },\n        end: {\n          line: 70,\n          column: 15\n        }\n      },\n      \"27\": {\n        start: {\n          line: 71,\n          column: 2\n        },\n        end: {\n          line: 73,\n          column: 3\n        }\n      },\n      \"28\": {\n        start: {\n          line: 72,\n          column: 4\n        },\n        end: {\n          line: 72,\n          column: 28\n        }\n      },\n      \"29\": {\n        start: {\n          line: 74,\n          column: 2\n        },\n        end: {\n          line: 74,\n          column: 15\n        }\n      },\n      \"30\": {\n        start: {\n          line: 79,\n          column: 2\n        },\n        end: {\n          line: 84,\n          column: 3\n        }\n      },\n      \"31\": {\n        start: {\n          line: 79,\n          column: 15\n        },\n        end: {\n          line: 79,\n          column: 16\n        }\n      },\n      \"32\": {\n        start: {\n          line: 80,\n          column: 19\n        },\n        end: {\n          line: 80,\n          column: 40\n        }\n      },\n      \"33\": {\n        start: {\n          line: 81,\n          column: 4\n        },\n        end: {\n          line: 83,\n          column: 5\n        }\n      },\n      \"34\": {\n        start: {\n          line: 82,\n          column: 6\n        },\n        end: {\n          line: 82,\n          column: 19\n        }\n      },\n      \"35\": {\n        start: {\n          line: 85,\n          column: 2\n        },\n        end: {\n          line: 85,\n          column: 14\n        }\n      },\n      \"36\": {\n        start: {\n          line: 90,\n          column: 17\n        },\n        end: {\n          line: 90,\n          column: 40\n        }\n      },\n      \"37\": {\n        start: {\n          line: 91,\n          column: 2\n        },\n        end: {\n          line: 93,\n          column: 3\n        }\n      },\n      \"38\": {\n        start: {\n          line: 92,\n          column: 4\n        },\n        end: {\n          line: 92,\n          column: 24\n        }\n      },\n      \"39\": {\n        start: {\n          line: 94,\n          column: 2\n        },\n        end: {\n          line: 94,\n          column: 32\n        }\n      },\n      \"40\": {\n        start: {\n          line: 95,\n          column: 19\n        },\n        end: {\n          line: 95,\n          column: 55\n        }\n      },\n      \"41\": {\n        start: {\n          line: 96,\n          column: 17\n        },\n        end: {\n          line: 96,\n          column: 56\n        }\n      },\n      \"42\": {\n        start: {\n          line: 97,\n          column: 2\n        },\n        end: {\n          line: 97,\n          column: 34\n        }\n      },\n      \"43\": {\n        start: {\n          line: 98,\n          column: 2\n        },\n        end: {\n          line: 102,\n          column: 3\n        }\n      },\n      \"44\": {\n        start: {\n          line: 99,\n          column: 4\n        },\n        end: {\n          line: 99,\n          column: 25\n        }\n      },\n      \"45\": {\n        start: {\n          line: 100,\n          column: 9\n        },\n        end: {\n          line: 102,\n          column: 3\n        }\n      },\n      \"46\": {\n        start: {\n          line: 101,\n          column: 4\n        },\n        end: {\n          line: 101,\n          column: 39\n        }\n      },\n      \"47\": {\n        start: {\n          line: 103,\n          column: 2\n        },\n        end: {\n          line: 103,\n          column: 11\n        }\n      },\n      \"48\": {\n        start: {\n          line: 108,\n          column: 2\n        },\n        end: {\n          line: 114,\n          column: 3\n        }\n      },\n      \"49\": {\n        start: {\n          line: 109,\n          column: 19\n        },\n        end: {\n          line: 109,\n          column: 38\n        }\n      },\n      \"50\": {\n        start: {\n          line: 110,\n          column: 21\n        },\n        end: {\n          line: 110,\n          column: 53\n        }\n      },\n      \"51\": {\n        start: {\n          line: 111,\n          column: 4\n        },\n        end: {\n          line: 113,\n          column: 5\n        }\n      },\n      \"52\": {\n        start: {\n          line: 112,\n          column: 6\n        },\n        end: {\n          line: 112,\n          column: 34\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"setSecret\",\n        decl: {\n          start: {\n            line: 6,\n            column: 16\n          },\n          end: {\n            line: 6,\n            column: 25\n          }\n        },\n        loc: {\n          start: {\n            line: 6,\n            column: 89\n          },\n          end: {\n            line: 25,\n            column: 1\n          }\n        },\n        line: 6\n      },\n      \"1\": {\n        name: \"getOpponent\",\n        decl: {\n          start: {\n            line: 27,\n            column: 16\n          },\n          end: {\n            line: 27,\n            column: 27\n          }\n        },\n        loc: {\n          start: {\n            line: 27,\n            column: 46\n          },\n          end: {\n            line: 35,\n            column: 1\n          }\n        },\n        line: 27\n      },\n      \"2\": {\n        name: \"getWordIndexes\",\n        decl: {\n          start: {\n            line: 37,\n            column: 9\n          },\n          end: {\n            line: 37,\n            column: 23\n          }\n        },\n        loc: {\n          start: {\n            line: 37,\n            column: 64\n          },\n          end: {\n            line: 45,\n            column: 1\n          }\n        },\n        line: 37\n      },\n      \"3\": {\n        name: \"getMaskedWord\",\n        decl: {\n          start: {\n            line: 48,\n            column: 16\n          },\n          end: {\n            line: 48,\n            column: 29\n          }\n        },\n        loc: {\n          start: {\n            line: 48,\n            column: 94\n          },\n          end: {\n            line: 56,\n            column: 1\n          }\n        },\n        line: 48\n      },\n      \"4\": {\n        name: \"getMistakeCount\",\n        decl: {\n          start: {\n            line: 59,\n            column: 16\n          },\n          end: {\n            line: 59,\n            column: 31\n          }\n        },\n        loc: {\n          start: {\n            line: 59,\n            column: 50\n          },\n          end: {\n            line: 67,\n            column: 1\n          }\n        },\n        line: 59\n      },\n      \"5\": {\n        name: \"getCorrectLettersCount\",\n        decl: {\n          start: {\n            line: 69,\n            column: 9\n          },\n          end: {\n            line: 69,\n            column: 31\n          }\n        },\n        loc: {\n          start: {\n            line: 69,\n            column: 50\n          },\n          end: {\n            line: 75,\n            column: 1\n          }\n        },\n        line: 69\n      },\n      \"6\": {\n        name: \"isValidWord\",\n        decl: {\n          start: {\n            line: 78,\n            column: 16\n          },\n          end: {\n            line: 78,\n            column: 27\n          }\n        },\n        loc: {\n          start: {\n            line: 78,\n            column: 42\n          },\n          end: {\n            line: 86,\n            column: 1\n          }\n        },\n        line: 78\n      },\n      \"7\": {\n        name: \"selectLetter\",\n        decl: {\n          start: {\n            line: 89,\n            column: 16\n          },\n          end: {\n            line: 89,\n            column: 28\n          }\n        },\n        loc: {\n          start: {\n            line: 89,\n            column: 77\n          },\n          end: {\n            line: 104,\n            column: 1\n          }\n        },\n        line: 89\n      },\n      \"8\": {\n        name: \"getWinner\",\n        decl: {\n          start: {\n            line: 107,\n            column: 16\n          },\n          end: {\n            line: 107,\n            column: 25\n          }\n        },\n        loc: {\n          start: {\n            line: 107,\n            column: 43\n          },\n          end: {\n            line: 115,\n            column: 1\n          }\n        },\n        line: 107\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 7,\n            column: 2\n          },\n          end: {\n            line: 9,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 7,\n            column: 2\n          },\n          end: {\n            line: 9,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 7,\n            column: 2\n          },\n          end: {\n            line: 9,\n            column: 3\n          }\n        }],\n        line: 7\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 7,\n            column: 6\n          },\n          end: {\n            line: 7,\n            column: 59\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 7,\n            column: 6\n          },\n          end: {\n            line: 7,\n            column: 24\n          }\n        }, {\n          start: {\n            line: 7,\n            column: 28\n          },\n          end: {\n            line: 7,\n            column: 59\n          }\n        }],\n        line: 7\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 11,\n            column: 2\n          },\n          end: {\n            line: 13,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 11,\n            column: 2\n          },\n          end: {\n            line: 13,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 11,\n            column: 2\n          },\n          end: {\n            line: 13,\n            column: 3\n          }\n        }],\n        line: 11\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 28,\n            column: 2\n          },\n          end: {\n            line: 33,\n            column: 3\n          }\n        },\n        type: \"switch\",\n        locations: [{\n          start: {\n            line: 29,\n            column: 4\n          },\n          end: {\n            line: 30,\n            column: 17\n          }\n        }, {\n          start: {\n            line: 31,\n            column: 4\n          },\n          end: {\n            line: 32,\n            column: 17\n          }\n        }],\n        line: 28\n      },\n      \"4\": {\n        loc: {\n          start: {\n            line: 40,\n            column: 4\n          },\n          end: {\n            line: 42,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 40,\n            column: 4\n          },\n          end: {\n            line: 42,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 40,\n            column: 4\n          },\n          end: {\n            line: 42,\n            column: 5\n          }\n        }],\n        line: 40\n      },\n      \"5\": {\n        loc: {\n          start: {\n            line: 62,\n            column: 4\n          },\n          end: {\n            line: 64,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 62,\n            column: 4\n          },\n          end: {\n            line: 64,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 62,\n            column: 4\n          },\n          end: {\n            line: 64,\n            column: 5\n          }\n        }],\n        line: 62\n      },\n      \"6\": {\n        loc: {\n          start: {\n            line: 81,\n            column: 4\n          },\n          end: {\n            line: 83,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 81,\n            column: 4\n          },\n          end: {\n            line: 83,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 81,\n            column: 4\n          },\n          end: {\n            line: 83,\n            column: 5\n          }\n        }],\n        line: 81\n      },\n      \"7\": {\n        loc: {\n          start: {\n            line: 91,\n            column: 2\n          },\n          end: {\n            line: 93,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 91,\n            column: 2\n          },\n          end: {\n            line: 93,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 91,\n            column: 2\n          },\n          end: {\n            line: 93,\n            column: 3\n          }\n        }],\n        line: 91\n      },\n      \"8\": {\n        loc: {\n          start: {\n            line: 91,\n            column: 6\n          },\n          end: {\n            line: 91,\n            column: 52\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 91,\n            column: 6\n          },\n          end: {\n            line: 91,\n            column: 24\n          }\n        }, {\n          start: {\n            line: 91,\n            column: 28\n          },\n          end: {\n            line: 91,\n            column: 52\n          }\n        }],\n        line: 91\n      },\n      \"9\": {\n        loc: {\n          start: {\n            line: 98,\n            column: 2\n          },\n          end: {\n            line: 102,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 98,\n            column: 2\n          },\n          end: {\n            line: 102,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 98,\n            column: 2\n          },\n          end: {\n            line: 102,\n            column: 3\n          }\n        }],\n        line: 98\n      },\n      \"10\": {\n        loc: {\n          start: {\n            line: 98,\n            column: 6\n          },\n          end: {\n            line: 98,\n            column: 81\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 98,\n            column: 6\n          },\n          end: {\n            line: 98,\n            column: 24\n          }\n        }, {\n          start: {\n            line: 98,\n            column: 28\n          },\n          end: {\n            line: 98,\n            column: 81\n          }\n        }],\n        line: 98\n      },\n      \"11\": {\n        loc: {\n          start: {\n            line: 100,\n            column: 9\n          },\n          end: {\n            line: 102,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 100,\n            column: 9\n          },\n          end: {\n            line: 102,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 100,\n            column: 9\n          },\n          end: {\n            line: 102,\n            column: 3\n          }\n        }],\n        line: 100\n      },\n      \"12\": {\n        loc: {\n          start: {\n            line: 111,\n            column: 4\n          },\n          end: {\n            line: 113,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 111,\n            column: 4\n          },\n          end: {\n            line: 113,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 111,\n            column: 4\n          },\n          end: {\n            line: 113,\n            column: 5\n          }\n        }],\n        line: 111\n      },\n      \"13\": {\n        loc: {\n          start: {\n            line: 111,\n            column: 8\n          },\n          end: {\n            line: 111,\n            column: 94\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 111,\n            column: 8\n          },\n          end: {\n            line: 111,\n            column: 14\n          }\n        }, {\n          start: {\n            line: 111,\n            column: 18\n          },\n          end: {\n            line: 111,\n            column: 26\n          }\n        }, {\n          start: {\n            line: 111,\n            column: 30\n          },\n          end: {\n            line: 111,\n            column: 94\n          }\n        }],\n        line: 111\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0,\n      \"9\": 0,\n      \"10\": 0,\n      \"11\": 0,\n      \"12\": 0,\n      \"13\": 0,\n      \"14\": 0,\n      \"15\": 0,\n      \"16\": 0,\n      \"17\": 0,\n      \"18\": 0,\n      \"19\": 0,\n      \"20\": 0,\n      \"21\": 0,\n      \"22\": 0,\n      \"23\": 0,\n      \"24\": 0,\n      \"25\": 0,\n      \"26\": 0,\n      \"27\": 0,\n      \"28\": 0,\n      \"29\": 0,\n      \"30\": 0,\n      \"31\": 0,\n      \"32\": 0,\n      \"33\": 0,\n      \"34\": 0,\n      \"35\": 0,\n      \"36\": 0,\n      \"37\": 0,\n      \"38\": 0,\n      \"39\": 0,\n      \"40\": 0,\n      \"41\": 0,\n      \"42\": 0,\n      \"43\": 0,\n      \"44\": 0,\n      \"45\": 0,\n      \"46\": 0,\n      \"47\": 0,\n      \"48\": 0,\n      \"49\": 0,\n      \"50\": 0,\n      \"51\": 0,\n      \"52\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0],\n      \"4\": [0, 0],\n      \"5\": [0, 0],\n      \"6\": [0, 0],\n      \"7\": [0, 0],\n      \"8\": [0, 0],\n      \"9\": [0, 0],\n      \"10\": [0, 0],\n      \"11\": [0, 0],\n      \"12\": [0, 0],\n      \"13\": [0, 0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"15c05528ae9f01371b2ffdde1c12c878b17e7f27\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_2ghw71axd9 = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_2ghw71axd9();\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INVALID_MOVE } from 'boardgame.io/core';\nimport { MAX_WORD_LENGTH, MAX_MISTAKE_COUNT, ALPHABET } from './constants';\n/** Called when users selects the initial word and (possibly) hint. */\n\nexport function setSecret(G, ctx, secret, hint) {\n  cov_2ghw71axd9().f[0]++;\n  cov_2ghw71axd9().s[0]++;\n\n  if ((cov_2ghw71axd9().b[1][0]++, secret.length == 0) || (cov_2ghw71axd9().b[1][1]++, secret.length > MAX_WORD_LENGTH)) {\n    cov_2ghw71axd9().b[0][0]++;\n    cov_2ghw71axd9().s[1]++;\n    return INVALID_MOVE;\n  } else {\n    cov_2ghw71axd9().b[0][1]++;\n  }\n\n  cov_2ghw71axd9().s[2]++;\n  secret = secret.toLowerCase();\n  cov_2ghw71axd9().s[3]++;\n\n  if (ctx.currentPlayer == '1') {\n    cov_2ghw71axd9().b[2][0]++;\n    cov_2ghw71axd9().s[4]++;\n    ctx.events.endPhase();\n  } else {\n    cov_2ghw71axd9().b[2][1]++;\n  }\n\n  cov_2ghw71axd9().s[5]++;\n  return {\n    players: _objectSpread({}, G.players, _defineProperty({}, ctx.playerID, {\n      secret: secret,\n      secretLength: secret.length,\n      hint: hint,\n      guesses: {}\n    }))\n  };\n}\nexport function getOpponent(playerID) {\n  cov_2ghw71axd9().f[1]++;\n  cov_2ghw71axd9().s[6]++;\n\n  switch (playerID) {\n    case '0':\n      cov_2ghw71axd9().b[3][0]++;\n      cov_2ghw71axd9().s[7]++;\n      return '1';\n\n    case '1':\n      cov_2ghw71axd9().b[3][1]++;\n      cov_2ghw71axd9().s[8]++;\n      return '0';\n  }\n\n  cov_2ghw71axd9().s[9]++;\n  throw new Error(\"Invalid playerID provided to getOpponnent: \".concat(playerID));\n}\n\nfunction getWordIndexes(word, letter) {\n  cov_2ghw71axd9().f[2]++;\n  var indexes = (cov_2ghw71axd9().s[10]++, []);\n  cov_2ghw71axd9().s[11]++;\n\n  for (var i = (cov_2ghw71axd9().s[12]++, 0); i < word.length; i++) {\n    cov_2ghw71axd9().s[13]++;\n\n    if (word[i] === letter) {\n      cov_2ghw71axd9().b[4][0]++;\n      cov_2ghw71axd9().s[14]++;\n      indexes.push(i);\n    } else {\n      cov_2ghw71axd9().b[4][1]++;\n    }\n  }\n\n  cov_2ghw71axd9().s[15]++;\n  return indexes;\n}\n/** Gets array representing masked word. */\n\n\nexport function getMaskedWord(guesses, secretLength) {\n  cov_2ghw71axd9().f[3]++;\n  var result = (cov_2ghw71axd9().s[16]++, new Array(secretLength));\n  cov_2ghw71axd9().s[17]++;\n\n  for (var _i = 0, _Object$entries = Object.entries(guesses); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        letter = _Object$entries$_i[0],\n        guessResult = _Object$entries$_i[1];\n\n    cov_2ghw71axd9().s[18]++;\n\n    var _iterator = _createForOfIteratorHelper(guessResult),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var index = _step.value;\n        cov_2ghw71axd9().s[19]++;\n        result[index] = letter;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  cov_2ghw71axd9().s[20]++;\n  return result;\n}\n/** Gets count of mistakes made in a set of guesses. */\n\nexport function getMistakeCount(guesses) {\n  cov_2ghw71axd9().f[4]++;\n  var count = (cov_2ghw71axd9().s[21]++, 0);\n  cov_2ghw71axd9().s[22]++;\n\n  for (var _i2 = 0, _Object$values = Object.values(guesses); _i2 < _Object$values.length; _i2++) {\n    var indexes = _Object$values[_i2];\n    cov_2ghw71axd9().s[23]++;\n\n    if (indexes.length === 0) {\n      cov_2ghw71axd9().b[5][0]++;\n      cov_2ghw71axd9().s[24]++;\n      count++;\n    } else {\n      cov_2ghw71axd9().b[5][1]++;\n    }\n  }\n\n  cov_2ghw71axd9().s[25]++;\n  return count;\n}\n\nfunction getCorrectLettersCount(guesses) {\n  cov_2ghw71axd9().f[5]++;\n  var count = (cov_2ghw71axd9().s[26]++, 0);\n  cov_2ghw71axd9().s[27]++;\n\n  for (var _i3 = 0, _Object$values2 = Object.values(guesses); _i3 < _Object$values2.length; _i3++) {\n    var indexes = _Object$values2[_i3];\n    cov_2ghw71axd9().s[28]++;\n    count += indexes.length;\n  }\n\n  cov_2ghw71axd9().s[29]++;\n  return count;\n}\n/** Valides if all characters on this word is valid. */\n\n\nexport function isValidWord(word) {\n  cov_2ghw71axd9().f[6]++;\n  cov_2ghw71axd9().s[30]++;\n\n  for (var i = (cov_2ghw71axd9().s[31]++, 0); i < word.length; i++) {\n    var letter = (cov_2ghw71axd9().s[32]++, word[i].toLowerCase());\n    cov_2ghw71axd9().s[33]++;\n\n    if (!ALPHABET.includes(letter)) {\n      cov_2ghw71axd9().b[6][0]++;\n      cov_2ghw71axd9().s[34]++;\n      return false;\n    } else {\n      cov_2ghw71axd9().b[6][1]++;\n    }\n  }\n\n  cov_2ghw71axd9().s[35]++;\n  return true;\n}\n/** Called when users selects letter. */\n\nexport function selectLetter(G, ctx, letter) {\n  cov_2ghw71axd9().f[7]++;\n  var player = (cov_2ghw71axd9().s[36]++, G.players[ctx.playerID]);\n  cov_2ghw71axd9().s[37]++;\n\n  if ((cov_2ghw71axd9().b[8][0]++, letter.length != 1) || (cov_2ghw71axd9().b[8][1]++, letter in player.guesses)) {\n    cov_2ghw71axd9().b[7][0]++;\n    cov_2ghw71axd9().s[38]++;\n    return INVALID_MOVE;\n  } else {\n    cov_2ghw71axd9().b[7][1]++;\n  }\n\n  cov_2ghw71axd9().s[39]++;\n  letter = letter.toLowerCase();\n  var opponent = (cov_2ghw71axd9().s[40]++, G.players[getOpponent(ctx.playerID)]);\n  var result = (cov_2ghw71axd9().s[41]++, getWordIndexes(opponent.secret, letter));\n  cov_2ghw71axd9().s[42]++;\n  player.guesses[letter] = result;\n  cov_2ghw71axd9().s[43]++;\n\n  if ((cov_2ghw71axd9().b[10][0]++, result.length == 0) && (cov_2ghw71axd9().b[10][1]++, getMistakeCount(opponent.guesses) < MAX_MISTAKE_COUNT)) {\n    cov_2ghw71axd9().b[9][0]++;\n    cov_2ghw71axd9().s[44]++;\n    ctx.events.endTurn();\n  } else {\n    cov_2ghw71axd9().b[9][1]++;\n    cov_2ghw71axd9().s[45]++;\n\n    if (getMistakeCount(player.guesses) >= MAX_MISTAKE_COUNT) {\n      cov_2ghw71axd9().b[11][0]++;\n      cov_2ghw71axd9().s[46]++;\n      ctx.events.endGame({\n        draw: true\n      });\n    } else {\n      cov_2ghw71axd9().b[11][1]++;\n    }\n  }\n\n  cov_2ghw71axd9().s[47]++;\n  return G;\n}\n/** Returns the winner, if any. */\n\nexport function getWinner(G) {\n  cov_2ghw71axd9().f[8]++;\n  cov_2ghw71axd9().s[48]++;\n\n  for (var _i4 = 0, _arr = ['0', '1']; _i4 < _arr.length; _i4++) {\n    var playerID = _arr[_i4];\n    var player = (cov_2ghw71axd9().s[49]++, G.players[playerID]);\n    var opponent = (cov_2ghw71axd9().s[50]++, G.players[getOpponent(playerID)]);\n    cov_2ghw71axd9().s[51]++;\n\n    if ((cov_2ghw71axd9().b[13][0]++, player) && (cov_2ghw71axd9().b[13][1]++, opponent) && (cov_2ghw71axd9().b[13][2]++, getCorrectLettersCount(player.guesses) === opponent.secretLength)) {\n      cov_2ghw71axd9().b[12][0]++;\n      cov_2ghw71axd9().s[52]++;\n      return {\n        winner: playerID\n      };\n    } else {\n      cov_2ghw71axd9().b[12][1]++;\n    }\n  }\n}","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/hangman/util.ts"],"names":["INVALID_MOVE","MAX_WORD_LENGTH","MAX_MISTAKE_COUNT","ALPHABET","setSecret","G","ctx","secret","hint","length","toLowerCase","currentPlayer","events","endPhase","players","playerID","secretLength","guesses","getOpponent","Error","getWordIndexes","word","letter","indexes","i","push","getMaskedWord","result","Array","Object","entries","guessResult","index","getMistakeCount","count","values","getCorrectLettersCount","isValidWord","includes","selectLetter","player","opponent","endTurn","endGame","draw","getWinner","winner"],"mappingsmBA,YAAnB,QAAuC,mBAAvC;AACA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,QAA7C,QAA6D,aAA7D;AAEA;;AACA,OAAO,SAASC,SAAT,CAAmBC,CAAnB,EAAoCC,GAApC,EAAmDC,MAAnD,EAAmEC,IAAnE,EAAkF;AAAA;AAAA;;AACvF,MAAI,6BAAAD,MAAM,CAACE,MAAP,IAAiB,CAAjB,kCAAsBF,MAAM,CAACE,MAAP,GAAgBR,eAAtC,CAAJ,EAA2D;AAAA;AAAA;AACzD,WAAOD,YAAP;AACD,GAFD;AAAA;AAAA;;AADuF;AAIvFO,EAAAA,MAAM,GAAGA,MAAM,CAACG,WAAP,EAAT;AAJuF;;AAKvF,MAAIJ,GAAG,CAACK,aAAJ,IAAqB,GAAzB,EAA8B;AAAA;AAAA;AAC5BL,IAAAA,GAAG,CAACM,MAAJ,CAAWC,QAAX;AACD,GAFD;AAAA;AAAA;;AALuF;AAQvF,SAAO;AACLC,IAAAA,OAAO,oBACFT,CAAC,CAACS,OADA,sBAEJR,GAAG,CAACS,QAFA,EAEW;AACdR,MAAAA,MAAM,EAANA,MADc;AAEdS,MAAAA,YAAY,EAAET,MAAM,CAACE,MAFP;AAGdD,MAAAA,IAAI,EAAJA,IAHc;AAIdS,MAAAA,OAAO,EAAE;AAJK,KAFX;AADF,GAAP;AAWD;AAED,OAAO,SAASC,WAAT,CAAqBH,QAArB,EAAuC;AAAA;AAAA;;AAC5C,UAAQA,QAAR;AACE,SAAK,GAAL;AAAA;AAAA;AACE,aAAO,GAAP;;AACF,SAAK,GAAL;AAAA;AAAA;AACE,aAAO,GAAP;AAJJ;;AAD4C;AAO5C,QAAM,IAAII,KAAJ,sDAAwDJ,QAAxD,EAAN;AACD;;AAED,SAASK,cAAT,CAAwBC,IAAxB,EAAsCC,MAAtC,EAAgE;AAAA;AAC9D,MAAMC,OAAO,8BAAG,EAAH,CAAb;AAD8D;;AAE9D,OAAK,IAAIC,CAAC,8BAAG,CAAH,CAAV,EAAgBA,CAAC,GAAGH,IAAI,CAACZ,MAAzB,EAAiCe,CAAC,EAAlC,EAAsC;AAAA;;AACpC,QAAIH,IAAI,CAACG,CAAD,CAAJ,KAAYF,MAAhB,EAAwB;AAAA;AAAA;AACtBC,MAAAA,OAAO,CAACE,IAAR,CAAaD,CAAb;AACD,KAFD;AAAA;AAAA;AAGD;;AAN6D;AAO9D,SAAOD,OAAP;AACD;AAED;;;AACA,OAAO,SAASG,aAAT,CAAuBT,OAAvB,EAAyCD,YAAzC,EAAuF;AAAA;AAC5F,MAAMW,MAAM,8BAAG,IAAIC,KAAJ,CAAUZ,YAAV,CAAH,CAAZ;AAD4F;;AAE5F,qCAAoCa,MAAM,CAACC,OAAP,CAAeb,OAAf,CAApC,qCAA6D;AAAA;AAAA,QAAjDK,MAAiD;AAAA,QAAzCS,WAAyC;;AAAA;;AAAA,+CACvCA,WADuC;AAAA;;AAAA;AAC3D,0DAAiC;AAAA,YAAtBC,KAAsB;AAAA;AAC/BL,QAAAA,MAAM,CAACK,KAAD,CAAN,GAAgBV,MAAhB;AACD;AAH0D;AAAA;AAAA;AAAA;AAAA;AAI5D;;AAN2F;AAO5F,SAAOK,MAAP;AACD;AAED;;AACA,OAAO,SAASM,eAAT,CAAyBhB,OAAzB,EAA2C;AAAA;AAChD,MAAIiB,KAAK,8BAAG,CAAH,CAAT;AADgD;;AAEhD,qCAAsBL,MAAM,CAACM,MAAP,CAAclB,OAAd,CAAtB,sCAA8C;AAAzC,QAAMM,OAAO,sBAAb;AAAyC;;AAC5C,QAAIA,OAAO,CAACd,MAAR,KAAmB,CAAvB,EAA0B;AAAA;AAAA;AACxByB,MAAAA,KAAK;AACN,KAFD;AAAA;AAAA;AAGD;;AAN+C;AAOhD,SAAOA,KAAP;AACD;;AAED,SAASE,sBAAT,CAAgCnB,OAAhC,EAAkD;AAAA;AAChD,MAAIiB,KAAK,8BAAG,CAAH,CAAT;AADgD;;AAEhD,sCAAsBL,MAAM,CAACM,MAAP,CAAclB,OAAd,CAAtB,uCAA8C;AAAzC,QAAMM,OAAO,uBAAb;AAAyC;AAC5CW,IAAAA,KAAK,IAAIX,OAAO,CAACd,MAAjB;AACD;;AAJ+C;AAKhD,SAAOyB,KAAP;AACD;AAED;;;AACA,OAAO,SAASG,WAAT,CAAqBhB,IAArB,EAAmC;AAAA;AAAA;;AACxC,OAAK,IAAIG,CAAC,8BAAG,CAAH,CAAV,EAAgBA,CAAC,GAAGH,IAAI,CAACZ,MAAzB,EAAiCe,CAAC,EAAlC,EAAsC;AACpC,QAAMF,MAAM,8BAAGD,IAAI,CAACG,CAAD,CAAJ,CAAQd,WAAR,EAAH,CAAZ;AADoC;;AAEpC,QAAI,CAACP,QAAQ,CAACmC,QAAT,CAAkBhB,MAAlB,CAAL,EAAgC;AAAA;AAAA;AAC9B,aAAO,KAAP;AACD,KAFD;AAAA;AAAA;AAGD;;AANuC;AAOxC,SAAO,IAAP;AACD;AAED;;AACA,OAAO,SAASiB,YAAT,CAAsBlC,CAAtB,EAAuCC,GAAvC,EAAsDgB,MAAtD,EAAsE;AAAA;AAC3E,MAAMkB,MAAM,8BAAGnC,CAAC,CAACS,OAAF,CAAUR,GAAG,CAACS,QAAd,CAAH,CAAZ;AAD2E;;AAE3E,MAAI,6BAAAO,MAAM,CAACb,MAAP,IAAiB,CAAjB,kCAAsBa,MAAM,IAAIkB,MAAM,CAACvB,OAAvC,CAAJ,EAAoD;AAAA;AAAA;AAClD,WAAOjB,YAAP;AACD,GAFD;AAAA;AAAA;;AAF2E;AAK3EsB,EAAAA,MAAM,GAAGA,MAAM,CAACZ,WAAP,EAAT;AACA,MAAM+B,QAAQ,8BAAGpC,CAAC,CAACS,OAAF,CAAUI,WAAW,CAACZ,GAAG,CAACS,QAAL,CAArB,CAAH,CAAd;AACA,MAAMY,MAAM,8BAAGP,cAAc,CAACqB,QAAQ,CAAClC,MAAV,EAAkBe,MAAlB,CAAjB,CAAZ;AAP2E;AAQ3EkB,EAAAA,MAAM,CAACvB,OAAP,CAAeK,MAAf,IAAyBK,MAAzB;AAR2E;;AAS3E,MAAI,8BAAAA,MAAM,CAAClB,MAAP,IAAiB,CAAjB,mCAAsBwB,eAAe,CAACQ,QAAQ,CAACxB,OAAV,CAAf,GAAoCf,iBAA1D,CAAJ,EAAiF;AAAA;AAAA;AAC/EI,IAAAA,GAAG,CAACM,MAAJ,CAAW8B,OAAX;AACD,GAFD,MAEO;AAAA;AAAA;;AAAA,QAAIT,eAAe,CAACO,MAAM,CAACvB,OAAR,CAAf,IAAmCf,iBAAvC,EAA0D;AAAA;AAAA;AAC/DI,MAAAA,GAAG,CAACM,MAAJ,CAAW+B,OAAX,CAAmB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAnB;AACD,KAFM;AAAA;AAAA;AAEN;;AAb0E;AAc3E,SAAOvC,CAAP;AACD;AAED;;AACA,OAAO,SAASwC,SAAT,CAAmBxC,CAAnB,EAAoC;AAAA;AAAA;;AACzC,2BAAuB,CAAC,GAAD,EAAM,GAAN,CAAvB,4BAAmC;AAA9B,QAAMU,QAAQ,YAAd;AACH,QAAMyB,MAAM,8BAAGnC,CAAC,CAACS,OAAF,CAAUC,QAAV,CAAH,CAAZ;AACA,QAAM0B,QAAQ,8BAAGpC,CAAC,CAACS,OAAF,CAAUI,WAAW,CAACH,QAAD,CAArB,CAAH,CAAd;AAFiC;;AAGjC,QAAI,8BAAAyB,MAAM,mCAAIC,QAAJ,CAAN,kCAAsBL,sBAAsB,CAACI,MAAM,CAACvB,OAAR,CAAtB,KAA2CwB,QAAQ,CAACzB,YAA1E,CAAJ,EAA4F;AAAA;AAAA;AAC1F,aAAO;AAAE8B,QAAAA,MAAM,EAAE/B;AAAV,OAAP;AACD,KAFD;AAAA;AAAA;AAGD;AACF","sourcesContent":["import { HangmanState, Guesses } from './definitions';\nimport { IGameCtx, INVALID_MOVE } from 'boardgame.io/core';\nimport { MAX_WORD_LENGTH, MAX_MISTAKE_COUNT, ALPHABET } from './constants';\n\n/** Called when users selects the initial word and (possibly) hint. */\nexport function setSecret(G: HangmanState, ctx: IGameCtx, secret: string, hint?: string) {\n  if (secret.length == 0 || secret.length > MAX_WORD_LENGTH) {\n    return INVALID_MOVE;\n  }\n  secret = secret.toLowerCase();\n  if (ctx.currentPlayer == '1') {\n    ctx.events.endPhase();\n  }\n  return {\n    players: {\n      ...G.players,\n      [ctx.playerID]: {\n        secret,\n        secretLength: secret.length,\n        hint,\n        guesses: {},\n      },\n    },\n  };\n}\n\nexport function getOpponent(playerID: string) {\n  switch (playerID) {\n    case '0':\n      return '1';\n    case '1':\n      return '0';\n  }\n  throw new Error(`Invalid playerID provided to getOpponnent: ${playerID}`);\n}\n\nfunction getWordIndexes(word: string, letter: string): number[] {\n  const indexes = [];\n  for (let i = 0; i < word.length; i++) {\n    if (word[i] === letter) {\n      indexes.push(i);\n    }\n  }\n  return indexes;\n}\n\n/** Gets array representing masked word. */\nexport function getMaskedWord(guesses: Guesses, secretLength: number): (string | undefined)[] {\n  const result = new Array(secretLength);\n  for (const [letter, guessResult] of Object.entries(guesses)) {\n    for (const index of guessResult) {\n      result[index] = letter;\n    }\n  }\n  return result;\n}\n\n/** Gets count of mistakes made in a set of guesses. */\nexport function getMistakeCount(guesses: Guesses) {\n  let count = 0;\n  for (const indexes of Object.values(guesses)) {\n    if (indexes.length === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\nfunction getCorrectLettersCount(guesses: Guesses) {\n  let count = 0;\n  for (const indexes of Object.values(guesses)) {\n    count += indexes.length;\n  }\n  return count;\n}\n\n/** Valides if all characters on this word is valid. */\nexport function isValidWord(word: string) {\n  for (let i = 0; i < word.length; i++) {\n    const letter = word[i].toLowerCase();\n    if (!ALPHABET.includes(letter)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Called when users selects letter. */\nexport function selectLetter(G: HangmanState, ctx: IGameCtx, letter: string) {\n  const player = G.players[ctx.playerID];\n  if (letter.length != 1 || letter in player.guesses) {\n    return INVALID_MOVE;\n  }\n  letter = letter.toLowerCase();\n  const opponent = G.players[getOpponent(ctx.playerID)];\n  const result = getWordIndexes(opponent.secret, letter);\n  player.guesses[letter] = result;\n  if (result.length == 0 && getMistakeCount(opponent.guesses) < MAX_MISTAKE_COUNT) {\n    ctx.events.endTurn();\n  } else if (getMistakeCount(player.guesses) >= MAX_MISTAKE_COUNT) {\n    ctx.events.endGame({ draw: true });\n  }\n  return G;\n}\n\n/** Returns the winner, if any. */\nexport function getWinner(G: HangmanState) {\n  for (const playerID of ['0', '1']) {\n    const player = G.players[playerID];\n    const opponent = G.players[getOpponent(playerID)];\n    if (player && opponent && getCorrectLettersCount(player.guesses) === opponent.secretLength) {\n      return { winner: playerID };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}