{"ast":null,"code":"function cov_bbezkls7h() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/checkers/ai.ts\";\n  var hash = \"75609952d8a6093c82c67a81f05f048ad27b84f4\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/checkers/ai.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 13,\n          column: 6\n        },\n        end: {\n          line: 13,\n          column: 117\n        }\n      },\n      \"1\": {\n        start: {\n          line: 14,\n          column: 17\n        },\n        end: {\n          line: 14,\n          column: 64\n        }\n      },\n      \"2\": {\n        start: {\n          line: 16,\n          column: 4\n        },\n        end: {\n          line: 16,\n          column: 41\n        }\n      },\n      \"3\": {\n        start: {\n          line: 20,\n          column: 4\n        },\n        end: {\n          line: 20,\n          column: 110\n        }\n      },\n      \"4\": {\n        start: {\n          line: 23,\n          column: 26\n        },\n        end: {\n          line: 29,\n          column: 1\n        }\n      },\n      \"5\": {\n        start: {\n          line: 25,\n          column: 4\n        },\n        end: {\n          line: 27,\n          column: 6\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 11,\n            column: 2\n          },\n          end: {\n            line: 11,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 11,\n            column: 50\n          },\n          end: {\n            line: 17,\n            column: 3\n          }\n        },\n        line: 11\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 19,\n            column: 2\n          },\n          end: {\n            line: 19,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 19,\n            column: 42\n          },\n          end: {\n            line: 21,\n            column: 3\n          }\n        },\n        line: 19\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 24,\n            column: 10\n          },\n          end: {\n            line: 24,\n            column: 11\n          }\n        },\n        loc: {\n          start: {\n            line: 24,\n            column: 16\n          },\n          end: {\n            line: 28,\n            column: 3\n          }\n        },\n        line: 24\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 13,\n            column: 6\n          },\n          end: {\n            line: 13,\n            column: 117\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 13,\n            column: 33\n          },\n          end: {\n            line: 13,\n            column: 82\n          }\n        }, {\n          start: {\n            line: 13,\n            column: 85\n          },\n          end: {\n            line: 13,\n            column: 117\n          }\n        }],\n        line: 13\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0\n    },\n    b: {\n      \"0\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"75609952d8a6093c82c67a81f05f048ad27b84f4\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_bbezkls7h = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_bbezkls7h();\nimport { getValidMoves } from './game';\n\nclass CheckersRandomBot {\n  async play(state, playerID) {\n    cov_bbezkls7h().f[0]++;\n    const moves = (cov_bbezkls7h().s[0]++, state.G.jumping !== null ? (cov_bbezkls7h().b[0][0]++, getValidMoves(state.G, playerID, state.G.jumping)) : (cov_bbezkls7h().b[0][1]++, getValidMoves(state.G, playerID)));\n    const move = (cov_bbezkls7h().s[1]++, moves[Math.floor(Math.random() * moves.length)]);\n    cov_bbezkls7h().s[2]++;\n    return this.makeMove(playerID, move);\n  }\n\n  makeMove(playerID, move) {\n    cov_bbezkls7h().f[1]++;\n    cov_bbezkls7h().s[3]++;\n    return {\n      action: {\n        type: 'MAKE_MOVE',\n        payload: {\n          type: 'move',\n          args: [move.from, move.to],\n          playerID\n        }\n      }\n    };\n  }\n\n}\n\nconst config = (cov_bbezkls7h().s[4]++, {\n  bgioAI: () => {\n    cov_bbezkls7h().f[2]++;\n    cov_bbezkls7h().s[5]++;\n    return {\n      bot: CheckersRandomBot\n    };\n  }\n});\nexport default config;","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/checkers/ai.ts"],"names":["getValidMoves","CheckersRandomBot","play","state","playerID","moves","G","jumping","move","Math","floor","random","length","makeMove","action","type","payload","args","from","to","config","bgioAI","bot"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAaA,aAAb,QAAyC,QAAzC;;AAQA,MAAMC,iBAAN,CAAwB;AACtB,QAAMC,IAAN,CAAWC,KAAX,EAA8BC,QAA9B,EAAgD;AAAA;AAC9C,UAAMC,KAAK,4BACTF,KAAK,CAACG,CAAN,CAAQC,OAAR,KAAoB,IAApB,+BAA2BP,aAAa,CAACG,KAAK,CAACG,CAAP,EAAUF,QAAV,EAAoBD,KAAK,CAACG,CAAN,CAAQC,OAA5B,CAAxC,gCAA+EP,aAAa,CAACG,KAAK,CAACG,CAAP,EAAUF,QAAV,CAA5F,CADS,CAAX;AAEA,UAAMI,IAAI,4BAAGH,KAAK,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAAK,CAACO,MAAjC,CAAD,CAAR,CAAV;AAH8C;AAK9C,WAAO,KAAKC,QAAL,CAAcT,QAAd,EAAwBI,IAAxB,CAAP;AACD;;AAEDK,EAAAA,QAAQ,CAACT,QAAD,EAAmBI,IAAnB,EAAgC;AAAA;AAAA;AACtC,WAAO;AAAEM,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAE,WAAR;AAAqBC,QAAAA,OAAO,EAAE;AAAED,UAAAA,IAAI,EAAE,MAAR;AAAgBE,UAAAA,IAAI,EAAE,CAACT,IAAI,CAACU,IAAN,EAAYV,IAAI,CAACW,EAAjB,CAAtB;AAA4Cf,UAAAA;AAA5C;AAA9B;AAAV,KAAP;AACD;;AAXqB;;AAaxB,MAAMgB,MAAiB,4BAAG;AACxBC,EAAAA,MAAM,EAAE,MAAM;AAAA;AAAA;AACZ,WAAO;AACLC,MAAAA,GAAG,EAAErB;AADA,KAAP;AAGD;AALuB,CAAH,CAAvB;AAOA,eAAemB,MAAf","sourcesContent":["import { IAIConfig } from '../index';\nimport { IG, getValidMoves, IMove } from './game';\nimport { IGameCtx } from 'boardgame.io/core';\n\ninterface IPlayState {\n  G: IG;\n  ctx: IGameCtx;\n}\n\nclass CheckersRandomBot {\n  async play(state: IPlayState, playerID: string) {\n    const moves =\n      state.G.jumping !== null ? getValidMoves(state.G, playerID, state.G.jumping) : getValidMoves(state.G, playerID);\n    const move = moves[Math.floor(Math.random() * moves.length)];\n\n    return this.makeMove(playerID, move);\n  }\n\n  makeMove(playerID: string, move: IMove) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'move', args: [move.from, move.to], playerID } } };\n  }\n}\nconst config: IAIConfig = {\n  bgioAI: () => {\n    return {\n      bot: CheckersRandomBot,\n    };\n  },\n};\nexport default config;\n"]},"metadata":{},"sourceType":"module"}