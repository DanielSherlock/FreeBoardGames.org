{"ast":null,"code":"function cov_yg4j5aepp() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/zooparade/game.ts\";\n  var hash = \"ca91110aacd8d23fd3d3ce1454398e40498a6d51\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/zooparade/game.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 12,\n          column: 18\n        },\n        end: {\n          line: 12,\n          column: 20\n        }\n      },\n      \"1\": {\n        start: {\n          line: 13,\n          column: 13\n        },\n        end: {\n          line: 13,\n          column: 33\n        }\n      },\n      \"2\": {\n        start: {\n          line: 14,\n          column: 2\n        },\n        end: {\n          line: 20,\n          column: 3\n        }\n      },\n      \"3\": {\n        start: {\n          line: 14,\n          column: 15\n        },\n        end: {\n          line: 14,\n          column: 16\n        }\n      },\n      \"4\": {\n        start: {\n          line: 15,\n          column: 4\n        },\n        end: {\n          line: 19,\n          column: 5\n        }\n      },\n      \"5\": {\n        start: {\n          line: 21,\n          column: 13\n        },\n        end: {\n          line: 21,\n          column: 37\n        }\n      },\n      \"6\": {\n        start: {\n          line: 22,\n          column: 25\n        },\n        end: {\n          line: 22,\n          column: 44\n        }\n      },\n      \"7\": {\n        start: {\n          line: 23,\n          column: 2\n        },\n        end: {\n          line: 25,\n          column: 3\n        }\n      },\n      \"8\": {\n        start: {\n          line: 23,\n          column: 16\n        },\n        end: {\n          line: 23,\n          column: 17\n        }\n      },\n      \"9\": {\n        start: {\n          line: 24,\n          column: 4\n        },\n        end: {\n          line: 24,\n          column: 23\n        }\n      },\n      \"10\": {\n        start: {\n          line: 26,\n          column: 23\n        },\n        end: {\n          line: 26,\n          column: 31\n        }\n      },\n      \"11\": {\n        start: {\n          line: 30,\n          column: 2\n        },\n        end: {\n          line: 34,\n          column: 3\n        }\n      },\n      \"12\": {\n        start: {\n          line: 31,\n          column: 4\n        },\n        end: {\n          line: 31,\n          column: 15\n        }\n      },\n      \"13\": {\n        start: {\n          line: 33,\n          column: 4\n        },\n        end: {\n          line: 33,\n          column: 15\n        }\n      },\n      \"14\": {\n        start: {\n          line: 35,\n          column: 14\n        },\n        end: {\n          line: 35,\n          column: 46\n        }\n      },\n      \"15\": {\n        start: {\n          line: 37,\n          column: 2\n        },\n        end: {\n          line: 46,\n          column: 3\n        }\n      },\n      \"16\": {\n        start: {\n          line: 37,\n          column: 15\n        },\n        end: {\n          line: 37,\n          column: 16\n        }\n      },\n      \"17\": {\n        start: {\n          line: 38,\n          column: 4\n        },\n        end: {\n          line: 40,\n          column: 58\n        }\n      },\n      \"18\": {\n        start: {\n          line: 41,\n          column: 4\n        },\n        end: {\n          line: 45,\n          column: 5\n        }\n      },\n      \"19\": {\n        start: {\n          line: 41,\n          column: 17\n        },\n        end: {\n          line: 41,\n          column: 18\n        }\n      },\n      \"20\": {\n        start: {\n          line: 42,\n          column: 6\n        },\n        end: {\n          line: 42,\n          column: 41\n        }\n      },\n      \"21\": {\n        start: {\n          line: 43,\n          column: 6\n        },\n        end: {\n          line: 43,\n          column: 20\n        }\n      },\n      \"22\": {\n        start: {\n          line: 44,\n          column: 6\n        },\n        end: {\n          line: 44,\n          column: 75\n        }\n      },\n      \"23\": {\n        start: {\n          line: 50,\n          column: 18\n        },\n        end: {\n          line: 50,\n          column: 19\n        }\n      },\n      \"24\": {\n        start: {\n          line: 51,\n          column: 15\n        },\n        end: {\n          line: 51,\n          column: 16\n        }\n      },\n      \"25\": {\n        start: {\n          line: 54,\n          column: 15\n        },\n        end: {\n          line: 62,\n          column: 3\n        }\n      },\n      \"26\": {\n        start: {\n          line: 65,\n          column: 2\n        },\n        end: {\n          line: 65,\n          column: 15\n        }\n      },\n      \"27\": {\n        start: {\n          line: 70,\n          column: 29\n        },\n        end: {\n          line: 138,\n          column: 1\n        }\n      },\n      \"28\": {\n        start: {\n          line: 77,\n          column: 13\n        },\n        end: {\n          line: 77,\n          column: 31\n        }\n      },\n      \"29\": {\n        start: {\n          line: 79,\n          column: 4\n        },\n        end: {\n          line: 83,\n          column: 5\n        }\n      },\n      \"30\": {\n        start: {\n          line: 82,\n          column: 6\n        },\n        end: {\n          line: 82,\n          column: 14\n        }\n      },\n      \"31\": {\n        start: {\n          line: 85,\n          column: 4\n        },\n        end: {\n          line: 98,\n          column: 5\n        }\n      },\n      \"32\": {\n        start: {\n          line: 87,\n          column: 31\n        },\n        end: {\n          line: 87,\n          column: 42\n        }\n      },\n      \"33\": {\n        start: {\n          line: 89,\n          column: 12\n        },\n        end: {\n          line: 91,\n          column: 13\n        }\n      },\n      \"34\": {\n        start: {\n          line: 90,\n          column: 14\n        },\n        end: {\n          line: 90,\n          column: 25\n        }\n      },\n      \"35\": {\n        start: {\n          line: 92,\n          column: 12\n        },\n        end: {\n          line: 96,\n          column: 13\n        }\n      },\n      \"36\": {\n        start: {\n          line: 93,\n          column: 43\n        },\n        end: {\n          line: 93,\n          column: 54\n        }\n      },\n      \"37\": {\n        start: {\n          line: 128,\n          column: 4\n        },\n        end: {\n          line: 130,\n          column: 5\n        }\n      },\n      \"38\": {\n        start: {\n          line: 129,\n          column: 6\n        },\n        end: {\n          line: 129,\n          column: 27\n        }\n      },\n      \"39\": {\n        start: {\n          line: 131,\n          column: 4\n        },\n        end: {\n          line: 133,\n          column: 5\n        }\n      },\n      \"40\": {\n        start: {\n          line: 132,\n          column: 6\n        },\n        end: {\n          line: 132,\n          column: 28\n        }\n      },\n      \"41\": {\n        start: {\n          line: 134,\n          column: 4\n        },\n        end: {\n          line: 136,\n          column: 5\n        }\n      },\n      \"42\": {\n        start: {\n          line: 135,\n          column: 6\n        },\n        end: {\n          line: 135,\n          column: 28\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"setup\",\n        decl: {\n          start: {\n            line: 10,\n            column: 9\n          },\n          end: {\n            line: 10,\n            column: 14\n          }\n        },\n        loc: {\n          start: {\n            line: 10,\n            column: 34\n          },\n          end: {\n            line: 66,\n            column: 1\n          }\n        },\n        line: 10\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 75,\n            column: 14\n          },\n          end: {\n            line: 75,\n            column: 15\n          }\n        },\n        loc: {\n          start: {\n            line: 75,\n            column: 36\n          },\n          end: {\n            line: 99,\n            column: 3\n          }\n        },\n        line: 75\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 87,\n            column: 23\n          },\n          end: {\n            line: 87,\n            column: 24\n          }\n        },\n        loc: {\n          start: {\n            line: 87,\n            column: 29\n          },\n          end: {\n            line: 87,\n            column: 43\n          }\n        },\n        line: 87\n      },\n      \"3\": {\n        name: \"(anonymous_3)\",\n        decl: {\n          start: {\n            line: 88,\n            column: 25\n          },\n          end: {\n            line: 88,\n            column: 26\n          }\n        },\n        loc: {\n          start: {\n            line: 88,\n            column: 57\n          },\n          end: {\n            line: 97,\n            column: 7\n          }\n        },\n        line: 88\n      },\n      \"4\": {\n        name: \"(anonymous_4)\",\n        decl: {\n          start: {\n            line: 93,\n            column: 36\n          },\n          end: {\n            line: 93,\n            column: 37\n          }\n        },\n        loc: {\n          start: {\n            line: 93,\n            column: 42\n          },\n          end: {\n            line: 93,\n            column: 55\n          }\n        },\n        line: 93\n      },\n      \"5\": {\n        name: \"(anonymous_5)\",\n        decl: {\n          start: {\n            line: 127,\n            column: 9\n          },\n          end: {\n            line: 127,\n            column: 10\n          }\n        },\n        loc: {\n          start: {\n            line: 127,\n            column: 21\n          },\n          end: {\n            line: 137,\n            column: 3\n          }\n        },\n        line: 127\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 30,\n            column: 2\n          },\n          end: {\n            line: 34,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 30,\n            column: 2\n          },\n          end: {\n            line: 34,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 30,\n            column: 2\n          },\n          end: {\n            line: 34,\n            column: 3\n          }\n        }],\n        line: 30\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 30,\n            column: 7\n          },\n          end: {\n            line: 30,\n            column: 59\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 30,\n            column: 9\n          },\n          end: {\n            line: 30,\n            column: 29\n          }\n        }, {\n          start: {\n            line: 30,\n            column: 37\n          },\n          end: {\n            line: 30,\n            column: 57\n          }\n        }],\n        line: 30\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 79,\n            column: 4\n          },\n          end: {\n            line: 83,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 79,\n            column: 4\n          },\n          end: {\n            line: 83,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 79,\n            column: 4\n          },\n          end: {\n            line: 83,\n            column: 5\n          }\n        }],\n        line: 79\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 89,\n            column: 12\n          },\n          end: {\n            line: 91,\n            column: 13\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 89,\n            column: 12\n          },\n          end: {\n            line: 91,\n            column: 13\n          }\n        }, {\n          start: {\n            line: 89,\n            column: 12\n          },\n          end: {\n            line: 91,\n            column: 13\n          }\n        }],\n        line: 89\n      },\n      \"4\": {\n        loc: {\n          start: {\n            line: 128,\n            column: 4\n          },\n          end: {\n            line: 130,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 128,\n            column: 4\n          },\n          end: {\n            line: 130,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 128,\n            column: 4\n          },\n          end: {\n            line: 130,\n            column: 5\n          }\n        }],\n        line: 128\n      },\n      \"5\": {\n        loc: {\n          start: {\n            line: 131,\n            column: 4\n          },\n          end: {\n            line: 133,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 131,\n            column: 4\n          },\n          end: {\n            line: 133,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 131,\n            column: 4\n          },\n          end: {\n            line: 133,\n            column: 5\n          }\n        }],\n        line: 131\n      },\n      \"6\": {\n        loc: {\n          start: {\n            line: 134,\n            column: 4\n          },\n          end: {\n            line: 136,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 134,\n            column: 4\n          },\n          end: {\n            line: 136,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 134,\n            column: 4\n          },\n          end: {\n            line: 136,\n            column: 5\n          }\n        }],\n        line: 134\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0,\n      \"9\": 0,\n      \"10\": 0,\n      \"11\": 0,\n      \"12\": 0,\n      \"13\": 0,\n      \"14\": 0,\n      \"15\": 0,\n      \"16\": 0,\n      \"17\": 0,\n      \"18\": 0,\n      \"19\": 0,\n      \"20\": 0,\n      \"21\": 0,\n      \"22\": 0,\n      \"23\": 0,\n      \"24\": 0,\n      \"25\": 0,\n      \"26\": 0,\n      \"27\": 0,\n      \"28\": 0,\n      \"29\": 0,\n      \"30\": 0,\n      \"31\": 0,\n      \"32\": 0,\n      \"33\": 0,\n      \"34\": 0,\n      \"35\": 0,\n      \"36\": 0,\n      \"37\": 0,\n      \"38\": 0,\n      \"39\": 0,\n      \"40\": 0,\n      \"41\": 0,\n      \"42\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0],\n      \"4\": [0, 0],\n      \"5\": [0, 0],\n      \"6\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"ca91110aacd8d23fd3d3ce1454398e40498a6d51\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_yg4j5aepp = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_yg4j5aepp();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isWin, isEnd, isLose } from './endconditions';\nimport { idToColor, idToValue } from './util';\nimport { moveDiscard, moveHintColor, moveHintValue, movePlay } from './moves'; // Setup\n\nfunction setup(ctx) {\n  cov_yg4j5aepp().f[0]++;\n  // Create Deck\n  var deckindex = (cov_yg4j5aepp().s[0]++, 49);\n  var deck = (cov_yg4j5aepp().s[1]++, Array(50).fill(null));\n  cov_yg4j5aepp().s[2]++;\n\n  for (var i = (cov_yg4j5aepp().s[3]++, 0); i < 50; i++) {\n    cov_yg4j5aepp().s[4]++;\n    deck[i] = {\n      id: i,\n      color: idToColor(i),\n      value: idToValue(i)\n    };\n  }\n\n  var deck = (cov_yg4j5aepp().s[5]++, ctx.random.Shuffle(deck));\n  var piles = (cov_yg4j5aepp().s[6]++, Array(5).fill(null));\n  cov_yg4j5aepp().s[7]++;\n\n  for (var i = (cov_yg4j5aepp().s[8]++, 0); i < 5; i++) {\n    cov_yg4j5aepp().s[9]++;\n    piles[i] = Array(0);\n  }\n\n  var trash = (cov_yg4j5aepp().s[10]++, Array(0)); // Create Player Hands\n\n  var nrCards;\n  cov_yg4j5aepp().s[11]++;\n\n  if ((cov_yg4j5aepp().b[1][0]++, ctx.numPlayers === 2) || (cov_yg4j5aepp().b[1][1]++, ctx.numPlayers === 3)) {\n    cov_yg4j5aepp().b[0][0]++;\n    cov_yg4j5aepp().s[12]++;\n    nrCards = 5;\n  } else {\n    cov_yg4j5aepp().b[0][1]++;\n    cov_yg4j5aepp().s[13]++;\n    // 4 or 5 players\n    nrCards = 4;\n  }\n\n  var hands = (cov_yg4j5aepp().s[14]++, Array(ctx.numPlayers).fill(null));\n  cov_yg4j5aepp().s[15]++;\n\n  for (var j = (cov_yg4j5aepp().s[16]++, 0); j < ctx.numPlayers; j++) {\n    cov_yg4j5aepp().s[17]++;\n    hands[j] = {\n      player: j,\n      cards: Array(nrCards).fill(null),\n      hints: Array(nrCards).fill(null)\n    };\n    cov_yg4j5aepp().s[18]++;\n\n    for (var i = (cov_yg4j5aepp().s[19]++, 0); i < nrCards; i++) {\n      cov_yg4j5aepp().s[20]++;\n      hands[j].cards[i] = deck[deckindex];\n      cov_yg4j5aepp().s[21]++;\n      deckindex -= 1;\n      cov_yg4j5aepp().s[22]++;\n      hands[j].hints[i] = {\n        color: [0, 0, 0, 0, 0],\n        value: [0, 0, 0, 0, 0]\n      };\n    }\n  } // Rest\n\n\n  var countdown = (cov_yg4j5aepp().s[23]++, 3);\n  var treats = (cov_yg4j5aepp().s[24]++, 8);\n  var finalG = (cov_yg4j5aepp().s[25]++, {\n    deck: deck,\n    deckindex: deckindex,\n    trash: trash,\n    piles: piles,\n    hands: hands,\n    countdown: countdown,\n    treats: treats\n  });\n  cov_yg4j5aepp().s[26]++;\n  return finalG;\n} // Game\n\n\nexport const ZooParadeGame = (cov_yg4j5aepp().s[27]++, {\n  name: 'zooparade',\n  setup: setup,\n  playerView: (G, ctx, playerID) => {\n    cov_yg4j5aepp().f[1]++;\n    // Hide your own cards\n    var id = (cov_yg4j5aepp().s[28]++, parseInt(playerID));\n    cov_yg4j5aepp().s[29]++;\n\n    if (isNaN(id)) {\n      cov_yg4j5aepp().b[2][0]++;\n      cov_yg4j5aepp().s[30]++;\n      // However, if this is not a multiplayer then this is NaN. \n      //     // For testing only, as this game can only be played Multiplayer.\n      return G;\n    } else {\n      cov_yg4j5aepp().b[2][1]++;\n    }\n\n    cov_yg4j5aepp().s[31]++;\n    return _objectSpread({}, G, {\n      deck: G.deck.map(() => {\n        cov_yg4j5aepp().f[2]++;\n        cov_yg4j5aepp().s[32]++;\n        return null;\n      }),\n      hands: G.hands.map((hand, index) => {\n        cov_yg4j5aepp().f[3]++;\n        cov_yg4j5aepp().s[33]++;\n\n        if (index !== id) {\n          cov_yg4j5aepp().b[3][0]++;\n          cov_yg4j5aepp().s[34]++;\n          return hand;\n        } else {\n          cov_yg4j5aepp().b[3][1]++;\n        }\n\n        cov_yg4j5aepp().s[35]++;\n        return {\n          cards: hand.cards.map(() => {\n            cov_yg4j5aepp().f[4]++;\n            cov_yg4j5aepp().s[36]++;\n            return null;\n          }),\n          hints: hand.hints,\n          player: hand.player\n        };\n      })\n    });\n  },\n  moves: {\n    //  movePlay,\n    //  moveDiscard,\n    //  moveHintColor,\n    //  moveHintValue,\n    movePlay: {\n      move: movePlay,\n      client: false\n    },\n    moveDiscard: {\n      move: moveDiscard,\n      client: false\n    },\n    moveHintColor: {\n      move: moveHintColor,\n      client: false\n    },\n    moveHintValue: {\n      move: moveHintValue,\n      client: false\n    }\n  },\n  turn: {\n    moveLimit: 1\n  },\n  endIf: (G, ctx) => {\n    cov_yg4j5aepp().f[5]++;\n    cov_yg4j5aepp().s[37]++;\n\n    if (isLose(G)) {\n      cov_yg4j5aepp().b[4][0]++;\n      cov_yg4j5aepp().s[38]++;\n      return {\n        draw: true\n      };\n    } else {\n      cov_yg4j5aepp().b[4][1]++;\n    }\n\n    cov_yg4j5aepp().s[39]++;\n\n    if (isWin(G)) {\n      cov_yg4j5aepp().b[5][0]++;\n      cov_yg4j5aepp().s[40]++;\n      return {\n        draw: true\n      }; // TODO: RETURN THE SCORE\n    } else {\n      cov_yg4j5aepp().b[5][1]++;\n    }\n\n    cov_yg4j5aepp().s[41]++;\n\n    if (isEnd(G, ctx)) {\n      cov_yg4j5aepp().b[6][0]++;\n      cov_yg4j5aepp().s[42]++;\n      return {\n        draw: true\n      }; // TODO: RETURN THE SCORE\n    } else {\n      cov_yg4j5aepp().b[6][1]++;\n    }\n  }\n});","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/zooparade/game.ts"],"names":["isWin","isEnd","isLose","idToColor","idToValue","moveDiscard","moveHintColor","moveHintValue","movePlay","setup","ctx","deckindex","deck","Array","fill","i","id","color","value","random","Shuffle","piles","trash","nrCards","numPlayers","hands","j","player","cards","hints","countdown","treats","finalG","ZooParadeGame","name","playerView","G","playerID","parseInt","isNaN","map","hand","index","moves","move","client","turn","moveLimit","endIf","draw"],"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","sourcesContent":["import { IGameCtx } from 'boardgame.io/core';\n\nimport { ICard, IHand, IHint, IG} from './interfaces';\nimport { isWin, isEnd, isLose } from './endconditions';\nimport { idToColor, idToValue } from './util';\n\nimport { moveDiscard, moveHintColor, moveHintValue, movePlay } from './moves';\n\n// Setup\nfunction setup(ctx: IGameCtx): IG {\n  // Create Deck\n  var deckindex = 49\n  var deck = Array(50).fill(null)\n  for (var i = 0; i < 50; i++) {\n    deck[i] = <ICard> {\n      id: i,\n      color: idToColor(i),\n      value: idToValue(i),\n    }\n  }\n  var deck = ctx.random.Shuffle(deck)\n  var piles: ICard[][] = Array(5).fill(null)\n  for ( var i = 0; i < 5; i++) {\n    piles[i] = Array(0)\n  }\n  var trash: ICard[] = Array(0)\n\n  // Create Player Hands\n  var nrCards: number\n  if ( ( ctx.numPlayers === 2 ) || ( ctx.numPlayers === 3 ) ){\n    nrCards = 5\n  } else { // 4 or 5 players\n    nrCards = 4 \n  }\n  var hands = Array(ctx.numPlayers).fill(null)\n\n  for (var j = 0; j < ctx.numPlayers; j++ ) {\n    hands[j] = <IHand> { player: j,\n                         cards: Array(nrCards).fill(null),\n                         hints: Array(nrCards).fill(null)}\n    for (var i = 0; i < nrCards; i++) {\n      hands[j].cards[i] = deck[deckindex]\n      deckindex -= 1\n      hands[j].hints[i] = <IHint> { color: [0,0,0,0,0], value: [0,0,0,0,0]} \n    }\n  }\n\n\n  // Rest\n  var countdown = 3\n  var treats = 8\n\n\n  var finalG = <IG> {\n    deck: deck,\n    deckindex: deckindex,\n    trash: trash,\n    piles: piles,\n    hands: hands, \n    countdown: countdown ,\n    treats: treats,\n  }\n\n\n  return finalG\n}\n\n\n// Game\nexport const ZooParadeGame = {\n  name: 'zooparade',\n\n  setup: setup,\n\n  playerView: (G, ctx, playerID) => {\n    // Hide your own cards\n    var id = parseInt(playerID) \n\n    if (isNaN(id)) { // However, if this is not a multiplayer then this is NaN. \n            //     // For testing only, as this game can only be played Multiplayer.\n\n      return G\n    }\n\n    return {\n      ...G,\n      deck: G.deck.map(() => { return null}),\n      hands: G.hands.map((hand: IHand, index: number) => {\n            if (index !== id) {\n              return hand\n            }\n            return <IHand> {\n              cards: hand.cards.map(() => {return null}),\n              hints: hand.hints,\n              player: hand.player\n            }\n      })\n    }\n  },\n\n\n  moves: {\n  //  movePlay,\n  //  moveDiscard,\n  //  moveHintColor,\n  //  moveHintValue,\n    movePlay: {\n      move: movePlay,\n      client: false\n    },\n    moveDiscard: {\n      move: moveDiscard,\n      client: false\n    },\n    moveHintColor: {\n      move: moveHintColor,\n      client: false\n    },\n    moveHintValue: {\n      move: moveHintValue,\n      client: false\n    },\n  },\n\n  turn: { moveLimit: 1 },\n\n  endIf: (G, ctx) => {\n    if (isLose(G)) {\n      return { draw: true};\n    }\n    if (isWin(G)) {\n      return { draw: true }; // TODO: RETURN THE SCORE\n    }\n    if (isEnd(G, ctx)) {\n      return { draw: true }; // TODO: RETURN THE SCORE\n    }\n  },\n};\n\n"]},"metadata":{},"sourceType":"module"}