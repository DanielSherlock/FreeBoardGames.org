{"ast":null,"code":"function cov_10vxu141xk() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/index.ts\";\n  var hash = \"0017b500ebe83dd38b9c48f55032fefa4d00170e\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/index.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 17,\n          column: 38\n        },\n        end: {\n          line: 31,\n          column: 1\n        }\n      },\n      \"1\": {\n        start: {\n          line: 35,\n          column: 38\n        },\n        end: {\n          line: 49,\n          column: 1\n        }\n      }\n    },\n    fnMap: {},\n    branchMap: {},\n    s: {\n      \"0\": 0,\n      \"1\": 0\n    },\n    f: {},\n    b: {},\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"0017b500ebe83dd38b9c48f55032fefa4d00170e\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_10vxu141xk = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_10vxu141xk();\nimport { chessGameDef } from './chess';\nimport { seabattleGameDef } from './seabattle';\nimport { tictactoeGameDef } from './tictactoe';\nimport { takesixGameDef } from './takesix';\nimport { ninemensmorrisGameDef } from './ninemensmorris';\nimport { checkersGameDef } from './checkers';\nimport { reversiGameDef } from './reversi';\nimport { cornerusGameDef } from './cornerus';\nimport { tictactoeplusGameDef } from './tictactoeplus';\nimport { fourinarowGameDef } from './fourinarow';\nimport { zooParadeGameDef } from './zooparade';\nimport { secretcodesGameDef } from './secretcodes';\nimport { hangmanGameDef } from './hangman'; // Add new games here\n\nexport var GAMES_MAP = (cov_10vxu141xk().s[0]++, {\n  zooparade: zooParadeGameDef,\n  chess: chessGameDef,\n  seabattle: seabattleGameDef,\n  tictactoe: tictactoeGameDef,\n  takesix: takesixGameDef,\n  cornerus: cornerusGameDef,\n  ninemensmorris: ninemensmorrisGameDef,\n  checkers: checkersGameDef,\n  reversi: reversiGameDef,\n  tictactoeplus: tictactoeplusGameDef,\n  fourinarow: fourinarowGameDef,\n  secretcodes: secretcodesGameDef,\n  hangman: hangmanGameDef\n}); // Order roughly by popularity.\n// See https://stats.freeboardgames.org\n\nexport var GAMES_LIST = (cov_10vxu141xk().s[1]++, [GAMES_MAP.zooparade, GAMES_MAP.takesix, GAMES_MAP.chess, GAMES_MAP.secretcodes, GAMES_MAP.seabattle, GAMES_MAP.tictactoe, GAMES_MAP.fourinarow, GAMES_MAP.checkers, GAMES_MAP.cornerus, GAMES_MAP.tictactoeplus, GAMES_MAP.reversi, GAMES_MAP.ninemensmorris, GAMES_MAP.hangman]); // No need to edit below","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/index.ts"],"names":["chessGameDef","seabattleGameDef","tictactoeGameDef","takesixGameDef","ninemensmorrisGameDef","checkersGameDef","reversiGameDef","cornerusGameDef","tictactoeplusGameDef","fourinarowGameDef","zooParadeGameDef","secretcodesGameDef","hangmanGameDef","GAMES_MAP","zooparade","chess","seabattle","tictactoe","takesix","cornerus","ninemensmorris","checkers","reversi","tictactoeplus","fourinarow","secretcodes","hangman","GAMES_LIST"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,YAAT,QAA6B,SAA7B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,cAAT,QAA+B,WAA/B,C,CAEA;;AACA,OAAO,IAAMC,SAAsB,6BAAG;AACpCC,EAAAA,SAAS,EAAEJ,gBADyB;AAEpCK,EAAAA,KAAK,EAAEf,YAF6B;AAGpCgB,EAAAA,SAAS,EAAEf,gBAHyB;AAIpCgB,EAAAA,SAAS,EAAEf,gBAJyB;AAKpCgB,EAAAA,OAAO,EAAEf,cAL2B;AAMpCgB,EAAAA,QAAQ,EAAEZ,eAN0B;AAOpCa,EAAAA,cAAc,EAAEhB,qBAPoB;AAQpCiB,EAAAA,QAAQ,EAAEhB,eAR0B;AASpCiB,EAAAA,OAAO,EAAEhB,cAT2B;AAUpCiB,EAAAA,aAAa,EAAEf,oBAVqB;AAWpCgB,EAAAA,UAAU,EAAEf,iBAXwB;AAYpCgB,EAAAA,WAAW,EAAEd,kBAZuB;AAapCe,EAAAA,OAAO,EAAEd;AAb2B,CAAH,CAA5B,C,CAgBP;AACA;;AACA,OAAO,IAAMe,UAAsB,6BAAG,CACpCd,SAAS,CAACC,SAD0B,EAEpCD,SAAS,CAACK,OAF0B,EAGpCL,SAAS,CAACE,KAH0B,EAIpCF,SAAS,CAACY,WAJ0B,EAKpCZ,SAAS,CAACG,SAL0B,EAMpCH,SAAS,CAACI,SAN0B,EAOpCJ,SAAS,CAACW,UAP0B,EAQpCX,SAAS,CAACQ,QAR0B,EASpCR,SAAS,CAACM,QAT0B,EAUpCN,SAAS,CAACU,aAV0B,EAWpCV,SAAS,CAACS,OAX0B,EAYpCT,SAAS,CAACO,cAZ0B,EAapCP,SAAS,CAACa,OAb0B,CAAH,CAA5B,C,CAgBP","sourcesContent":["import { IGameModeInfo } from 'components/App/Game/GameModePicker';\nimport { chessGameDef } from './chess';\nimport { seabattleGameDef } from './seabattle';\nimport { tictactoeGameDef } from './tictactoe';\nimport { takesixGameDef } from './takesix';\nimport { ninemensmorrisGameDef } from './ninemensmorris';\nimport { checkersGameDef } from './checkers';\nimport { reversiGameDef } from './reversi';\nimport { cornerusGameDef } from './cornerus';\nimport { tictactoeplusGameDef } from './tictactoeplus';\nimport { fourinarowGameDef } from './fourinarow';\nimport { zooParadeGameDef } from './zooparade';\nimport { secretcodesGameDef } from './secretcodes';\nimport { hangmanGameDef } from './hangman';\n\n// Add new games here\nexport const GAMES_MAP: IGameDefMap = {\n  zooparade: zooParadeGameDef,\n  chess: chessGameDef,\n  seabattle: seabattleGameDef,\n  tictactoe: tictactoeGameDef,\n  takesix: takesixGameDef,\n  cornerus: cornerusGameDef,\n  ninemensmorris: ninemensmorrisGameDef,\n  checkers: checkersGameDef,\n  reversi: reversiGameDef,\n  tictactoeplus: tictactoeplusGameDef,\n  fourinarow: fourinarowGameDef,\n  secretcodes: secretcodesGameDef,\n  hangman: hangmanGameDef,\n};\n\n// Order roughly by popularity.\n// See https://stats.freeboardgames.org\nexport const GAMES_LIST: IGameDef[] = [\n  GAMES_MAP.zooparade,\n  GAMES_MAP.takesix,\n  GAMES_MAP.chess,\n  GAMES_MAP.secretcodes,\n  GAMES_MAP.seabattle,\n  GAMES_MAP.tictactoe,\n  GAMES_MAP.fourinarow,\n  GAMES_MAP.checkers,\n  GAMES_MAP.cornerus,\n  GAMES_MAP.tictactoeplus,\n  GAMES_MAP.reversi,\n  GAMES_MAP.ninemensmorris,\n  GAMES_MAP.hangman,\n];\n\n// No need to edit below\nexport interface IGameConfig {\n  bgioGame: any;\n  bgioBoard: any;\n  enhancers?: any;\n  debug?: boolean;\n}\n\nexport interface IAIConfig {\n  bgioAI: (level: string) => any;\n}\n\nexport interface IGameDef {\n  code: string;\n  name: string;\n  imageURL: {\n    src: string;\n    0: string;\n  };\n  description: string;\n  descriptionTag: string;\n  minPlayers: number;\n  maxPlayers: number;\n  modes: IGameModeInfo[];\n  instructions?: {\n    videoId?: string;\n    text?: string;\n  };\n  config: () => Promise<any>;\n  aiConfig?: () => Promise<any>;\n}\n\nexport interface IGameDefMap {\n  [code: string]: IGameDef;\n}\n"]},"metadata":{},"sourceType":"module"}