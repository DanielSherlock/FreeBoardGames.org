{"ast":null,"code":"function cov_1zri1bp9sn() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/zooparade/endconditions.ts\";\n  var hash = \"6c6782323ee63349ff094d7e55ae465fed554fbc\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/zooparade/endconditions.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 6,\n          column: 2\n        },\n        end: {\n          line: 16,\n          column: 3\n        }\n      },\n      \"1\": {\n        start: {\n          line: 6,\n          column: 15\n        },\n        end: {\n          line: 6,\n          column: 16\n        }\n      },\n      \"2\": {\n        start: {\n          line: 7,\n          column: 4\n        },\n        end: {\n          line: 9,\n          column: 5\n        }\n      },\n      \"3\": {\n        start: {\n          line: 8,\n          column: 6\n        },\n        end: {\n          line: 8,\n          column: 18\n        }\n      },\n      \"4\": {\n        start: {\n          line: 10,\n          column: 4\n        },\n        end: {\n          line: 12,\n          column: 5\n        }\n      },\n      \"5\": {\n        start: {\n          line: 11,\n          column: 6\n        },\n        end: {\n          line: 11,\n          column: 18\n        }\n      },\n      \"6\": {\n        start: {\n          line: 13,\n          column: 4\n        },\n        end: {\n          line: 15,\n          column: 5\n        }\n      },\n      \"7\": {\n        start: {\n          line: 14,\n          column: 6\n        },\n        end: {\n          line: 14,\n          column: 17\n        }\n      },\n      \"8\": {\n        start: {\n          line: 20,\n          column: 2\n        },\n        end: {\n          line: 22,\n          column: 3\n        }\n      },\n      \"9\": {\n        start: {\n          line: 21,\n          column: 4\n        },\n        end: {\n          line: 21,\n          column: 15\n        }\n      },\n      \"10\": {\n        start: {\n          line: 26,\n          column: 2\n        },\n        end: {\n          line: 29,\n          column: 3\n        }\n      },\n      \"11\": {\n        start: {\n          line: 27,\n          column: 4\n        },\n        end: {\n          line: 27,\n          column: 15\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"isWin\",\n        decl: {\n          start: {\n            line: 5,\n            column: 16\n          },\n          end: {\n            line: 5,\n            column: 21\n          }\n        },\n        loc: {\n          start: {\n            line: 5,\n            column: 28\n          },\n          end: {\n            line: 17,\n            column: 1\n          }\n        },\n        line: 5\n      },\n      \"1\": {\n        name: \"isLose\",\n        decl: {\n          start: {\n            line: 19,\n            column: 16\n          },\n          end: {\n            line: 19,\n            column: 22\n          }\n        },\n        loc: {\n          start: {\n            line: 19,\n            column: 30\n          },\n          end: {\n            line: 23,\n            column: 1\n          }\n        },\n        line: 19\n      },\n      \"2\": {\n        name: \"isEnd\",\n        decl: {\n          start: {\n            line: 25,\n            column: 16\n          },\n          end: {\n            line: 25,\n            column: 21\n          }\n        },\n        loc: {\n          start: {\n            line: 25,\n            column: 44\n          },\n          end: {\n            line: 30,\n            column: 1\n          }\n        },\n        line: 25\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 7,\n            column: 4\n          },\n          end: {\n            line: 9,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 7,\n            column: 4\n          },\n          end: {\n            line: 9,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 7,\n            column: 4\n          },\n          end: {\n            line: 9,\n            column: 5\n          }\n        }],\n        line: 7\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 10,\n            column: 4\n          },\n          end: {\n            line: 12,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 10,\n            column: 4\n          },\n          end: {\n            line: 12,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 10,\n            column: 4\n          },\n          end: {\n            line: 12,\n            column: 5\n          }\n        }],\n        line: 10\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 13,\n            column: 4\n          },\n          end: {\n            line: 15,\n            column: 5\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 13,\n            column: 4\n          },\n          end: {\n            line: 15,\n            column: 5\n          }\n        }, {\n          start: {\n            line: 13,\n            column: 4\n          },\n          end: {\n            line: 15,\n            column: 5\n          }\n        }],\n        line: 13\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 20,\n            column: 2\n          },\n          end: {\n            line: 22,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 20,\n            column: 2\n          },\n          end: {\n            line: 22,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 20,\n            column: 2\n          },\n          end: {\n            line: 22,\n            column: 3\n          }\n        }],\n        line: 20\n      },\n      \"4\": {\n        loc: {\n          start: {\n            line: 26,\n            column: 2\n          },\n          end: {\n            line: 29,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 26,\n            column: 2\n          },\n          end: {\n            line: 29,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 26,\n            column: 2\n          },\n          end: {\n            line: 29,\n            column: 3\n          }\n        }],\n        line: 26\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0,\n      \"9\": 0,\n      \"10\": 0,\n      \"11\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0],\n      \"4\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"6c6782323ee63349ff094d7e55ae465fed554fbc\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_1zri1bp9sn = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_1zri1bp9sn();\n// End Conditions\nexport function isWin(G) {\n  cov_1zri1bp9sn().f[0]++;\n  cov_1zri1bp9sn().s[0]++;\n\n  for (var i = (cov_1zri1bp9sn().s[1]++, 0); i < 5; i++) {\n    cov_1zri1bp9sn().s[2]++;\n\n    if (G.piles[i] === null) {\n      cov_1zri1bp9sn().b[0][0]++;\n      cov_1zri1bp9sn().s[3]++;\n      return false;\n    } else {\n      cov_1zri1bp9sn().b[0][1]++;\n    }\n\n    cov_1zri1bp9sn().s[4]++;\n\n    if (!(G.piles[i].length === 5)) {\n      cov_1zri1bp9sn().b[1][0]++;\n      cov_1zri1bp9sn().s[5]++;\n      return false;\n    } else {\n      cov_1zri1bp9sn().b[1][1]++;\n    }\n\n    cov_1zri1bp9sn().s[6]++;\n\n    if (i === 4) {\n      cov_1zri1bp9sn().b[2][0]++;\n      cov_1zri1bp9sn().s[7]++;\n      return true;\n    } else {\n      cov_1zri1bp9sn().b[2][1]++;\n    }\n  }\n}\nexport function isLose(G) {\n  cov_1zri1bp9sn().f[1]++;\n  cov_1zri1bp9sn().s[8]++;\n\n  if (G.countdown === 0) {\n    cov_1zri1bp9sn().b[3][0]++;\n    cov_1zri1bp9sn().s[9]++;\n    return true;\n  } else {\n    cov_1zri1bp9sn().b[3][1]++;\n  }\n}\nexport function isEnd(G, ctx) {\n  cov_1zri1bp9sn().f[2]++;\n  cov_1zri1bp9sn().s[10]++;\n\n  if (G.deckindex === -1 - ctx.numPlayers) {\n    cov_1zri1bp9sn().b[4][0]++;\n    cov_1zri1bp9sn().s[11]++;\n    return true; // Every player has made a move after the deck turned empty\n  } else {\n    cov_1zri1bp9sn().b[4][1]++;\n  }\n} // function getScore(G: IG): number {\n//   var score = 0\n//   for (var i = 0; i < 5 ; i++) {\n//     var cardsOnPile = G.piles[i].length \n//     score += G.piles[i][cardsOnPile - 1].value\n//   }\n// \n//   return score\n// }\n//","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/zooparade/endconditions.ts"],"names":["isWin","G","i","piles","length","isLose","countdown","isEnd","ctx","deckindex","numPlayers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA,OAAO,SAASA,KAAT,CAAeC,CAAf,EAAqB;AAAA;AAAA;;AAC1B,OAAK,IAAIC,CAAC,6BAAG,CAAH,CAAV,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAAA;;AAC3B,QAAKD,CAAC,CAACE,KAAF,CAAQD,CAAR,MAAe,IAApB,EAA2B;AAAA;AAAA;AACzB,aAAO,KAAP;AACD,KAFD;AAAA;AAAA;;AAD2B;;AAI3B,QAAK,EAAED,CAAC,CAACE,KAAF,CAAQD,CAAR,EAAWE,MAAX,KAAsB,CAAxB,CAAL,EAAiC;AAAA;AAAA;AAC/B,aAAO,KAAP;AACD,KAFD;AAAA;AAAA;;AAJ2B;;AAO3B,QAAKF,CAAC,KAAK,CAAX,EAAe;AAAA;AAAA;AACb,aAAO,IAAP;AACD,KAFD;AAAA;AAAA;AAGD;AACF;AAED,OAAO,SAASG,MAAT,CAAgBJ,CAAhB,EAAuB;AAAA;AAAA;;AAC5B,MAAIA,CAAC,CAACK,SAAF,KAAgB,CAApB,EAAuB;AAAA;AAAA;AACrB,WAAO,IAAP;AACD,GAFD;AAAA;AAAA;AAGD;AAED,OAAO,SAASC,KAAT,CAAeN,CAAf,EAAsBO,GAAtB,EAAqC;AAAA;AAAA;;AAC1C,MAAKP,CAAC,CAACQ,SAAF,KAAkB,CAAE,CAAF,GAAMD,GAAG,CAACE,UAAjC,EAA8C;AAAA;AAAA;AAC5C,WAAO,IAAP,CAD4C,CAE5C;AACD,GAHD;AAAA;AAAA;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { IG } from './interfaces';\nimport { IGameCtx } from 'boardgame.io/core';\n\n// End Conditions\nexport function isWin(G: IG){\n  for (var i = 0 ; i < 5; i++) {\n    if ( G.piles[i] === null ) {\n      return false\n    }\n    if ( !(G.piles[i].length === 5)) {\n      return false\n    }\n    if ( i === 4 ) {\n      return true\n    }\n  }\n} \n\nexport function isLose(G: IG) {\n  if (G.countdown === 0) {\n    return true\n  }\n}\n\nexport function isEnd(G: IG, ctx: IGameCtx) {\n  if ( G.deckindex === ( - 1 - ctx.numPlayers)) {\n    return true \n    // Every player has made a move after the deck turned empty\n  }\n}\n\n// function getScore(G: IG): number {\n//   var score = 0\n//   for (var i = 0; i < 5 ; i++) {\n//     var cardsOnPile = G.piles[i].length \n//     score += G.piles[i][cardsOnPile - 1].value\n//   }\n// \n//   return score\n// }\n// "]},"metadata":{},"sourceType":"module"}