{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction cov_1c5n4vot1n() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/common/ScoreBadges.tsx\";\n  var hash = \"c1d63696b11502af5434685f3430694c98e74e19\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/common/ScoreBadges.tsx\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 19,\n          column: 19\n        },\n        end: {\n          line: 52,\n          column: 6\n        }\n      },\n      \"1\": {\n        start: {\n          line: 20,\n          column: 23\n        },\n        end: {\n          line: 20,\n          column: 110\n        }\n      },\n      \"2\": {\n        start: {\n          line: 20,\n          column: 59\n        },\n        end: {\n          line: 20,\n          column: 104\n        }\n      },\n      \"3\": {\n        start: {\n          line: 21,\n          column: 21\n        },\n        end: {\n          line: 21,\n          column: 70\n        }\n      },\n      \"4\": {\n        start: {\n          line: 22,\n          column: 6\n        },\n        end: {\n          line: 51,\n          column: 8\n        }\n      },\n      \"5\": {\n        start: {\n          line: 53,\n          column: 4\n        },\n        end: {\n          line: 53,\n          column: 76\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 18,\n            column: 2\n          },\n          end: {\n            line: 18,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 18,\n            column: 11\n          },\n          end: {\n            line: 54,\n            column: 3\n          }\n        },\n        line: 18\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 19,\n            column: 45\n          },\n          end: {\n            line: 19,\n            column: 46\n          }\n        },\n        loc: {\n          start: {\n            line: 19,\n            column: 56\n          },\n          end: {\n            line: 52,\n            column: 5\n          }\n        },\n        line: 19\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 20,\n            column: 47\n          },\n          end: {\n            line: 20,\n            column: 48\n          }\n        },\n        loc: {\n          start: {\n            line: 20,\n            column: 59\n          },\n          end: {\n            line: 20,\n            column: 104\n          }\n        },\n        line: 20\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 26,\n            column: 32\n          },\n          end: {\n            line: 26,\n            column: 102\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 26,\n            column: 52\n          },\n          end: {\n            line: 26,\n            column: 92\n          }\n        }, {\n          start: {\n            line: 26,\n            column: 95\n          },\n          end: {\n            line: 26,\n            column: 102\n          }\n        }],\n        line: 26\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 33,\n            column: 25\n          },\n          end: {\n            line: 33,\n            column: 54\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 33,\n            column: 34\n          },\n          end: {\n            line: 33,\n            column: 42\n          }\n        }, {\n          start: {\n            line: 33,\n            column: 45\n          },\n          end: {\n            line: 33,\n            column: 54\n          }\n        }],\n        line: 33\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 36,\n            column: 15\n          },\n          end: {\n            line: 36,\n            column: 73\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 36,\n            column: 63\n          },\n          end: {\n            line: 36,\n            column: 68\n          }\n        }, {\n          start: {\n            line: 36,\n            column: 71\n          },\n          end: {\n            line: 36,\n            column: 73\n          }\n        }],\n        line: 36\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 44,\n            column: 25\n          },\n          end: {\n            line: 44,\n            column: 54\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 44,\n            column: 34\n          },\n          end: {\n            line: 44,\n            column: 42\n          }\n        }, {\n          start: {\n            line: 44,\n            column: 45\n          },\n          end: {\n            line: 44,\n            column: 54\n          }\n        }],\n        line: 44\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"c1d63696b11502af5434685f3430694c98e74e19\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_1c5n4vot1n = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_1c5n4vot1n();\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport css from './ScoreBadges.css';\nimport Typography from '@material-ui/core/Typography';\nimport { isPlayersTurn } from './GameUtil';\nexport var ScoreBadges = /*#__PURE__*/function (_React$Component) {\n  _inherits(ScoreBadges, _React$Component);\n\n  var _super = _createSuper(ScoreBadges);\n\n  function ScoreBadges() {\n    _classCallCheck(this, ScoreBadges);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ScoreBadges, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      cov_1c5n4vot1n().f[0]++;\n      var badges = (cov_1c5n4vot1n().s[0]++, this.props.scoreboard.map(function (score) {\n        cov_1c5n4vot1n().f[1]++;\n        var nickname = (cov_1c5n4vot1n().s[1]++, _this.props.players.find(function (player) {\n          cov_1c5n4vot1n().f[2]++;\n          cov_1c5n4vot1n().s[2]++;\n          return player.playerID.toString() === score.playerID;\n        }).name);\n        var isSelf = (cov_1c5n4vot1n().s[3]++, score.playerID.toString() === _this.props.playerID);\n        cov_1c5n4vot1n().s[4]++;\n        return __jsx(\"div\", {\n          className: css.ScoreBadge,\n          key: score.playerID,\n          style: {\n            borderColor: _this.props.colors ? (cov_1c5n4vot1n().b[0][0]++, _this.props.colors[score.playerID]) : (cov_1c5n4vot1n().b[0][1]++, 'white')\n          },\n          \"data-testid\": \"scorebadge-\".concat(score.playerID)\n        }, __jsx(\"span\", {\n          className: css.Nickname\n        }, __jsx(Typography, {\n          \"data-testid\": \"nickname-\".concat(score.playerID),\n          style: {\n            color: 'white'\n          },\n          className: isSelf ? (cov_1c5n4vot1n().b[1][0]++, css.Self) : (cov_1c5n4vot1n().b[1][1]++, undefined),\n          variant: \"body2\"\n        }, isPlayersTurn(score.playerID, _this.props.ctx) ? (cov_1c5n4vot1n().b[2][0]++, 'ðŸ•’ ') : (cov_1c5n4vot1n().b[2][1]++, ''), nickname)), __jsx(\"span\", null, __jsx(Typography, {\n          \"data-testid\": \"score-\".concat(score.playerID),\n          style: {\n            color: 'white'\n          },\n          className: isSelf ? (cov_1c5n4vot1n().b[3][0]++, css.Self) : (cov_1c5n4vot1n().b[3][1]++, undefined),\n          variant: \"body2\"\n        }, score.score)));\n      }));\n      cov_1c5n4vot1n().s[5]++;\n      return __jsx(\"div\", {\n        style: {\n          clear: 'left',\n          paddingTop: '8px'\n        }\n      }, badges);\n    }\n  }]);\n\n  return ScoreBadges;\n}((React.Component));","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/common/ScoreBadges.tsx"],"names":["React","css","Typography","isPlayersTurn","ScoreBadges","badges","props","scoreboard","map","score","nickname","players","find","player","playerID","toString","name","isSelf","ScoreBadge","borderColor","colors","Nickname","color","Self","undefined","ctx","clear","paddingTop","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,SAASC,aAAT,QAA8B,YAA9B;AAUA,WAAaC,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACW;AAAA;;AAAA;AACP,UAAMC,MAAM,6BAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,GAAtB,CAA0B,UAACC,KAAD,EAAW;AAAA;AAClD,YAAMC,QAAQ,6BAAG,KAAI,CAACJ,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwB,UAACC,MAAD,EAAY;AAAA;AAAA;AAAA,iBAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,OAA+BN,KAAK,CAACK,QAArC;AAA6C,SAAjF,EAAmFE,IAAtF,CAAd;AACA,YAAMC,MAAM,6BAAGR,KAAK,CAACK,QAAN,CAAeC,QAAf,OAA8B,KAAI,CAACT,KAAL,CAAWQ,QAA5C,CAAZ;AAFkD;AAGlD,eACE;AACE,UAAA,SAAS,EAAEb,GAAG,CAACiB,UADjB;AAEE,UAAA,GAAG,EAAET,KAAK,CAACK,QAFb;AAGE,UAAA,KAAK,EAAE;AAAEK,YAAAA,WAAW,EAAE,KAAI,CAACb,KAAL,CAAWc,MAAX,gCAAoB,KAAI,CAACd,KAAL,CAAWc,MAAX,CAAkBX,KAAK,CAACK,QAAxB,CAApB,iCAA+D,OAA/D;AAAf,WAHT;AAIE,8CAA2BL,KAAK,CAACK,QAAjC;AAJF,WAME;AAAM,UAAA,SAAS,EAAEb,GAAG,CAACoB;AAArB,WACE,MAAC,UAAD;AACE,4CAAyBZ,KAAK,CAACK,QAA/B,CADF;AAEE,UAAA,KAAK,EAAE;AAAEQ,YAAAA,KAAK,EAAE;AAAT,WAFT;AAGE,UAAA,SAAS,EAAEL,MAAM,gCAAGhB,GAAG,CAACsB,IAAP,iCAAcC,SAAd,CAHnB;AAIE,UAAA,OAAO,EAAC;AAJV,WAMGrB,aAAa,CAACM,KAAK,CAACK,QAAP,EAAiB,KAAI,CAACR,KAAL,CAAWmB,GAA5B,CAAb,gCAAgD,KAAhD,iCAAwD,EAAxD,CANH,EAOGf,QAPH,CADF,CANF,EAiBE,oBACE,MAAC,UAAD;AACE,yCAAsBD,KAAK,CAACK,QAA5B,CADF;AAEE,UAAA,KAAK,EAAE;AAAEQ,YAAAA,KAAK,EAAE;AAAT,WAFT;AAGE,UAAA,SAAS,EAAEL,MAAM,gCAAGhB,GAAG,CAACsB,IAAP,iCAAcC,SAAd,CAHnB;AAIE,UAAA,OAAO,EAAC;AAJV,WAMGf,KAAK,CAACA,KANT,CADF,CAjBF,CADF;AA8BD,OAjCc,CAAH,CAAZ;AADO;AAmCP,aAAO;AAAK,QAAA,KAAK,EAAE;AAAEiB,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,UAAU,EAAE;AAA7B;AAAZ,SAAmDtB,MAAnD,CAAP;AACD;AArCH;;AAAA;AAAA,GAAiCL,KAAK,CAAC4B,SAAvC","sourcesContent":["import * as React from 'react';\nimport { IScore } from './Scoreboard';\nimport { IPlayerInRoom } from 'components/App/Lobby/LobbyService';\nimport css from './ScoreBadges.css';\nimport Typography from '@material-ui/core/Typography';\nimport { IGameCtx } from 'boardgame.io/core';\nimport { isPlayersTurn } from './GameUtil';\n\ninterface IScoreBadgesProps {\n  scoreboard: IScore[];\n  players: IPlayerInRoom[];\n  playerID: string;\n  colors?: string[];\n  ctx: IGameCtx;\n}\n\nexport class ScoreBadges extends React.Component<IScoreBadgesProps, {}> {\n  render() {\n    const badges = this.props.scoreboard.map((score) => {\n      const nickname = this.props.players.find((player) => player.playerID.toString() === score.playerID).name;\n      const isSelf = score.playerID.toString() === this.props.playerID;\n      return (\n        <div\n          className={css.ScoreBadge}\n          key={score.playerID}\n          style={{ borderColor: this.props.colors ? this.props.colors[score.playerID as any] : 'white' }}\n          data-testid={`scorebadge-${score.playerID}`}\n        >\n          <span className={css.Nickname}>\n            <Typography\n              data-testid={`nickname-${score.playerID}`}\n              style={{ color: 'white' }}\n              className={isSelf ? css.Self : undefined}\n              variant=\"body2\"\n            >\n              {isPlayersTurn(score.playerID, this.props.ctx) ? 'ðŸ•’ ' : ''}\n              {nickname}\n            </Typography>\n          </span>\n          <span>\n            <Typography\n              data-testid={`score-${score.playerID}`}\n              style={{ color: 'white' }}\n              className={isSelf ? css.Self : undefined}\n              variant=\"body2\"\n            >\n              {score.score}\n            </Typography>\n          </span>\n        </div>\n      );\n    });\n    return <div style={{ clear: 'left', paddingTop: '8px' }}>{badges}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}