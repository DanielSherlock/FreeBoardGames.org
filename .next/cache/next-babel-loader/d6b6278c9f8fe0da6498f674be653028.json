{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction cov_1bki2n93fn() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/common/Checkerboard.tsx\";\n  var hash = \"e1aa0d16c3c9ac3dc2fff2925ddbcee354b9e14a\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/common/Checkerboard.tsx\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 35,\n          column: 17\n        },\n        end: {\n          line: 35,\n          column: 18\n        }\n      },\n      \"1\": {\n        start: {\n          line: 36,\n          column: 17\n        },\n        end: {\n          line: 36,\n          column: 18\n        }\n      },\n      \"2\": {\n        start: {\n          line: 63,\n          column: 24\n        },\n        end: {\n          line: 69,\n          column: 3\n        }\n      },\n      \"3\": {\n        start: {\n          line: 70,\n          column: 13\n        },\n        end: {\n          line: 70,\n          column: 36\n        }\n      },\n      \"4\": {\n        start: {\n          line: 73,\n          column: 21\n        },\n        end: {\n          line: 73,\n          column: 27\n        }\n      },\n      \"5\": {\n        start: {\n          line: 74,\n          column: 4\n        },\n        end: {\n          line: 74,\n          column: 82\n        }\n      },\n      \"6\": {\n        start: {\n          line: 79,\n          column: 19\n        },\n        end: {\n          line: 87,\n          column: 6\n        }\n      },\n      \"7\": {\n        start: {\n          line: 80,\n          column: 6\n        },\n        end: {\n          line: 86,\n          column: 7\n        }\n      },\n      \"8\": {\n        start: {\n          line: 81,\n          column: 23\n        },\n        end: {\n          line: 81,\n          column: 41\n        }\n      },\n      \"9\": {\n        start: {\n          line: 82,\n          column: 25\n        },\n        end: {\n          line: 82,\n          column: 72\n        }\n      },\n      \"10\": {\n        start: {\n          line: 83,\n          column: 8\n        },\n        end: {\n          line: 83,\n          column: 51\n        }\n      },\n      \"11\": {\n        start: {\n          line: 85,\n          column: 8\n        },\n        end: {\n          line: 85,\n          column: 116\n        }\n      },\n      \"12\": {\n        start: {\n          line: 90,\n          column: 21\n        },\n        end: {\n          line: 90,\n          column: 36\n        }\n      },\n      \"13\": {\n        start: {\n          line: 91,\n          column: 4\n        },\n        end: {\n          line: 100,\n          column: 5\n        }\n      },\n      \"14\": {\n        start: {\n          line: 91,\n          column: 17\n        },\n        end: {\n          line: 91,\n          column: 18\n        }\n      },\n      \"15\": {\n        start: {\n          line: 92,\n          column: 6\n        },\n        end: {\n          line: 99,\n          column: 7\n        }\n      },\n      \"16\": {\n        start: {\n          line: 92,\n          column: 19\n        },\n        end: {\n          line: 92,\n          column: 20\n        }\n      },\n      \"17\": {\n        start: {\n          line: 93,\n          column: 20\n        },\n        end: {\n          line: 93,\n          column: 31\n        }\n      },\n      \"18\": {\n        start: {\n          line: 94,\n          column: 20\n        },\n        end: {\n          line: 94,\n          column: 45\n        }\n      },\n      \"19\": {\n        start: {\n          line: 95,\n          column: 8\n        },\n        end: {\n          line: 97,\n          column: 9\n        }\n      },\n      \"20\": {\n        start: {\n          line: 96,\n          column: 10\n        },\n        end: {\n          line: 96,\n          column: 42\n        }\n      },\n      \"21\": {\n        start: {\n          line: 98,\n          column: 8\n        },\n        end: {\n          line: 98,\n          column: 30\n        }\n      },\n      \"22\": {\n        start: {\n          line: 103,\n          column: 4\n        },\n        end: {\n          line: 107,\n          column: 5\n        }\n      },\n      \"23\": {\n        start: {\n          line: 104,\n          column: 23\n        },\n        end: {\n          line: 104,\n          column: 70\n        }\n      },\n      \"24\": {\n        start: {\n          line: 105,\n          column: 18\n        },\n        end: {\n          line: 105,\n          column: 29\n        }\n      },\n      \"25\": {\n        start: {\n          line: 106,\n          column: 6\n        },\n        end: {\n          line: 106,\n          column: 60\n        }\n      },\n      \"26\": {\n        start: {\n          line: 109,\n          column: 4\n        },\n        end: {\n          line: 113,\n          column: 6\n        }\n      },\n      \"27\": {\n        start: {\n          line: 122,\n          column: 17\n        },\n        end: {\n          line: 122,\n          column: 38\n        }\n      },\n      \"28\": {\n        start: {\n          line: 123,\n          column: 16\n        },\n        end: {\n          line: 123,\n          column: 35\n        }\n      },\n      \"29\": {\n        start: {\n          line: 124,\n          column: 2\n        },\n        end: {\n          line: 126,\n          column: 3\n        }\n      },\n      \"30\": {\n        start: {\n          line: 125,\n          column: 4\n        },\n        end: {\n          line: 125,\n          column: 54\n        }\n      },\n      \"31\": {\n        start: {\n          line: 127,\n          column: 20\n        },\n        end: {\n          line: 127,\n          column: 42\n        }\n      },\n      \"32\": {\n        start: {\n          line: 128,\n          column: 14\n        },\n        end: {\n          line: 128,\n          column: 57\n        }\n      },\n      \"33\": {\n        start: {\n          line: 129,\n          column: 14\n        },\n        end: {\n          line: 129,\n          column: 36\n        }\n      },\n      \"34\": {\n        start: {\n          line: 130,\n          column: 2\n        },\n        end: {\n          line: 134,\n          column: 3\n        }\n      },\n      \"35\": {\n        start: {\n          line: 131,\n          column: 4\n        },\n        end: {\n          line: 131,\n          column: 49\n        }\n      },\n      \"36\": {\n        start: {\n          line: 133,\n          column: 4\n        },\n        end: {\n          line: 133,\n          column: 41\n        }\n      },\n      \"37\": {\n        start: {\n          line: 142,\n          column: 2\n        },\n        end: {\n          line: 148,\n          column: 3\n        }\n      },\n      \"38\": {\n        start: {\n          line: 143,\n          column: 22\n        },\n        end: {\n          line: 143,\n          column: 79\n        }\n      },\n      \"39\": {\n        start: {\n          line: 144,\n          column: 4\n        },\n        end: {\n          line: 144,\n          column: 31\n        }\n      },\n      \"40\": {\n        start: {\n          line: 146,\n          column: 22\n        },\n        end: {\n          line: 146,\n          column: 64\n        }\n      },\n      \"41\": {\n        start: {\n          line: 147,\n          column: 4\n        },\n        end: {\n          line: 147,\n          column: 38\n        }\n      },\n      \"42\": {\n        start: {\n          line: 152,\n          column: 2\n        },\n        end: {\n          line: 154,\n          column: 3\n        }\n      },\n      \"43\": {\n        start: {\n          line: 153,\n          column: 4\n        },\n        end: {\n          line: 153,\n          column: 68\n        }\n      },\n      \"44\": {\n        start: {\n          line: 155,\n          column: 2\n        },\n        end: {\n          line: 155,\n          column: 15\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 72,\n            column: 2\n          },\n          end: {\n            line: 72,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 72,\n            column: 36\n          },\n          end: {\n            line: 75,\n            column: 3\n          }\n        },\n        line: 72\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 77,\n            column: 2\n          },\n          end: {\n            line: 77,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 77,\n            column: 11\n          },\n          end: {\n            line: 114,\n            column: 3\n          }\n        },\n        line: 77\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 79,\n            column: 59\n          },\n          end: {\n            line: 79,\n            column: 60\n          }\n        },\n        loc: {\n          start: {\n            line: 79,\n            column: 75\n          },\n          end: {\n            line: 87,\n            column: 5\n          }\n        },\n        line: 79\n      },\n      \"3\": {\n        name: \"algebraicToCartesian\",\n        decl: {\n          start: {\n            line: 121,\n            column: 16\n          },\n          end: {\n            line: 121,\n            column: 36\n          }\n        },\n        loc: {\n          start: {\n            line: 121,\n            column: 71\n          },\n          end: {\n            line: 135,\n            column: 1\n          }\n        },\n        line: 121\n      },\n      \"4\": {\n        name: \"cartesianToAlgebraic\",\n        decl: {\n          start: {\n            line: 141,\n            column: 16\n          },\n          end: {\n            line: 141,\n            column: 36\n          }\n        },\n        loc: {\n          start: {\n            line: 141,\n            column: 77\n          },\n          end: {\n            line: 149,\n            column: 1\n          }\n        },\n        line: 141\n      },\n      \"5\": {\n        name: \"applyInvertion\",\n        decl: {\n          start: {\n            line: 151,\n            column: 16\n          },\n          end: {\n            line: 151,\n            column: 30\n          }\n        },\n        loc: {\n          start: {\n            line: 151,\n            column: 73\n          },\n          end: {\n            line: 156,\n            column: 1\n          }\n        },\n        line: 151\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 80,\n            column: 6\n          },\n          end: {\n            line: 86,\n            column: 7\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 80,\n            column: 6\n          },\n          end: {\n            line: 86,\n            column: 7\n          }\n        }, {\n          start: {\n            line: 80,\n            column: 6\n          },\n          end: {\n            line: 86,\n            column: 7\n          }\n        }],\n        line: 80\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 95,\n            column: 8\n          },\n          end: {\n            line: 97,\n            column: 9\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 95,\n            column: 8\n          },\n          end: {\n            line: 97,\n            column: 9\n          }\n        }, {\n          start: {\n            line: 95,\n            column: 8\n          },\n          end: {\n            line: 97,\n            column: 9\n          }\n        }],\n        line: 95\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 124,\n            column: 2\n          },\n          end: {\n            line: 126,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 124,\n            column: 2\n          },\n          end: {\n            line: 126,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 124,\n            column: 2\n          },\n          end: {\n            line: 126,\n            column: 3\n          }\n        }],\n        line: 124\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 130,\n            column: 2\n          },\n          end: {\n            line: 134,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 130,\n            column: 2\n          },\n          end: {\n            line: 134,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 130,\n            column: 2\n          },\n          end: {\n            line: 134,\n            column: 3\n          }\n        }],\n        line: 130\n      },\n      \"4\": {\n        loc: {\n          start: {\n            line: 142,\n            column: 2\n          },\n          end: {\n            line: 148,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 142,\n            column: 2\n          },\n          end: {\n            line: 148,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 142,\n            column: 2\n          },\n          end: {\n            line: 148,\n            column: 3\n          }\n        }],\n        line: 142\n      },\n      \"5\": {\n        loc: {\n          start: {\n            line: 152,\n            column: 2\n          },\n          end: {\n            line: 154,\n            column: 3\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 152,\n            column: 2\n          },\n          end: {\n            line: 154,\n            column: 3\n          }\n        }, {\n          start: {\n            line: 152,\n            column: 2\n          },\n          end: {\n            line: 154,\n            column: 3\n          }\n        }],\n        line: 152\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0,\n      \"9\": 0,\n      \"10\": 0,\n      \"11\": 0,\n      \"12\": 0,\n      \"13\": 0,\n      \"14\": 0,\n      \"15\": 0,\n      \"16\": 0,\n      \"17\": 0,\n      \"18\": 0,\n      \"19\": 0,\n      \"20\": 0,\n      \"21\": 0,\n      \"22\": 0,\n      \"23\": 0,\n      \"24\": 0,\n      \"25\": 0,\n      \"26\": 0,\n      \"27\": 0,\n      \"28\": 0,\n      \"29\": 0,\n      \"30\": 0,\n      \"31\": 0,\n      \"32\": 0,\n      \"33\": 0,\n      \"34\": 0,\n      \"35\": 0,\n      \"36\": 0,\n      \"37\": 0,\n      \"38\": 0,\n      \"39\": 0,\n      \"40\": 0,\n      \"41\": 0,\n      \"42\": 0,\n      \"43\": 0,\n      \"44\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0],\n      \"4\": [0, 0],\n      \"5\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"e1aa0d16c3c9ac3dc2fff2925ddbcee354b9e14a\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_1bki2n93fn = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_1bki2n93fn();\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/*\n * Copyright 2018 The @freeboardgame.org/boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\nimport React from 'react';\nimport { Grid } from 'ui';\n/**\n * Checkerboard\n *\n * Component that will show a configurable checker board for games like\n * chess, checkers and others. The vertical columns of squares are labeled\n * with letters from a to z, while the rows are labeled with numbers, starting\n * with 1.\n *\n * Props:\n *   onClick - On Click Callback, (row, col) of the square passed as argument.\n *   primaryColor - Primary color, #d18b47 by default.\n *   secondaryColor - Secondary color, #ffce9e by default.\n *   colorMap - Object of object having cell names as key and colors as values.\n *   Ex: { 'c5': 'red' } colors cells c5 with red.\n *\n * Usage:\n *\n * <Checkerboard>\n *   <Token square={'c5'}>\n *     <Knight color='dark' />\n *   </Token>\n * </Checkerboard>\n */\n\nvar NUM_COLS = (cov_1bki2n93fn().s[0]++, 8);\nvar NUM_ROWS = (cov_1bki2n93fn().s[1]++, 8);\nexport var Checkerboard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Checkerboard, _React$Component);\n\n  var _super = _createSuper(Checkerboard);\n\n  function Checkerboard() {\n    var _this;\n\n    _classCallCheck(this, Checkerboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_onClick\", (cov_1bki2n93fn().s[3]++, _this.onClick.bind(_assertThisInitialized(_this))));\n\n    return _this;\n  }\n\n  _createClass(Checkerboard, [{\n    key: \"onClick\",\n    value: function onClick(coords) {\n      cov_1bki2n93fn().f[0]++;\n\n      var _ref = (cov_1bki2n93fn().s[4]++, coords),\n          x = _ref.x,\n          y = _ref.y;\n\n      cov_1bki2n93fn().s[5]++;\n      this.props.onClick({\n        square: cartesianToAlgebraic(x, y, this.props.invert)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      cov_1bki2n93fn().f[1]++;\n      // Convert the square=\"\" prop to x and y.\n      var tokens = (cov_1bki2n93fn().s[6]++, React.Children.map(this.props.children, function (child) {\n        cov_1bki2n93fn().f[2]++;\n        cov_1bki2n93fn().s[7]++;\n\n        if (child.props.square) {\n          cov_1bki2n93fn().b[0][0]++;\n          var square = (cov_1bki2n93fn().s[8]++, child.props.square);\n\n          var _ref2 = (cov_1bki2n93fn().s[9]++, algebraicToCartesian(square, _this2.props.invert)),\n              x = _ref2.x,\n              y = _ref2.y;\n\n          cov_1bki2n93fn().s[10]++;\n          return React.cloneElement(child, {\n            x: x,\n            y: y\n          });\n        } else {\n          cov_1bki2n93fn().b[0][1]++;\n          cov_1bki2n93fn().s[11]++;\n          return React.cloneElement(child, applyInvertion({\n            x: child.props.x,\n            y: child.props.y\n          }, _this2.props.invert));\n        }\n      })); // Build colorMap with checkerboard pattern.\n\n      var colorMap = (cov_1bki2n93fn().s[12]++, {});\n      cov_1bki2n93fn().s[13]++;\n\n      for (var x = (cov_1bki2n93fn().s[14]++, 0); x < NUM_COLS; x++) {\n        cov_1bki2n93fn().s[15]++;\n\n        for (var y = (cov_1bki2n93fn().s[16]++, 0); y < NUM_ROWS; y++) {\n          var _key2 = (cov_1bki2n93fn().s[17]++, \"\".concat(x, \",\").concat(y));\n\n          var color = (cov_1bki2n93fn().s[18]++, this.props.secondaryColor);\n          cov_1bki2n93fn().s[19]++;\n\n          if ((x + y) % 2 === 0) {\n            cov_1bki2n93fn().b[1][0]++;\n            cov_1bki2n93fn().s[20]++;\n            color = this.props.primaryColor;\n          } else {\n            cov_1bki2n93fn().b[1][1]++;\n          }\n\n          cov_1bki2n93fn().s[21]++;\n          colorMap[_key2] = color;\n        }\n      } // Add highlighted squares.\n\n\n      cov_1bki2n93fn().s[22]++;\n\n      for (var _i = 0, _Object$keys = Object.keys(this.props.highlightedSquares); _i < _Object$keys.length; _i++) {\n        var square = _Object$keys[_i];\n\n        var _ref3 = (cov_1bki2n93fn().s[23]++, algebraicToCartesian(square, this.props.invert)),\n            _x = _ref3.x,\n            _y = _ref3.y;\n\n        var _key3 = (cov_1bki2n93fn().s[24]++, \"\".concat(_x, \",\").concat(_y));\n\n        cov_1bki2n93fn().s[25]++;\n        colorMap[_key3] = this.props.highlightedSquares[square];\n      }\n\n      cov_1bki2n93fn().s[26]++;\n      return __jsx(Grid, {\n        rows: NUM_ROWS,\n        cols: NUM_COLS,\n        style: this.props.style,\n        onClick: this._onClick,\n        colorMap: colorMap\n      }, tokens);\n    }\n  }]);\n\n  return Checkerboard;\n}((React.Component));\n/**\n * Given an algebraic notation, returns x and y values.\n * Example: A1 returns { x: 0, y: 0 }\n */\n\n_defineProperty(Checkerboard, \"defaultProps\", (cov_1bki2n93fn().s[2]++, {\n  invert: false,\n  primaryColor: '#ffce9e',\n  secondaryColor: '#d18b47',\n  highlightedSquares: {},\n  style: {}\n}));\n\nexport function algebraicToCartesian(square, invert) {\n  cov_1bki2n93fn().f[3]++;\n  var regexp = (cov_1bki2n93fn().s[27]++, /([A-Za-z])([0-9]+)/g);\n  var match = (cov_1bki2n93fn().s[28]++, regexp.exec(square));\n  cov_1bki2n93fn().s[29]++;\n\n  if (match == null) {\n    cov_1bki2n93fn().b[2][0]++;\n    cov_1bki2n93fn().s[30]++;\n    throw Error('Invalid square provided: ' + square);\n  } else {\n    cov_1bki2n93fn().b[2][1]++;\n  }\n\n  var colSymbol = (cov_1bki2n93fn().s[31]++, match[1].toLowerCase());\n  var col = (cov_1bki2n93fn().s[32]++, colSymbol.charCodeAt(0) - 'a'.charCodeAt(0));\n  var row = (cov_1bki2n93fn().s[33]++, parseInt(match[2], 10));\n  cov_1bki2n93fn().s[34]++;\n\n  if (invert) {\n    cov_1bki2n93fn().b[3][0]++;\n    cov_1bki2n93fn().s[35]++;\n    return {\n      x: NUM_COLS - col - 1,\n      y: row - 1\n    };\n  } else {\n    cov_1bki2n93fn().b[3][1]++;\n    cov_1bki2n93fn().s[36]++;\n    return {\n      x: col,\n      y: NUM_ROWS - row\n    };\n  }\n}\n/**\n * Given an x and y values, returns algebraic notation.\n * Example: 0, 0 returns A1\n */\n\nexport function cartesianToAlgebraic(x, y, invert) {\n  cov_1bki2n93fn().f[4]++;\n  cov_1bki2n93fn().s[37]++;\n\n  if (invert) {\n    cov_1bki2n93fn().b[4][0]++;\n    var colSymbol = (cov_1bki2n93fn().s[38]++, String.fromCharCode(NUM_COLS - x - 1 + 'a'.charCodeAt(0)));\n    cov_1bki2n93fn().s[39]++;\n    return colSymbol + (y + 1);\n  } else {\n    cov_1bki2n93fn().b[4][1]++;\n\n    var _colSymbol = (cov_1bki2n93fn().s[40]++, String.fromCharCode(x + 'a'.charCodeAt(0)));\n\n    cov_1bki2n93fn().s[41]++;\n    return _colSymbol + (NUM_ROWS - y);\n  }\n}\nexport function applyInvertion(coord, invert) {\n  cov_1bki2n93fn().f[5]++;\n  cov_1bki2n93fn().s[42]++;\n\n  if (invert) {\n    cov_1bki2n93fn().b[5][0]++;\n    cov_1bki2n93fn().s[43]++;\n    return {\n      x: NUM_COLS - coord.x - 1,\n      y: NUM_ROWS - coord.y - 1\n    };\n  } else {\n    cov_1bki2n93fn().b[5][1]++;\n  }\n\n  cov_1bki2n93fn().s[44]++;\n  return coord;\n}","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/common/Checkerboard.tsx"],"names":["React","Grid","NUM_COLS","NUM_ROWS","Checkerboard","onClick","bind","coords","x","y","props","square","cartesianToAlgebraic","invert","tokens","Children","map","children","child","algebraicToCartesian","cloneElement","applyInvertion","colorMap","key","color","secondaryColor","primaryColor","Object","keys","highlightedSquares","style","_onClick","Component","regexp","match","exec","Error","colSymbol","toLowerCase","col","charCodeAt","row","parseInt","String","fromCharCode","coord"],"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","sourcesContent":["/*\n * Copyright 2018 The @freeboardgame.org/boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from 'react';\nimport { Grid } from 'ui';\n\n/**\n * Checkerboard\n *\n * Component that will show a configurable checker board for games like\n * chess, checkers and others. The vertical columns of squares are labeled\n * with letters from a to z, while the rows are labeled with numbers, starting\n * with 1.\n *\n * Props:\n *   onClick - On Click Callback, (row, col) of the square passed as argument.\n *   primaryColor - Primary color, #d18b47 by default.\n *   secondaryColor - Secondary color, #ffce9e by default.\n *   colorMap - Object of object having cell names as key and colors as values.\n *   Ex: { 'c5': 'red' } colors cells c5 with red.\n *\n * Usage:\n *\n * <Checkerboard>\n *   <Token square={'c5'}>\n *     <Knight color='dark' />\n *   </Token>\n * </Checkerboard>\n */\nconst NUM_COLS = 8;\nconst NUM_ROWS = 8;\nexport interface IAlgebraicCoords {\n  square: string;\n}\nexport interface ICartesianCoords {\n  x: number;\n  y: number;\n}\nexport interface IOnDragData {\n  x: number;\n  y: number;\n  originalX: number;\n  originalY: number;\n}\nexport interface IColorMap {\n  [key: string]: string;\n}\ninterface ICheckerboardProps {\n  onClick: (coords: ICartesianCoords) => void;\n  invert: boolean;\n  primaryColor: string;\n  secondaryColor: string;\n  highlightedSquares: IColorMap;\n  style: React.CSSProperties;\n  children?: any;\n}\nexport class Checkerboard extends React.Component<any, any> {\n  static defaultProps = {\n    invert: false,\n    primaryColor: '#ffce9e',\n    secondaryColor: '#d18b47',\n    highlightedSquares: {},\n    style: {},\n  };\n  _onClick = this.onClick.bind(this);\n\n  onClick(coords: ICartesianCoords) {\n    const { x, y } = coords;\n    this.props.onClick({ square: cartesianToAlgebraic(x, y, this.props.invert) });\n  }\n\n  render() {\n    // Convert the square=\"\" prop to x and y.\n    const tokens = React.Children.map(this.props.children, (child: any) => {\n      if (child.props.square) {\n        const square = child.props.square;\n        const { x, y } = algebraicToCartesian(square, this.props.invert);\n        return React.cloneElement(child, { x, y });\n      } else {\n        return React.cloneElement(child, applyInvertion({ x: child.props.x, y: child.props.y }, this.props.invert));\n      }\n    });\n\n    // Build colorMap with checkerboard pattern.\n    const colorMap = {} as IColorMap;\n    for (let x = 0; x < NUM_COLS; x++) {\n      for (let y = 0; y < NUM_ROWS; y++) {\n        const key = `${x},${y}`;\n        let color = this.props.secondaryColor;\n        if ((x + y) % 2 === 0) {\n          color = this.props.primaryColor;\n        }\n        colorMap[key] = color;\n      }\n    }\n\n    // Add highlighted squares.\n    for (const square of Object.keys(this.props.highlightedSquares)) {\n      const { x, y } = algebraicToCartesian(square, this.props.invert);\n      const key = `${x},${y}`;\n      colorMap[key] = this.props.highlightedSquares[square];\n    }\n\n    return (\n      <Grid rows={NUM_ROWS} cols={NUM_COLS} style={this.props.style} onClick={this._onClick} colorMap={colorMap}>\n        {tokens}\n      </Grid>\n    );\n  }\n}\n\n/**\n * Given an algebraic notation, returns x and y values.\n * Example: A1 returns { x: 0, y: 0 }\n */\nexport function algebraicToCartesian(square: string, invert?: boolean) {\n  const regexp = /([A-Za-z])([0-9]+)/g;\n  const match = regexp.exec(square);\n  if (match == null) {\n    throw Error('Invalid square provided: ' + square);\n  }\n  const colSymbol = match[1].toLowerCase();\n  const col = colSymbol.charCodeAt(0) - 'a'.charCodeAt(0);\n  const row = parseInt(match[2], 10);\n  if (invert) {\n    return { x: NUM_COLS - col - 1, y: row - 1 };\n  } else {\n    return { x: col, y: NUM_ROWS - row };\n  }\n}\n\n/**\n * Given an x and y values, returns algebraic notation.\n * Example: 0, 0 returns A1\n */\nexport function cartesianToAlgebraic(x: number, y: number, invert?: boolean) {\n  if (invert) {\n    const colSymbol = String.fromCharCode(NUM_COLS - x - 1 + 'a'.charCodeAt(0));\n    return colSymbol + (y + 1);\n  } else {\n    const colSymbol = String.fromCharCode(x + 'a'.charCodeAt(0));\n    return colSymbol + (NUM_ROWS - y);\n  }\n}\n\nexport function applyInvertion(coord: ICartesianCoords, invert: boolean) {\n  if (invert) {\n    return { x: NUM_COLS - coord.x - 1, y: NUM_ROWS - coord.y - 1 };\n  }\n  return coord;\n}\n"]},"metadata":{},"sourceType":"module"}