{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction cov_2gzkfuakie() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/common/Scoreboard.tsx\";\n  var hash = \"b37d2b14dcc6b9d943ead718f6eaa99871a3b5f4\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/common/Scoreboard.tsx\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 24,\n          column: 4\n        },\n        end: {\n          line: 54,\n          column: 6\n        }\n      },\n      \"1\": {\n        start: {\n          line: 36,\n          column: 26\n        },\n        end: {\n          line: 36,\n          column: 28\n        }\n      },\n      \"2\": {\n        start: {\n          line: 37,\n          column: 14\n        },\n        end: {\n          line: 41,\n          column: 15\n        }\n      },\n      \"3\": {\n        start: {\n          line: 38,\n          column: 16\n        },\n        end: {\n          line: 40,\n          column: 18\n        }\n      },\n      \"4\": {\n        start: {\n          line: 42,\n          column: 27\n        },\n        end: {\n          line: 42,\n          column: 114\n        }\n      },\n      \"5\": {\n        start: {\n          line: 42,\n          column: 63\n        },\n        end: {\n          line: 42,\n          column: 108\n        }\n      },\n      \"6\": {\n        start: {\n          line: 43,\n          column: 14\n        },\n        end: {\n          line: 49,\n          column: 16\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 23,\n            column: 2\n          },\n          end: {\n            line: 23,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 23,\n            column: 11\n          },\n          end: {\n            line: 55,\n            column: 3\n          }\n        },\n        line: 23\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 35,\n            column: 39\n          },\n          end: {\n            line: 35,\n            column: 40\n          }\n        },\n        loc: {\n          start: {\n            line: 35,\n            column: 53\n          },\n          end: {\n            line: 50,\n            column: 13\n          }\n        },\n        line: 35\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 42,\n            column: 51\n          },\n          end: {\n            line: 42,\n            column: 52\n          }\n        },\n        loc: {\n          start: {\n            line: 42,\n            column: 63\n          },\n          end: {\n            line: 42,\n            column: 108\n          }\n        },\n        line: 42\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 31,\n            column: 26\n          },\n          end: {\n            line: 31,\n            column: 57\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 31,\n            column: 26\n          },\n          end: {\n            line: 31,\n            column: 46\n          }\n        }, {\n          start: {\n            line: 31,\n            column: 50\n          },\n          end: {\n            line: 31,\n            column: 57\n          }\n        }],\n        line: 31\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 37,\n            column: 14\n          },\n          end: {\n            line: 41,\n            column: 15\n          }\n        },\n        type: \"if\",\n        locations: [{\n          start: {\n            line: 37,\n            column: 14\n          },\n          end: {\n            line: 41,\n            column: 15\n          }\n        }, {\n          start: {\n            line: 37,\n            column: 14\n          },\n          end: {\n            line: 41,\n            column: 15\n          }\n        }],\n        line: 37\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"b37d2b14dcc6b9d943ead718f6eaa99871a3b5f4\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_2gzkfuakie = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_2gzkfuakie();\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport grey from '@material-ui/core/colors/grey';\nexport var Scoreboard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Scoreboard, _React$Component);\n\n  var _super = _createSuper(Scoreboard);\n\n  function Scoreboard() {\n    _classCallCheck(this, Scoreboard);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Scoreboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      cov_2gzkfuakie().f[0]++;\n      cov_2gzkfuakie().s[0]++;\n      return __jsx(\"div\", {\n        className: \"scoreboard\"\n      }, __jsx(Table, null, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Rank\"), __jsx(TableCell, null, \"Player\"), __jsx(TableCell, null, (cov_2gzkfuakie().b[0][0]++, this.props.scoreName) || (cov_2gzkfuakie().b[0][1]++, 'Score')))), __jsx(TableBody, null, this.props.scoreboard.map(function (score, i) {\n        cov_2gzkfuakie().f[1]++;\n        var style = (cov_2gzkfuakie().s[1]++, {});\n        cov_2gzkfuakie().s[2]++;\n\n        if (score.playerID.toString() === _this.props.playerID) {\n          cov_2gzkfuakie().b[1][0]++;\n          cov_2gzkfuakie().s[3]++;\n          style = {\n            background: grey[200]\n          };\n        } else {\n          cov_2gzkfuakie().b[1][1]++;\n        }\n\n        var name = (cov_2gzkfuakie().s[4]++, _this.props.players.find(function (player) {\n          cov_2gzkfuakie().f[2]++;\n          cov_2gzkfuakie().s[5]++;\n          return player.playerID.toString() === score.playerID;\n        }).name);\n        cov_2gzkfuakie().s[6]++;\n        return __jsx(TableRow, {\n          key: score.playerID,\n          style: style\n        }, __jsx(TableCell, null, \"#\", i + 1), __jsx(TableCell, null, name), __jsx(TableCell, null, score.score));\n      }))));\n    }\n  }]);\n\n  return Scoreboard;\n}((React.Component));","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/common/Scoreboard.tsx"],"names":["React","Table","TableRow","TableHead","TableBody","TableCell","grey","Scoreboard","props","scoreName","scoreboard","map","score","i","style","playerID","toString","background","name","players","find","player","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AAeA,WAAaC,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACW;AAAA;;AAAA;AAAA;AACP,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,KAAD,QACE,MAAC,SAAD,QACE,MAAC,QAAD,QACE,MAAC,SAAD,eADF,EAEE,MAAC,SAAD,iBAFF,EAGE,MAAC,SAAD,QAAY,kCAAKC,KAAL,CAAWC,SAAX,kCAAwB,OAAxB,CAAZ,CAHF,CADF,CADF,EAQE,MAAC,SAAD,QACG,KAAKD,KAAL,CAAWE,UAAX,CAAsBC,GAAtB,CAA0B,UAACC,KAAD,EAAQC,CAAR,EAAc;AAAA;AACvC,YAAIC,KAAK,6BAAG,EAAH,CAAT;AADuC;;AAEvC,YAAIF,KAAK,CAACG,QAAN,CAAeC,QAAf,OAA8B,KAAI,CAACR,KAAL,CAAWO,QAA7C,EAAuD;AAAA;AAAA;AACrDD,UAAAA,KAAK,GAAG;AACNG,YAAAA,UAAU,EAAEX,IAAI,CAAC,GAAD;AADV,WAAR;AAGD,SAJD;AAAA;AAAA;;AAKA,YAAMY,IAAI,6BAAG,KAAI,CAACV,KAAL,CAAWW,OAAX,CAAmBC,IAAnB,CAAwB,UAACC,MAAD,EAAY;AAAA;AAAA;AAAA,iBAAAA,MAAM,CAACN,QAAP,CAAgBC,QAAhB,OAA+BJ,KAAK,CAACG,QAArC;AAA6C,SAAjF,EAAmFG,IAAtF,CAAV;AAPuC;AAQvC,eACE,MAAC,QAAD;AAAU,UAAA,GAAG,EAAEN,KAAK,CAACG,QAArB;AAA+B,UAAA,KAAK,EAAED;AAAtC,WACE,MAAC,SAAD,aAAaD,CAAC,GAAG,CAAjB,CADF,EAEE,MAAC,SAAD,QAAYK,IAAZ,CAFF,EAGE,MAAC,SAAD,QAAYN,KAAK,CAACA,KAAlB,CAHF,CADF;AAOD,OAfA,CADH,CARF,CADF,CADF;AA+BD;AAjCH;;AAAA;AAAA,GAAgCZ,KAAK,CAACsB,SAAtC","sourcesContent":["import * as React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport grey from '@material-ui/core/colors/grey';\nimport { IPlayerInRoom } from 'components/App/Lobby/LobbyService';\n\nexport interface IScore {\n  playerID: string;\n  score: number;\n}\n\ninterface IScoreboardProps {\n  scoreboard: IScore[];\n  players: IPlayerInRoom[];\n  playerID: string;\n  scoreName?: string;\n}\n\nexport class Scoreboard extends React.Component<IScoreboardProps, {}> {\n  render() {\n    return (\n      <div className=\"scoreboard\">\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Rank</TableCell>\n              <TableCell>Player</TableCell>\n              <TableCell>{this.props.scoreName || 'Score'}</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.props.scoreboard.map((score, i) => {\n              let style = {};\n              if (score.playerID.toString() === this.props.playerID) {\n                style = {\n                  background: grey[200],\n                };\n              }\n              const name = this.props.players.find((player) => player.playerID.toString() === score.playerID).name;\n              return (\n                <TableRow key={score.playerID} style={style}>\n                  <TableCell>#{i + 1}</TableCell>\n                  <TableCell>{name}</TableCell>\n                  <TableCell>{score.score}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}