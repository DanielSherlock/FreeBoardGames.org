{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction cov_1c5n4vot1n() {\n  var path = \"/home/j/Documents/FreeBoardGames.org/src/games/common/ScoreBadges.tsx\";\n  var hash = \"c1d63696b11502af5434685f3430694c98e74e19\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/j/Documents/FreeBoardGames.org/src/games/common/ScoreBadges.tsx\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 19,\n          column: 19\n        },\n        end: {\n          line: 52,\n          column: 6\n        }\n      },\n      \"1\": {\n        start: {\n          line: 20,\n          column: 23\n        },\n        end: {\n          line: 20,\n          column: 110\n        }\n      },\n      \"2\": {\n        start: {\n          line: 20,\n          column: 59\n        },\n        end: {\n          line: 20,\n          column: 104\n        }\n      },\n      \"3\": {\n        start: {\n          line: 21,\n          column: 21\n        },\n        end: {\n          line: 21,\n          column: 70\n        }\n      },\n      \"4\": {\n        start: {\n          line: 22,\n          column: 6\n        },\n        end: {\n          line: 51,\n          column: 8\n        }\n      },\n      \"5\": {\n        start: {\n          line: 53,\n          column: 4\n        },\n        end: {\n          line: 53,\n          column: 76\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 18,\n            column: 2\n          },\n          end: {\n            line: 18,\n            column: 3\n          }\n        },\n        loc: {\n          start: {\n            line: 18,\n            column: 11\n          },\n          end: {\n            line: 54,\n            column: 3\n          }\n        },\n        line: 18\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 19,\n            column: 45\n          },\n          end: {\n            line: 19,\n            column: 46\n          }\n        },\n        loc: {\n          start: {\n            line: 19,\n            column: 56\n          },\n          end: {\n            line: 52,\n            column: 5\n          }\n        },\n        line: 19\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 20,\n            column: 47\n          },\n          end: {\n            line: 20,\n            column: 48\n          }\n        },\n        loc: {\n          start: {\n            line: 20,\n            column: 59\n          },\n          end: {\n            line: 20,\n            column: 104\n          }\n        },\n        line: 20\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 26,\n            column: 32\n          },\n          end: {\n            line: 26,\n            column: 102\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 26,\n            column: 52\n          },\n          end: {\n            line: 26,\n            column: 92\n          }\n        }, {\n          start: {\n            line: 26,\n            column: 95\n          },\n          end: {\n            line: 26,\n            column: 102\n          }\n        }],\n        line: 26\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 33,\n            column: 25\n          },\n          end: {\n            line: 33,\n            column: 54\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 33,\n            column: 34\n          },\n          end: {\n            line: 33,\n            column: 42\n          }\n        }, {\n          start: {\n            line: 33,\n            column: 45\n          },\n          end: {\n            line: 33,\n            column: 54\n          }\n        }],\n        line: 33\n      },\n      \"2\": {\n        loc: {\n          start: {\n            line: 36,\n            column: 15\n          },\n          end: {\n            line: 36,\n            column: 73\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 36,\n            column: 63\n          },\n          end: {\n            line: 36,\n            column: 68\n          }\n        }, {\n          start: {\n            line: 36,\n            column: 71\n          },\n          end: {\n            line: 36,\n            column: 73\n          }\n        }],\n        line: 36\n      },\n      \"3\": {\n        loc: {\n          start: {\n            line: 44,\n            column: 25\n          },\n          end: {\n            line: 44,\n            column: 54\n          }\n        },\n        type: \"cond-expr\",\n        locations: [{\n          start: {\n            line: 44,\n            column: 34\n          },\n          end: {\n            line: 44,\n            column: 42\n          }\n        }, {\n          start: {\n            line: 44,\n            column: 45\n          },\n          end: {\n            line: 44,\n            column: 54\n          }\n        }],\n        line: 44\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0],\n      \"2\": [0, 0],\n      \"3\": [0, 0]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"c1d63696b11502af5434685f3430694c98e74e19\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n\n  cov_1c5n4vot1n = function () {\n    return actualCoverage;\n  };\n\n  return actualCoverage;\n}\n\ncov_1c5n4vot1n();\nimport * as React from 'react';\nimport css from './ScoreBadges.css';\nimport Typography from '@material-ui/core/Typography';\nimport { isPlayersTurn } from './GameUtil';\nexport class ScoreBadges extends (React.Component) {\n  render() {\n    cov_1c5n4vot1n().f[0]++;\n    const badges = (cov_1c5n4vot1n().s[0]++, this.props.scoreboard.map(score => {\n      cov_1c5n4vot1n().f[1]++;\n      const nickname = (cov_1c5n4vot1n().s[1]++, this.props.players.find(player => {\n        cov_1c5n4vot1n().f[2]++;\n        cov_1c5n4vot1n().s[2]++;\n        return player.playerID.toString() === score.playerID;\n      }).name);\n      const isSelf = (cov_1c5n4vot1n().s[3]++, score.playerID.toString() === this.props.playerID);\n      cov_1c5n4vot1n().s[4]++;\n      return __jsx(\"div\", {\n        className: css.ScoreBadge,\n        key: score.playerID,\n        style: {\n          borderColor: this.props.colors ? (cov_1c5n4vot1n().b[0][0]++, this.props.colors[score.playerID]) : (cov_1c5n4vot1n().b[0][1]++, 'white')\n        },\n        \"data-testid\": `scorebadge-${score.playerID}`\n      }, __jsx(\"span\", {\n        className: css.Nickname\n      }, __jsx(Typography, {\n        \"data-testid\": `nickname-${score.playerID}`,\n        style: {\n          color: 'white'\n        },\n        className: isSelf ? (cov_1c5n4vot1n().b[1][0]++, css.Self) : (cov_1c5n4vot1n().b[1][1]++, undefined),\n        variant: \"body2\"\n      }, isPlayersTurn(score.playerID, this.props.ctx) ? (cov_1c5n4vot1n().b[2][0]++, 'ðŸ•’ ') : (cov_1c5n4vot1n().b[2][1]++, ''), nickname)), __jsx(\"span\", null, __jsx(Typography, {\n        \"data-testid\": `score-${score.playerID}`,\n        style: {\n          color: 'white'\n        },\n        className: isSelf ? (cov_1c5n4vot1n().b[3][0]++, css.Self) : (cov_1c5n4vot1n().b[3][1]++, undefined),\n        variant: \"body2\"\n      }, score.score)));\n    }));\n    cov_1c5n4vot1n().s[5]++;\n    return __jsx(\"div\", {\n      style: {\n        clear: 'left',\n        paddingTop: '8px'\n      }\n    }, badges);\n  }\n\n}","map":{"version":3,"sources":["/home/j/Documents/FreeBoardGames.org/src/games/common/ScoreBadges.tsx"],"names":["React","css","Typography","isPlayersTurn","ScoreBadges","Component","render","badges","props","scoreboard","map","score","nickname","players","find","player","playerID","toString","name","isSelf","ScoreBadge","borderColor","colors","Nickname","color","Self","undefined","ctx","clear","paddingTop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,SAASC,aAAT,QAA8B,YAA9B;AAUA,OAAO,MAAMC,WAAN,UAA0BJ,KAAK,CAACK,SAAhC,EAAiE;AACtEC,EAAAA,MAAM,GAAG;AAAA;AACP,UAAMC,MAAM,6BAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,GAAtB,CAA2BC,KAAD,IAAW;AAAA;AAClD,YAAMC,QAAQ,6BAAG,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAyBC,MAAD,IAAY;AAAA;AAAA;AAAA,eAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,OAA+BN,KAAK,CAACK,QAArC;AAA6C,OAAjF,EAAmFE,IAAtF,CAAd;AACA,YAAMC,MAAM,6BAAGR,KAAK,CAACK,QAAN,CAAeC,QAAf,OAA8B,KAAKT,KAAL,CAAWQ,QAA5C,CAAZ;AAFkD;AAGlD,aACE;AACE,QAAA,SAAS,EAAEf,GAAG,CAACmB,UADjB;AAEE,QAAA,GAAG,EAAET,KAAK,CAACK,QAFb;AAGE,QAAA,KAAK,EAAE;AAAEK,UAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWc,MAAX,gCAAoB,KAAKd,KAAL,CAAWc,MAAX,CAAkBX,KAAK,CAACK,QAAxB,CAApB,iCAA+D,OAA/D;AAAf,SAHT;AAIE,uBAAc,cAAaL,KAAK,CAACK,QAAS;AAJ5C,SAME;AAAM,QAAA,SAAS,EAAEf,GAAG,CAACsB;AAArB,SACE,MAAC,UAAD;AACE,uBAAc,YAAWZ,KAAK,CAACK,QAAS,EAD1C;AAEE,QAAA,KAAK,EAAE;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,SAAS,EAAEL,MAAM,gCAAGlB,GAAG,CAACwB,IAAP,iCAAcC,SAAd,CAHnB;AAIE,QAAA,OAAO,EAAC;AAJV,SAMGvB,aAAa,CAACQ,KAAK,CAACK,QAAP,EAAiB,KAAKR,KAAL,CAAWmB,GAA5B,CAAb,gCAAgD,KAAhD,iCAAwD,EAAxD,CANH,EAOGf,QAPH,CADF,CANF,EAiBE,oBACE,MAAC,UAAD;AACE,uBAAc,SAAQD,KAAK,CAACK,QAAS,EADvC;AAEE,QAAA,KAAK,EAAE;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,SAAS,EAAEL,MAAM,gCAAGlB,GAAG,CAACwB,IAAP,iCAAcC,SAAd,CAHnB;AAIE,QAAA,OAAO,EAAC;AAJV,SAMGf,KAAK,CAACA,KANT,CADF,CAjBF,CADF;AA8BD,KAjCc,CAAH,CAAZ;AADO;AAmCP,WAAO;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,UAAU,EAAE;AAA7B;AAAZ,OAAmDtB,MAAnD,CAAP;AACD;;AArCqE","sourcesContent":["import * as React from 'react';\nimport { IScore } from './Scoreboard';\nimport { IPlayerInRoom } from 'components/App/Lobby/LobbyService';\nimport css from './ScoreBadges.css';\nimport Typography from '@material-ui/core/Typography';\nimport { IGameCtx } from 'boardgame.io/core';\nimport { isPlayersTurn } from './GameUtil';\n\ninterface IScoreBadgesProps {\n  scoreboard: IScore[];\n  players: IPlayerInRoom[];\n  playerID: string;\n  colors?: string[];\n  ctx: IGameCtx;\n}\n\nexport class ScoreBadges extends React.Component<IScoreBadgesProps, {}> {\n  render() {\n    const badges = this.props.scoreboard.map((score) => {\n      const nickname = this.props.players.find((player) => player.playerID.toString() === score.playerID).name;\n      const isSelf = score.playerID.toString() === this.props.playerID;\n      return (\n        <div\n          className={css.ScoreBadge}\n          key={score.playerID}\n          style={{ borderColor: this.props.colors ? this.props.colors[score.playerID as any] : 'white' }}\n          data-testid={`scorebadge-${score.playerID}`}\n        >\n          <span className={css.Nickname}>\n            <Typography\n              data-testid={`nickname-${score.playerID}`}\n              style={{ color: 'white' }}\n              className={isSelf ? css.Self : undefined}\n              variant=\"body2\"\n            >\n              {isPlayersTurn(score.playerID, this.props.ctx) ? 'ðŸ•’ ' : ''}\n              {nickname}\n            </Typography>\n          </span>\n          <span>\n            <Typography\n              data-testid={`score-${score.playerID}`}\n              style={{ color: 'white' }}\n              className={isSelf ? css.Self : undefined}\n              variant=\"body2\"\n            >\n              {score.score}\n            </Typography>\n          </span>\n        </div>\n      );\n    });\n    return <div style={{ clear: 'left', paddingTop: '8px' }}>{badges}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}