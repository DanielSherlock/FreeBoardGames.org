{"version":3,"file":"16.js","sources":["webpack:///./src/games/seabattle/ai.ts","webpack:///./src/games/seabattle/game.ts"],"sourcesContent":["import { IAIConfig } from '../index';\nimport { ICell, IShip, ISalvo, generateRandomShips } from './game';\nimport shuffle from 'shuffle-array';\n\ninterface IAISalvo extends ISalvo {\n  up: boolean;\n  down: boolean;\n  left: boolean;\n  right: boolean;\n}\n\ninterface IPlayState {\n  G: any;\n  ctx: any;\n}\n\nexport class SeabattleBot {\n  async play(state: IPlayState, playerID: string) {\n    if (state.ctx.phase === 'setup') {\n      const shipPositions = generateRandomShips(parseInt(state.ctx.currentPlayer));\n      return this.makeSetShipsMove(shipPositions, playerID);\n    } else {\n      // if this is the first turn for our AI, wait only 500ms.  Else 2500ms\n      const sleepMs = state.G.salvos.length === 0 ? 500 : 2500;\n      await sleep(sleepMs);\n      const cell = this.generateMove(playerID, state);\n      return this.makeSalvoMove(cell, playerID);\n    }\n  }\n\n  makeSetShipsMove(ships: IShip[], playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'setShips', args: [ships], playerID } } };\n  }\n\n  makeSalvoMove(cell: ICell, playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'salvo', args: [cell.x, cell.y], playerID } } };\n  }\n\n  generateMove(playerID: string, state: IPlayState) {\n    const salvos = state.G.salvos.filter(\n      (salvo: ISalvo) =>\n        salvo.player === Number(playerID) && salvo.hit === true && typeof salvo.hitShip !== 'undefined',\n    );\n    for (const salvo of salvos) {\n      // if we have already fired salvos, see if we've hit any ships that remain unsunk\n      if (!this.isShipSunk(state, salvo.hitShip)) {\n        const otherHitSalvos = this.getOtherSalvosHitShip(state, salvo.hitShip);\n        if (otherHitSalvos.length >= 2) {\n          // we have hit this ship at least twice, so we can make an intelligent move\n          return this.getNextShipFoundMove(state, otherHitSalvos);\n        }\n        // no other salvos for the same ship were hit, so hit a random neighbor\n        return this.getRandomNeighbor(state, salvo);\n      }\n    }\n    // generate a random move\n    return this.generateRandomMove(state);\n  }\n\n  getNextShipFoundMove(state: IPlayState, hitSalvos: ISalvo[]): ICell {\n    const xMap = hitSalvos.map((salvo) => salvo.cell.x);\n    const yMap = hitSalvos.map((salvo) => salvo.cell.y);\n\n    const minPos = { x: Math.min(...xMap), y: Math.min(...yMap) };\n    const maxPos = { x: Math.max(...xMap), y: Math.max(...yMap) };\n    const direction = maxPos.x === minPos.x ? { x: 0, y: 1 } : { x: 1, y: 0 };\n    return this.anyValidMove(state, [\n      { x: minPos.x - direction.x, y: minPos.y - direction.y },\n      { x: maxPos.x + direction.x, y: maxPos.y + direction.y },\n    ]);\n  }\n\n  isInBounds(x: number) {\n    return x >= 0 && x <= 9;\n  }\n\n  isValidMove(state: IPlayState, cell: ICell) {\n    return this.isInBounds(cell.x) && this.isInBounds(cell.y) && this.isUniqueMove(state, cell);\n  }\n\n  anyValidMove(state: IPlayState, moves: ICell[]) {\n    shuffle(moves); // ONLY source of randomness\n    for (const move of moves) {\n      if (this.isValidMove(state, move)) {\n        return move;\n      }\n    }\n    return null;\n  }\n\n  getRandomNeighbor(state: IPlayState, salvo: ISalvo): ICell {\n    return this.anyValidMove(state, [\n      { x: salvo.cell.x - 1, y: salvo.cell.y },\n      { x: salvo.cell.x, y: salvo.cell.y - 1 },\n      { x: salvo.cell.x + 1, y: salvo.cell.y },\n      { x: salvo.cell.x, y: salvo.cell.y + 1 },\n    ]);\n  }\n\n  getOtherSalvosHitShip(state: IPlayState, id: string) {\n    return state.G.salvos.filter((salvo: ISalvo) => salvo.hitShip === id);\n  }\n\n  isShipSunk(state: IPlayState, id: string) {\n    return state.G.ships.filter((ship: IShip) => ship.id === id)[0].sunk;\n  }\n\n  generateRandomMove(state: IPlayState) {\n    const allPossibleMoves: ICell[] = [];\n    for (let x = 0; x <= 9; x++) {\n      for (let y = 0; y <= 9; y++) {\n        allPossibleMoves.push({ x, y });\n      }\n    }\n    return this.anyValidMove(state, allPossibleMoves);\n  }\n\n  isUniqueMove(state: IPlayState, cell: ICell) {\n    const moves = state.G.salvos.filter(\n      (salvo: ISalvo) =>\n        salvo.player === parseInt(state.ctx.currentPlayer) && salvo.cell.x === cell.x && salvo.cell.y === cell.y,\n    );\n    return moves.length === 0;\n  }\n}\n\nexport const config: IAIConfig = {\n  bgioAI: () => {\n    return {\n      bot: SeabattleBot,\n    };\n  },\n};\n\nfunction sleep(milliseconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n}\n\nexport default config;\n","import { IGameArgs, ActivePlayers, IGameCtx } from 'boardgame.io/core';\nimport shortid from 'shortid';\n\nexport interface IShip {\n  player: number;\n  cells: ICell[];\n  sunk: boolean;\n  id?: string;\n}\n\nexport interface ICell {\n  x: number;\n  y: number;\n}\n\nexport interface ISalvo {\n  player: number;\n  cell: ICell;\n  hit: boolean;\n  hitShip?: string;\n}\n\nexport interface ISeabattleState {\n  ships: IShip[];\n  salvos: ISalvo[];\n}\n\ninterface ICtx {\n  playerID?: string;\n}\n\nconst VALID_SHIPS_SIZES: number[] = [5, 4, 3, 2];\nconst VALID_SHIPS_COUNT: { [size: number]: number } = {\n  5: 1,\n  4: 1,\n  3: 2,\n  2: 1,\n};\n\nexport const playerView = (G: ISeabattleState, ctx: ICtx, playerID: string): ISeabattleState => {\n  const player = parseInt(playerID, 10);\n  const ships: IShip[] = G.ships.filter((ship) => ship.player === player || ship.sunk);\n  return {\n    ...G,\n    ships,\n  };\n};\n\nfunction setShips(G: ISeabattleState, ctx: IGameCtx, ships: IShip[]) {\n  const player = parseInt(ctx.playerID, 10);\n  const validation = validateShips(ships, player);\n  if (!validation.valid) {\n    throw new Error(validation.error);\n  }\n\n  return { ...G, ships: [...G.ships, ...ships] };\n}\n\nfunction salvo(G: ISeabattleState, ctx: ICtx, x: number, y: number) {\n  const player = parseInt(ctx.playerID, 10);\n  const shipIndex = findShipWithCell(G.ships, { x, y }, player);\n  // Do not allow the same cells to be shot twice\n  const uniqueMove =\n    G.salvos.filter((salvo) => salvo.player === player && salvo.cell.x === x && salvo.cell.y === y).length === 0;\n  if (!uniqueMove) {\n    return { ...G };\n  }\n  if (shipIndex === -1) {\n    // Miss\n    return { ...G, salvos: [...G.salvos, { player, hit: false, cell: { x, y } }] };\n  }\n  const ship = G.ships[shipIndex];\n  // Hit\n  const newShips = [...G.ships];\n  if (countShipHits(G.salvos, ship.id) + 1 === ship.cells.length) {\n    newShips[shipIndex] = { ...newShips[shipIndex], sunk: true };\n  }\n  return {\n    ...G,\n    ships: newShips,\n    salvos: [...G.salvos, { player, hit: true, cell: { x, y }, hitShip: ship.id }],\n  };\n}\n\nexport const SeabattleGame: IGameArgs = {\n  name: 'seabattle',\n\n  setup: (): ISeabattleState => ({\n    ships: [],\n    salvos: [],\n  }),\n\n  phases: {\n    setup: {\n      moves: { setShips },\n      next: 'play',\n      start: true,\n      turn: {\n        activePlayers: ActivePlayers.ALL_ONCE,\n        onMove: (_, ctx) => {\n          if (ctx.activePlayers === null) {\n            ctx.events.endPhase();\n          }\n        },\n      },\n    },\n    play: {\n      moves: { salvo },\n    },\n  },\n  endIf: (G, ctx) => {\n    if (ctx.phase === 'play') {\n      if (checkAllShipsSunk(G.ships, 0)) {\n        return { winner: '1' };\n      }\n      if (checkAllShipsSunk(G.ships, 1)) {\n        return { winner: '0' };\n      }\n    }\n  },\n  turn: {\n    moveLimit: 1,\n  },\n  playerView,\n};\n\n// Helper function for generating random ships positioning.\nexport function generateRandomShips(player: number): IShip[] {\n  let result: IShip[];\n  let shipID;\n  do {\n    result = [];\n    for (const shipSize of VALID_SHIPS_SIZES) {\n      const count: number = VALID_SHIPS_COUNT[shipSize];\n      for (let i = 0; i < count; i++) {\n        shipID = shortid.generate();\n        result.push(randomlyGetShip(player, shipSize, shipID));\n      }\n    }\n  } while (!validateShips(result, player).valid);\n  return result;\n}\n\n// Wheather a setup is valid or not.\nexport function validateShips(ships: IShip[], player?: number): IShipsValidationResult {\n  const validations = [\n    validateShipsCount(ships),\n    validateShipsContinuity(ships),\n    validateShipsNotOutOfBounds(ships),\n    validateShipsNotOverlapping(ships),\n    validateShipsHaveUniqueIDs(ships),\n  ];\n  if (player !== undefined) {\n    validations.push(validateShipsOwnership(player, ships));\n  }\n  for (const validation of validations) {\n    if (!validation.valid) {\n      return validation;\n    }\n  }\n  return { valid: true };\n}\n\n// PRIVATE FUNCTIONS\nfunction checkAllShipsSunk(ships: IShip[], player: number): boolean {\n  for (const ship of ships) {\n    if (ship.player === player && !ship.sunk) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction randomlyGetShip(player: number, shipSize: number, id: string): IShip {\n  const cell: ICell = { x: getRandomInt(10), y: getRandomInt(10) };\n  const direction = getRandomInt(2) === 1 ? 'H' : 'V';\n  const ship: IShip = { player, cells: [], sunk: false, id };\n  for (let i = 0; i < shipSize; i++) {\n    if (direction === 'H') {\n      // Constant y\n      ship.cells.push({ ...cell, x: cell.x + i });\n    } else {\n      // Constant x\n      ship.cells.push({ ...cell, y: cell.y + i });\n    }\n  }\n  return ship;\n}\n\nfunction getRandomInt(max: number): number {\n  return ((Math.random() * max) << 0) << 0; // https://github.com/babel/minify/issues/904\n}\n\nfunction findShipWithCell(ships: IShip[], cell: ICell, player: number): number {\n  return ships.findIndex(\n    (ship) => ship.cells.findIndex((c) => c.x === cell.x && c.y === cell.y) !== -1 && ship.player !== player,\n  );\n}\n\nfunction countShipHits(salvos: ISalvo[], shipId: string): number {\n  return salvos.filter((s) => s.hitShip === shipId).length;\n}\n\ninterface IShipsValidationResult {\n  valid: boolean;\n  error?: string;\n}\n\nfunction validateShipsCount(ships: IShip[]): IShipsValidationResult {\n  const shipsLength = ships.map((ship: IShip) => ship.cells.length);\n  const count: { [key: number]: number } = { ...VALID_SHIPS_COUNT };\n  for (const length of shipsLength) {\n    if (!(length in count)) {\n      return { valid: false, error: `Invalid ship length: ${length}` };\n    }\n    count[length]--;\n  }\n  for (const length of Object.values(count)) {\n    if (length !== 0) {\n      return { valid: false, error: 'Invalid ships sizes.' };\n    }\n  }\n  return { valid: true };\n}\n\nfunction validateShipsOwnership(player: number, ships: IShip[]): IShipsValidationResult {\n  const owners = ships.map((ship: IShip) => ship.player);\n  for (const owner of owners) {\n    if (owner !== player) {\n      return { valid: false, error: `Invalid player owner: ${owner} should be: ${player}` };\n    }\n  }\n  return { valid: true };\n}\n\nfunction validateShipsContinuity(ships: IShip[]): IShipsValidationResult {\n  for (const ship of ships) {\n    if (ship.cells.length < 2) {\n      continue;\n    }\n    let lastICell: ICell = ship.cells[0];\n    const vector: ICell = getCellVector(ship.cells[1], ship.cells[0]);\n    if (\n      !(\n        (Math.abs(vector.x) === 1 && Math.abs(vector.y) === 0) ||\n        (Math.abs(vector.x) === 0 && Math.abs(vector.y) === 1)\n      )\n    ) {\n      return { valid: false, error: `IShip is not spaced right!` };\n    }\n    for (let i = 1; i < ship.cells.length; i++) {\n      const cell = ship.cells[i];\n      const newVector = getCellVector(cell, lastICell);\n      if (newVector.x !== vector.x || newVector.y !== vector.y) {\n        return { valid: false, error: `IShip is not continuous!` };\n      }\n      lastICell = cell;\n    }\n  }\n  return { valid: true };\n}\n\nexport function getCellVector(a: ICell, b: ICell): ICell {\n  return { x: a.x - b.x, y: a.y - b.y };\n}\n\nfunction validateShipsHaveUniqueIDs(ships: IShip[]): IShipsValidationResult {\n  const usedIDs: { [id: string]: boolean } = {};\n  for (const ship of ships) {\n    if (usedIDs[ship.id]) {\n      return { valid: false, error: `IShip IDs are not unique!` };\n    }\n    usedIDs[ship.id] = true;\n  }\n  return { valid: true };\n}\n\nfunction validateShipsNotOutOfBounds(ships: IShip[]): IShipsValidationResult {\n  for (const ship of ships) {\n    for (const cell of ship.cells) {\n      if (cell.x < 0 || cell.x > 9 || cell.y < 0 || cell.y > 9) {\n        return { valid: false, error: `IShip out of bounds!` };\n      }\n    }\n  }\n  return { valid: true };\n}\n\nfunction validateShipsNotOverlapping(ships: IShip[]): IShipsValidationResult {\n  const cellsUsed: { [x: number]: { [y: number]: boolean } } = {};\n  for (const ship of ships) {\n    for (const cell of ship.cells) {\n      if (!(cell.x in cellsUsed)) {\n        cellsUsed[cell.x] = {};\n      }\n      if (cellsUsed[cell.x][cell.y]) {\n        return { valid: false, error: `Overlapping ships!` };\n      }\n      cellsUsed[cell.x][cell.y] = true;\n    }\n  }\n  return { valid: true };\n}\n"],"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","sourceRoot":""}