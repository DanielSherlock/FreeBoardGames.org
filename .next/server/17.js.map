{"version":3,"file":"17.js","sources":["webpack:///./src/games/takesix/ai.ts","webpack:///./src/games/takesix/game.ts"],"sourcesContent":["import { IAIConfig } from '../index';\nimport { IG, getCards, isAllowedDeck } from './game';\nimport { IGameCtx } from 'boardgame.io/core';\n\ninterface IPlayState {\n  G: IG;\n  ctx: IGameCtx;\n}\n\nexport class TakeSixBot {\n  async play(state: IPlayState, playerID: string) {\n    await sleep(300);\n    if (state.ctx.phase === 'CARD_SELECT') {\n      // const randomCard = Math.floor(state.G.players[playerID as any].cards.length * Math.random());  // https://github.com/babel/minify/issues/904\n      const randomCard = (state.G.players[playerID as any].cards.length * Math.random()) << 0;\n      return this.makeSelectCardMove(randomCard, playerID);\n    } else {\n      const deckId = this.getBestDeck(state.G, playerID);\n      return this.makeSelectDeckMove(deckId, playerID);\n    }\n  }\n\n  getBestDeck(G: IG, playerID: string): number {\n    const { card, lastCards } = getCards(G, playerID);\n    if (card.number < lastCards[0].number) {\n      return G.decks\n        .map((deck, i) => ({ value: deck.reduce((acc, card) => acc + card.value, 0), id: i }), 0)\n        .sort((a, b) => a.value - b.value)[0].id;\n    } else {\n      return G.decks.findIndex((deck, i) => isAllowedDeck(G, i, playerID));\n    }\n  }\n\n  makeSelectCardMove(cardId: number, playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'selectCard', args: [cardId], playerID } } };\n  }\n\n  makeSelectDeckMove(deckId: number, playerID: string) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'selectDeck', args: [deckId], playerID } } };\n  }\n}\n\nexport const config: IAIConfig = {\n  bgioAI: () => {\n    return TakeSixBot;\n  },\n};\n\nfunction sleep(milliseconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n}\n\nexport default config;\n","import { IGameArgs, IGameCtx, INVALID_MOVE, ActivePlayers } from 'boardgame.io/core';\nimport { IScore } from '../common/Scoreboard';\nimport Card from './card';\nimport Player from './player';\n\nexport interface IG {\n  players: Player[];\n  decks: Card[][];\n  cardOrder: string[];\n  end: boolean;\n}\n\nexport interface IGetCards {\n  card: Card;\n  lastCards: Card[];\n}\n\nfunction sortCards(a: Card, b: Card) {\n  return a.number - b.number;\n}\n\nexport function isAllowedDeck(G: IG, deckId: number, playerID: string): boolean {\n  const { card, lastCards } = getCards(G, playerID);\n  if (card.number < lastCards[0].number) {\n    return true;\n  }\n  const diffs: number[] = G.decks.map((deck) => card.number - deck[deck.length - 1].number);\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  diffs.forEach((diff, index) => {\n    if (diff > 0 && diff < min) {\n      min = diff;\n      minIndex = index;\n    }\n  });\n  return minIndex === deckId;\n}\n\nexport function getCards(G: IG, playerID: string): IGetCards {\n  const lastCards = G.decks.map((deck) => deck[deck.length - 1]).sort(sortCards);\n  const card = G.players[playerID as any].selectedCard;\n  return { card, lastCards: lastCards };\n}\n\nfunction moveToHand(G: IG, ctx: IGameCtx, card: Card, deckId: number): any {\n  return {\n    ...G,\n    players: Object.values({\n      ...G.players,\n      [ctx.playerID]: {\n        ...G.players[ctx.playerID as any],\n        penaltyCards: [...G.players[ctx.playerID as any].penaltyCards, ...G.decks[deckId]],\n      },\n    }),\n    decks: Object.values({\n      ...G.decks,\n      [deckId]: [card],\n    }),\n  };\n}\n\nexport function selectCard(G: IG, ctx: IGameCtx, id: number): any {\n  if (id < 0 || id >= G.players[ctx.playerID as any].cards.length) {\n    return INVALID_MOVE;\n  }\n  return {\n    ...G,\n    players: Object.values({\n      ...G.players,\n      [ctx.playerID]: {\n        ...G.players[ctx.playerID as any],\n        selectedCard: G.players[ctx.playerID as any].cards[id], // Set card as selected\n        cards: G.players[ctx.playerID as any].cards.filter((_, index) => index !== id), // Remove card from player's deck\n      },\n    }),\n  };\n}\n\nexport function getScoreBoard(G: IG): IScore[] {\n  return G.players\n    .map((player, i) => ({\n      playerID: i.toString(),\n      score: player.penaltyCards.reduce((acc, card) => acc + card.value, 0),\n    }))\n    .sort((a, b) => a.score - b.score);\n}\n\nexport function selectDeck(G: IG, ctx: IGameCtx, id: number): any {\n  if (!isAllowedDeck(G, id, ctx.playerID)) {\n    return INVALID_MOVE;\n  }\n  const { card, lastCards } = getCards(G, ctx.playerID);\n\n  // Card is lower than every in deck OR\n  // card is #6 move all cards from deck to player's hand\n  if (card.number < lastCards[0].number || G.decks[id].length === 5) {\n    return moveToHand(G, ctx, card, id);\n  }\n\n  // Append card\n  return {\n    ...G,\n    decks: Object.values({\n      ...G.decks,\n      [id]: [...G.decks[id], card],\n    }),\n  };\n}\n\nconst GameConfig: IGameArgs = {\n  name: 'takesix',\n  phases: {\n    // Everyone needs to select card\n    CARD_SELECT: {\n      moves: { selectCard },\n      next: 'DECK_SELECT',\n      // Determine player order\n      onEnd: (G: IG) => {\n        const selectedCards = G.players.map((player) => player.selectedCard);\n        selectedCards.sort(sortCards);\n        return {\n          ...G,\n          cardOrder: selectedCards.map((card) => card.owner).map((owner) => owner.toString()),\n        };\n      },\n      start: true,\n      turn: {\n        activePlayers: ActivePlayers.ALL_ONCE,\n        onMove: (_, ctx) => {\n          if (ctx.activePlayers === null) {\n            ctx.events.endPhase();\n          }\n        },\n      },\n    },\n    // Select deck\n    DECK_SELECT: {\n      moves: { selectDeck },\n      next: 'CARD_SELECT',\n      onEnd: (G: IG) => {\n        if (G.players[0].cards.length === 0) {\n          G.end = true;\n        }\n      },\n      turn: {\n        moveLimit: 1,\n        order: {\n          playOrder: (G: IG) => G.cardOrder,\n          first: () => 0,\n          next: (_, ctx) => {\n            if (ctx.playOrderPos < ctx.playOrder.length - 1) {\n              return ctx.playOrderPos + 1;\n            }\n          },\n        },\n      },\n    },\n  },\n  endIf: (G: IG) => {\n    if (G.end === true) {\n      const scoreboard = getScoreBoard(G);\n      if (scoreboard[0].score === scoreboard[1].score) {\n        return { draw: true };\n      } else {\n        return { winner: scoreboard[0].playerID.toString() };\n      }\n    }\n  },\n  events: {\n    endTurn: false,\n    endGame: false,\n    endPhase: false,\n  },\n  // playerView: PlayerView.STRIP_SECRETS,\n  setup: (ctx): IG => {\n    // Generate deck\n    const deck = ctx.random.Shuffle(\n      new Array(104).fill(0).map((_, i) => {\n        let value = 1;\n        if ((i + 1) % 55 === 0) {\n          value = 7;\n        } else if ((i + 1) % 11 === 0) {\n          value = 5;\n        } else if ((i + 1) % 10 === 0) {\n          value = 3;\n        } else if ((i + 1) % 5 === 0) {\n          value = 2;\n        }\n        return { number: i + 1, value, owner: null };\n      }),\n    );\n\n    // Set initial state\n    return {\n      decks: new Array(4)\n        .fill(0)\n        .map(() => deck.pop())\n        .sort(sortCards)\n        .map((card) => [card]),\n      players: new Array(ctx.numPlayers).fill(0).map((_, i) => ({\n        cards: new Array(10)\n          .fill(0)\n          .map(() => {\n            const card = deck.pop();\n            card.owner = i;\n            return card;\n          })\n          .sort(sortCards),\n        penaltyCards: [],\n      })),\n      cardOrder: [],\n      end: false,\n    };\n  },\n};\n\nexport const TakeSixGame = GameConfig;\nexport const TakeSixGameForTest = (override: any) => ({\n  ...GameConfig,\n  ...override,\n});\n"],"mappingsitDA;AACA;AAgBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAIA;AAbA;AAcA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAFA;AAFA;AAOA;AAEA;AAFA;AATA;AAcA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAFA;AAIA;AAEA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAFA;AAFA;AAWA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AARA;AACA;AAOA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AACA;AAVA;AAaA;AAEA;AAEA;AAFA;AAFA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAFA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AANA;AAbA;AAsBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAPA;AAFA;AARA;AAzBA;AA+CA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAEA;AAAA;AAAA;AACA;AAXA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAmBA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAEA;AAFA;AAGA;AACA;AAEA;AATA;AAUA;AACA;AACA;AAlBA;AAoBA;AAxGA;AA2GA;;AACA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}