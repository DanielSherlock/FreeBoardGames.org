{"version":3,"file":"8.js","sources":["webpack:///./src/components/App/Game/GameDarkSublayout.tsx","webpack:///./src/components/App/Game/GameLayout.tsx","webpack:///./src/components/App/Game/GameOver.tsx","webpack:///./src/components/App/GamesList.tsx","webpack:///./src/components/App/MessagePage.tsx","webpack:///./src/components/App/MessagePageClass.tsx","webpack:///./src/components/App/media/SvgError.tsx","webpack:///./src/components/DesktopMobileView.tsx","webpack:///./src/games/common/GameUtil.ts","webpack:///./src/games/common/gameMode.ts","webpack:///./src/games/hangman/EnterWordPrompt.tsx","webpack:///./src/games/hangman/board.tsx","webpack:///./src/games/hangman/config.ts","webpack:///./src/games/hangman/constants.ts","webpack:///./src/games/hangman/game.ts","webpack:///./src/games/hangman/util.ts","webpack:///./src/hooks/useWindowDimensions.ts"],"sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link';\nimport FbgLogo from '../media/fbg_logo_white_48.png';\nimport Button from '@material-ui/core/Button';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FeedbackIcon from '@material-ui/icons/Feedback';\nimport { IGameArgs } from './GameBoardWrapper';\nimport { GAMES_MAP } from 'games';\nimport { DesktopView } from 'components/DesktopMobileView';\n\ninterface IGameDarkSublayoutProps {\n  children: React.ReactNode;\n  optionsMenuItems?: () => IOptionsItems[];\n  allowWiderScreen?: boolean;\n  gameArgs: IGameArgs;\n}\n\ninterface IGameDarkSublayoutState {\n  feedback: boolean;\n  menuAnchorEl: any;\n  prevBgColor: string;\n}\n\nexport interface IOptionsItems {\n  text: string;\n  onClick: () => void;\n}\n\nexport class GameDarkSublayout extends React.Component<IGameDarkSublayoutProps, IGameDarkSublayoutState> {\n  constructor(props: IGameDarkSublayoutProps) {\n    super(props);\n    this.state = { feedback: null, menuAnchorEl: null, prevBgColor: document.body.style.backgroundColor };\n    document.body.style.backgroundColor = 'black';\n  }\n\n  componentWillUnmount() {\n    document.body.style.backgroundColor = this.state.prevBgColor;\n  }\n\n  render() {\n    const isProdChannel = process.env.NODE_ENV === 'production';\n    const gameName = GAMES_MAP[this.props.gameArgs.gameCode].name;\n    let fbgTopLeftText;\n    if (isProdChannel) {\n      if (gameName) {\n        fbgTopLeftText = (\n          <Typography variant=\"h6\" gutterBottom={true} style={{ float: 'left', paddingTop: '9px', color: 'white' }}>\n            {gameName}\n          </Typography>\n        );\n      }\n    } else {\n      fbgTopLeftText = (\n        <Typography\n          variant=\"h6\"\n          gutterBottom={true}\n          style={{ float: 'left', marginTop: '10px', backgroundColor: 'red', color: 'white' }}\n        >\n          &nbsp;{gameName}&nbsp;\n        </Typography>\n      );\n    }\n\n    let feedbackButtonOrText;\n    if (this.state.feedback) {\n      feedbackButtonOrText = (\n        <Typography variant=\"h6\" gutterBottom={true} style={{ float: 'right', paddingTop: '10px', color: 'white' }}>\n          Desktop View is Experimental.\n        </Typography>\n      );\n    } else {\n      feedbackButtonOrText = (\n        <DesktopView thresholdWidth={680}>\n          <Button\n            onClick={this._toggleFeedback}\n            aria-label=\"Desktop View is Experimental.\"\n            variant=\"outlined\"\n            style={{ float: 'right', paddingTop: '14px' }}\n          >\n            <FeedbackIcon style={{ color: 'white' }} />\n          </Button>\n        </DesktopView>\n      );\n    }\n\n    return (\n      <div>\n        <div\n          style={{\n            position: 'fixed',\n            top: '0',\n            width: '100%',\n            zIndex: 1,\n          }}\n        >\n          <div\n            style={{\n              maxWidth: this.props.allowWiderScreen ? '1000px' : '500px',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n            }}\n          >\n            <Link href=\"/\">\n              <a style={{ float: 'left', textDecoration: 'none' }}>\n                <img src={FbgLogo} alt=\"FreeBoardGames.org\" style={{ float: 'left', paddingRight: '16px' }} />\n                {fbgTopLeftText}\n              </a>\n            </Link>\n            {this._getOptionsMenuButton()}\n            {this._getOptionsMenuItems()}\n            {feedbackButtonOrText}\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'fixed',\n            width: '100%',\n            maxWidth: this.props.allowWiderScreen ? '1000px' : '500px',\n            color: 'white',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n  _getOptionsMenuButton() {\n    if (this.props.optionsMenuItems) {\n      return (\n        <Button\n          onClick={this._openOptionsMenu}\n          aria-label=\"Open options\"\n          variant=\"outlined\"\n          style={{ margin: '8px', float: 'right' }}\n        >\n          <MoreVert style={{ color: 'white' }} />\n        </Button>\n      );\n    }\n  }\n\n  _toggleFeedback = () => {\n    setTimeout(() => {\n      this.setState({ feedback: false });\n    }, 5000);\n    this.setState({ feedback: !this.state.feedback });\n  };\n\n  _openOptionsMenu = (event: any) => {\n    this.setState({ menuAnchorEl: event.currentTarget });\n  };\n\n  _closeOptionsMenu = () => {\n    this.setState({ menuAnchorEl: null });\n  };\n\n  _wrapOnClick = (onClickFunc: () => void) => () => {\n    // close menu, call onClickFunc\n    this._closeOptionsMenu();\n    onClickFunc();\n  };\n\n  _getOptionsMenuItems = () => {\n    if (!this.props.optionsMenuItems) {\n      return;\n    }\n    const { menuAnchorEl } = this.state;\n    const menuItems = this.props.optionsMenuItems().map((option: IOptionsItems, index) => {\n      return (\n        <MenuItem key={`option-${index}`} onClick={this._wrapOnClick(option.onClick)}>\n          {option.text}\n        </MenuItem>\n      );\n    });\n    return (\n      <Menu id=\"simple-menu\" anchorEl={menuAnchorEl} open={Boolean(menuAnchorEl)} onClose={this._closeOptionsMenu}>\n        {menuItems}\n      </Menu>\n    );\n  };\n}\n","import React from 'react';\nimport { GameOver } from './GameOver';\nimport { IGameArgs } from './GameBoardWrapper';\nimport { GameDarkSublayout } from './GameDarkSublayout';\nimport { IOptionsItems } from './GameDarkSublayout';\n\ninterface IGameLayoutProps {\n  gameArgs: IGameArgs;\n  children?: React.ReactNode;\n  gameOver?: string;\n  allowWiderScreen?: boolean;\n  optionsMenuItems?: () => IOptionsItems[];\n  extraCardContent?: React.ReactNode;\n}\n\nexport class GameLayout extends React.Component<IGameLayoutProps, {}> {\n  render() {\n    if (this.props.gameOver) {\n      return (\n        <GameOver\n          result={this.props.gameOver}\n          gameArgs={this.props.gameArgs}\n          extraCardContent={this.props.extraCardContent}\n        />\n      );\n    } else {\n      return (\n        <GameDarkSublayout\n          optionsMenuItems={this.props.optionsMenuItems}\n          allowWiderScreen={this.props.allowWiderScreen}\n          gameArgs={this.props.gameArgs}\n        >\n          {this.props.children}\n        </GameDarkSublayout>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { GameMode } from './GameModePicker';\nimport { IGameArgs } from './GameBoardWrapper';\nimport { GamesList } from '../GamesList';\nimport FreeBoardGamesBar from '../FreeBoardGamesBar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport ReactGA from 'react-ga';\nimport getMessagePage from '../MessagePage';\nimport { LobbyService } from '../Lobby/LobbyService';\nimport Router from 'next/router';\n\nexport interface IGameOverProps {\n  result: string;\n  gameArgs?: IGameArgs;\n  extraCardContent?: React.ReactNode;\n}\n\nexport interface IGameOverState {\n  loading: boolean;\n}\n\nexport class GameOver extends React.Component<IGameOverProps, {}> {\n  state = { loading: false };\n  render() {\n    if (this.state.loading) {\n      const Page = getMessagePage('loading', 'Loading...');\n      return <Page />;\n    }\n    let playAgain;\n    const extraCardContent = this._getExtraCardContent();\n    if (this.props.gameArgs) {\n      playAgain = (\n        <div style={{ textAlign: 'center' }}>\n          <Button\n            onClick={this._playAgainHandle}\n            variant=\"outlined\"\n            style={{ marginRight: 'auto', marginLeft: 'auto', marginBottom: '24px' }}\n          >\n            <ReplayIcon style={{ marginRight: '8px' }} />\n            Play Again\n          </Button>\n        </div>\n      );\n    }\n    ReactGA.event({\n      category: 'Game',\n      label: this.props.gameArgs.gameCode,\n      action: 'Game over',\n    });\n    return (\n      <FreeBoardGamesBar FEATURE_FLAG_readyForDesktopView>\n        <Typography variant=\"h6\" gutterBottom={true} align=\"center\" style={{ marginTop: '16px' }}>\n          Game Over, {this.props.result}!\n        </Typography>\n        {playAgain}\n        {extraCardContent}\n        <GamesList />\n      </FreeBoardGamesBar>\n    );\n  }\n  _getExtraCardContent = () => {\n    if (!this.props.extraCardContent) {\n      return null;\n    }\n    const otherPlayerCard = (\n      <div style={{ paddingBottom: '12px', maxWidth: '500px', margin: 'auto' }}>{this.props.extraCardContent}</div>\n    );\n    return otherPlayerCard;\n  };\n\n  _playAgainHandle = async () => {\n    const args = this.props.gameArgs;\n    ReactGA.event({\n      category: 'GameOver',\n      action: 'Clicked play again',\n      label: args.gameCode,\n    });\n\n    if (args.mode === GameMode.AI || args.mode === GameMode.LocalFriend) {\n      Router.push(window.location.pathname);\n    } else {\n      this.setState({ loading: true });\n      const nextRoomId = await LobbyService.getPlayAgainNextRoom(args.gameCode, args.matchCode, args.players.length);\n      Router.push(`/room/${args.gameCode}/${nextRoomId}` as any);\n    }\n  };\n}\n","import React from 'react';\nimport { GAMES_LIST } from 'games';\nimport { GameCard } from './Game/GameCard';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link';\n\nexport class GamesList extends React.Component<{}, {}> {\n  public render() {\n    const gamesList = GAMES_LIST.map((game) => (\n      <Link href={`/play/[gameCode]`} as={`/play/${game.code}`} key={game.code}>\n        <a style={{ textDecoration: 'none', flex: 1, minWidth: '300px', maxWidth: '380px', margin: '8px' }}>\n          <GameCard game={game} isLink={true} />\n        </a>\n      </Link>\n    ));\n    return (\n      <div style={{ marginBottom: '16px' }}>\n        <Typography component=\"h2\" variant=\"h6\" style={{ marginBottom: '16px', marginLeft: '6px' }}>\n          Games\n        </Typography>\n        <div style={{ margin: '0 4px', display: 'flex', flexWrap: 'wrap' }}>{gamesList}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport MessagePageClass from './MessagePageClass';\n\nconst getMessagePage = (type: 'error' | 'loading', message: string) => {\n  return () => {\n    return <MessagePageClass type={type} message={message} />;\n  };\n};\n\nexport default getMessagePage;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport HomeIcon from '@material-ui/icons/Home';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FreeBoardGamesBar from './FreeBoardGamesBar';\nimport SvgError from './media/SvgError';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link';\n\ninterface IMessageState {\n  linkHidden: boolean;\n  startTime: number;\n}\n\ninterface IMessageProps {\n  type: string;\n  message: string;\n  actionComponent?: JSX.Element;\n}\n\nexport class MessagePage extends React.Component<IMessageProps, IMessageState> {\n  requestID: number = null;\n  constructor(props: IMessageProps) {\n    super(props);\n    this.state = {\n      linkHidden: props.type !== 'error',\n      startTime: Date.now(),\n    };\n    if (typeof window !== 'undefined' && props.type !== 'error') {\n      this.requestID = window.requestAnimationFrame(this._animate(Date.now()));\n    }\n  }\n\n  _animate = (now: number) => () => {\n    if (this.requestID) {\n      const elapsed = now - this.state.startTime;\n      const linkHidden = elapsed < 5000;\n      this.setState({\n        ...this.state,\n        linkHidden,\n      });\n      if (linkHidden) {\n        this.requestID = window.requestAnimationFrame(this._animate(Date.now()));\n      }\n    }\n  };\n\n  componentWillUnmount() {\n    if (this.requestID) {\n      window.cancelAnimationFrame(this.requestID);\n      this.requestID = null;\n    }\n  }\n\n  render() {\n    let icon;\n    let linkHome;\n    if (this.props.type === 'error') {\n      icon = <SvgError style={{ height: '128px' }} />;\n    } else {\n      icon = <CircularProgress />;\n    }\n    if (!this.state.linkHidden) {\n      const goHomeText = 'Go Home';\n      linkHome = (\n        <Link href=\"/\">\n          <a style={{ textDecoration: 'none' }}>\n            <Button variant=\"outlined\" style={{ margin: '8px' }}>\n              <HomeIcon style={{ marginRight: '8px' }} />\n              {goHomeText}\n            </Button>\n          </a>\n        </Link>\n      );\n    }\n    return (\n      <FreeBoardGamesBar>\n        <div style={{ paddingTop: '16px', textAlign: 'center' }}>\n          {icon}\n          <Typography variant=\"h6\" gutterBottom={true} style={{ paddingTop: '16px' }}>\n            {this.props.message}\n            <br />\n            <br />\n            {linkHome}\n            {this.props.actionComponent}\n          </Typography>\n        </div>\n      </FreeBoardGamesBar>\n    );\n  }\n}\n\nexport default MessagePage;\n","import React from 'react';\nconst SvgError = (props: any) => (\n  <svg viewBox=\"0 0 1 1\" style={props.style}>\n    <g>\n      <line x1=\"0.2\" y1=\"0.2\" x2=\"0.8\" y2=\"0.8\" stroke=\"black\" strokeWidth=\"0.05\" />\n      <line x1=\"0.8\" y1=\"0.2\" x2=\"0.2\" y2=\"0.8\" stroke=\"black\" strokeWidth=\"0.05\" />\n    </g>\n  </svg>\n);\n\nexport default SvgError;\n","import React from 'react';\nimport useWindowDimensions from 'hooks/useWindowDimensions';\nimport MobileDetect from 'mobile-detect';\n\ninterface DesktopMobileViewProps {\n  children: React.ReactNode;\n  thresholdWidth?: number;\n  userAgent?: any;\n}\n\nconst DEFAULT_THRESHOLD_WIDTH = 550;\n\nfunction isMobile(props: DesktopMobileViewProps) {\n  const hasJssSSRStyles = typeof document !== 'undefined' && !!document?.querySelector('#jss-server-side');\n  let width = useWindowDimensions().width;\n  const isBrowser = typeof window !== 'undefined';\n  let isMobileResult: boolean;\n  if ((!isBrowser || hasJssSSRStyles) && props.userAgent) {\n    // keep the isDesktop() return uniform if JSS styles exist\n    const md = new MobileDetect(props.userAgent);\n    isMobileResult = !!md.mobile() && !md.tablet();\n  } else {\n    const thresholdWidth = props.thresholdWidth || DEFAULT_THRESHOLD_WIDTH;\n    isMobileResult = width <= thresholdWidth;\n  }\n  return isMobileResult;\n}\n\nexport const DesktopView = (props: DesktopMobileViewProps) => {\n  if (!isMobile(props)) {\n    return <React.Fragment>{props.children}</React.Fragment>;\n  } else {\n    return null;\n  }\n};\n\nexport const MobileView = (props: DesktopMobileViewProps) => {\n  if (isMobile(props)) {\n    return <React.Fragment>{props.children}</React.Fragment>;\n  } else {\n    return null;\n  }\n};\n","import { IGameCtx } from 'boardgame.io/core';\n\n/** Whether given player should play now or not. */\nexport function isPlayersTurn(player: string, ctx: IGameCtx): boolean {\n  const isActive = ctx.activePlayers !== null && player in ctx.activePlayers;\n  const isCurrentPlayer = ctx.activePlayers === null && ctx.currentPlayer === player;\n  return isActive || isCurrentPlayer;\n}\n","import { IGameArgs } from 'components/App/Game/GameBoardWrapper';\nimport { GameMode } from 'components/App/Game/GameModePicker';\n\nexport function isLocalGame(gameArgs: IGameArgs) {\n  return gameArgs && gameArgs.mode === GameMode.LocalFriend;\n}\n\nexport function isOnlineGame(gameArgs: IGameArgs) {\n  return gameArgs && gameArgs.mode === GameMode.OnlineFriend;\n}\n\nexport function isAIGame(gameArgs: IGameArgs) {\n  return gameArgs && gameArgs.mode === GameMode.AI;\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport { MAX_WORD_LENGTH } from './constants';\nimport { isValidWord } from './util';\n\ninterface IEnterWordPromptProps {\n  setSecret: (word: string, hint: string) => void;\n  title: string;\n}\n\ninterface IEnterWordPromptState {\n  wordTextField: string;\n  hintTextField: string;\n}\n\nexport class EnterWordPrompt extends React.Component<IEnterWordPromptProps, IEnterWordPromptState> {\n  state = {\n    wordTextField: '',\n    hintTextField: '',\n  };\n\n  render() {\n    return (\n      <div>\n        <Card\n          style={{\n            marginTop: '16px',\n            whiteSpace: 'nowrap',\n            width: '250px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            textAlign: 'center',\n          }}\n        >\n          <Typography style={{ paddingTop: '16px' }} variant=\"h6\" component=\"h3\" noWrap={true}>\n            {this.props.title}\n          </Typography>\n          <CardContent>\n            <div>\n              <TextField\n                autoFocus={true}\n                type=\"text\"\n                label={`Word (max ${MAX_WORD_LENGTH} chars)`}\n                fullWidth\n                onChange={this._onWordChange}\n                onKeyPress={this._setEnterWordOnEnterButton}\n                style={{ margin: '8px', width: '90%' }}\n                data-test-id=\"wordTextField\"\n                value={this.state.wordTextField}\n              />\n            </div>\n            <div>\n              <TextField\n                type=\"text\"\n                label=\"Hint (max 120 chars)\"\n                multiline\n                fullWidth\n                rowsMax={4}\n                onChange={this._onHintChange}\n                style={{ margin: '8px', width: '90%' }}\n                data-test-id=\"hintTextField\"\n                value={this.state.hintTextField}\n              />\n            </div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginTop: '16px' }}\n              onClick={this._onClick}\n              disabled={!this._wordisValid()}\n              data-test-id=\"playButton\"\n            >\n              Play\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  _setEnterWordOnEnterButton = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (event.key === 'Enter' && this._wordisValid()) {\n      this._onClick();\n    }\n  };\n\n  _wordisValid = () => {\n    const name = this.state.wordTextField;\n    const hint = this.state.hintTextField;\n    return name && name.length > 0 && name.length <= MAX_WORD_LENGTH && hint.length <= 120 && isValidWord(name);\n  };\n\n  _onClick = () => {\n    if (this._wordisValid()) {\n      this.setState({\n        wordTextField: '',\n        hintTextField: '',\n      });\n      this.props.setSecret(this.state.wordTextField, this.state.hintTextField);\n    }\n  };\n\n  _onWordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const wordTextField = event.target.value!;\n    this.setState((oldState) => {\n      return { ...oldState, wordTextField };\n    });\n  };\n\n  _onHintChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const hintTextField = event.target.value!;\n    this.setState((oldState) => {\n      return { ...oldState, hintTextField };\n    });\n  };\n}\n","import * as React from 'react';\nimport { IGameArgs } from 'components/App/Game/GameBoardWrapper';\nimport { GameLayout } from 'components/App/Game/GameLayout';\nimport Typography from '@material-ui/core/Typography';\nimport { EnterWordPrompt } from './EnterWordPrompt';\nimport { isOnlineGame } from '../common/gameMode';\nimport { grey } from '@material-ui/core/colors';\nimport { Modal } from '@material-ui/core';\nimport { isPlayersTurn } from 'games/common/GameUtil';\nimport { IGameCtx } from 'boardgame.io/core';\nimport { HangmanState, PlayerState } from './definitions';\nimport { getOpponent, getMistakeCount, getMaskedWord } from './util';\nimport { ALPHABET, MAX_MISTAKE_COUNT, MAX_WORD_LENGTH } from './constants';\n\ninterface IBoardState {\n  showHint: boolean;\n}\n\ninterface IBoardProps {\n  G: HangmanState;\n  ctx: IGameCtx;\n  moves: any;\n  playerID: string;\n  isActive: boolean;\n  gameArgs?: IGameArgs;\n  events?: any;\n}\n\nexport class Board extends React.Component<IBoardProps, IBoardState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showHint: false,\n    };\n  }\n\n  onClick = (letter: string) => () => {\n    if (isOnlineGame(this.props.gameArgs)) {\n      if (this.props.playerID !== this.props.ctx.currentPlayer) {\n        return;\n      }\n    }\n\n    this.props.moves.selectLetter(letter);\n  };\n\n  _setSecret = (secret, hint) => {\n    this.props.moves.setSecret(secret, hint);\n  };\n\n  _getStatus() {\n    if (isOnlineGame(this.props.gameArgs)) {\n      if (this.props.ctx.currentPlayer === this.props.playerID) {\n        return 'Your Turn to GUESS';\n      } else {\n        return 'Opponent is Guessing';\n      }\n    } else {\n      return 'Player ' + this._playerName() + \"'s Turn\";\n    }\n  }\n\n  _getWord() {\n    const player = this._playerState();\n    const opponent = this._opponentState();\n    const BREAK_LEN = MAX_WORD_LENGTH / 2;\n    const cells = [];\n\n    // max 2 lines are allowed, each with BREAK_LEN characters\n    for (var y = 0; y < 2; y++) {\n      // decide the offset based on number of letters in current line\n      let charsOnLine = opponent.secretLength - y * BREAK_LEN;\n      let xOffset = 5 - (charsOnLine < BREAK_LEN ? charsOnLine : BREAK_LEN) / 2;\n      let numOfLines = Math.ceil(opponent.secretLength / BREAK_LEN);\n      let yOffset = 1.5 + (1 + y) * 0.3 + (numOfLines === 1 ? 1.5 : 0);\n\n      for (var x = 0; x < BREAK_LEN; x++) {\n        const idx = y * BREAK_LEN + x;\n        if (idx >= opponent.secretLength) break;\n        var letter = getMaskedWord(player.guesses, this._opponentState().secretLength)[idx];\n        cells.push(\n          <g key={'word_group' + idx}>\n            <text\n              key={'word_letter_' + idx}\n              x={x + xOffset + 0.5}\n              y={y + yOffset}\n              fontSize={0.85}\n              textAnchor=\"middle\"\n              fill=\"#40c4ff\"\n            >\n              {letter ? letter.toUpperCase() : ' '}\n            </text>\n            <line\n              x1={x + xOffset + 0.1}\n              y1={y + yOffset + 0.25}\n              x2={x + xOffset + 0.9}\n              y2={y + yOffset + 0.25}\n              stroke=\"#40c4ff\"\n              style={{ strokeWidth: 0.125 }}\n            />\n          </g>,\n        );\n      }\n    }\n    return cells;\n  }\n\n  _getGuessesRemaining() {\n    const mistakeCount = getMistakeCount(this._playerState().guesses);\n    let textColor: any = grey[100];\n    if (isOnlineGame(this.props.gameArgs)) {\n      textColor = this.props.playerID === this.props.ctx.currentPlayer ? grey[100] : grey[500];\n    }\n\n    return (\n      <text key={'guess_remaining_message'} x={5} y={4.5} fontSize={0.4} textAnchor=\"middle\" fill={textColor}>\n        {`Mistakes: ${mistakeCount}/${MAX_MISTAKE_COUNT}`}\n      </text>\n    );\n  }\n\n  _getAlphabets() {\n    const cells = [];\n    for (var i = 0; i < ALPHABET.length; i++) {\n      const letter = ALPHABET[i];\n      let backgroundColor = null;\n      let textColor: any = grey[100];\n      if (isOnlineGame(this.props.gameArgs)) {\n        textColor = this.props.playerID === this.props.ctx.currentPlayer ? grey[100] : grey[500];\n      }\n      const guessResult = this._playerState().guesses[letter];\n      if (guessResult && guessResult.length > 0) {\n        backgroundColor = '#00e676';\n        textColor = grey[100];\n      } else if (guessResult && guessResult.length == 0) {\n        backgroundColor = '#ff1744';\n        textColor = grey[100];\n      }\n      let lineNo = Math.floor(i / 9);\n      let x = (i - 9 * lineNo) * 1.1 + 0.1;\n      let y = 5 + lineNo * 1.2;\n      if (i >= 18) {\n        x = (i - 18) * 1.1 + 0.6;\n      }\n      cells.push(\n        <g key={'alph_group' + i} onClick={this.onClick(letter)} data-testid={`letter-${letter}`}>\n          <circle\n            key={'alph_rect_' + i}\n            cx={x + 0.5}\n            cy={y + 0.5}\n            r={0.45}\n            fill={backgroundColor}\n            strokeWidth={0.045}\n            stroke={textColor}\n            data-testid={`letter-${letter}-cir`}\n          />\n          <text key={'alph_' + i} x={x + 0.5} y={y + 0.5} fontSize={0.55} dy={0.2} fill={textColor} textAnchor=\"middle\">\n            {letter.toUpperCase()}\n          </text>\n        </g>,\n      );\n    }\n    return cells;\n  }\n\n  _getHintButton() {\n    if (isOnlineGame(this.props.gameArgs) && this.props.playerID === this.props.ctx.currentPlayer) {\n      return;\n    }\n    if (!this._opponentState().hint) {\n      return;\n    }\n    return (\n      <g key={'hint_button'} onClick={() => this.setState({ showHint: true })}>\n        <rect key={'hb_rect'} x={3.7} y={9} width={2.6} height={0.8} strokeWidth={0.045} stroke={grey[200]} />\n        <text key={'hb_text'} x={5} y={9.55} fontSize={0.45} fill={grey[200]} textAnchor=\"middle\">\n          {'See Hint'}\n        </text>\n      </g>\n    );\n  }\n\n  _playerState(): PlayerState {\n    return this.props.G.players[this.props.ctx.currentPlayer];\n  }\n\n  _opponentState(): PlayerState {\n    return this.props.G.players[getOpponent(this.props.ctx.currentPlayer)];\n  }\n\n  _getHintModal() {\n    return (\n      <div>\n        <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          BackdropProps={{ invisible: true }}\n          open={this.state.showHint}\n          onClose={() => this.setState({ showHint: false })}\n          style={{\n            marginTop: '20px',\n            width: '250px',\n            height: '400px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            backgroundColor: 'white',\n          }}\n        >\n          <div>\n            <Typography style={{ padding: '16px' }} variant=\"h5\" component=\"h3\">\n              Hint\n            </Typography>\n            <Typography style={{ padding: '16px' }} variant=\"body1\">\n              {this._opponentState().hint}\n            </Typography>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n\n  _playerName() {\n    switch (this.props.ctx.currentPlayer) {\n      case '0':\n        return 'A';\n      case '1':\n        return 'B';\n    }\n    return '?'; // so TS doesn't think our type is string|undefined\n  }\n\n  _renderPrepare() {\n    if (!isPlayersTurn(this.props.ctx.currentPlayer, this.props.ctx)) {\n      return (\n        <Typography variant=\"h6\" style={{ textAlign: 'center', color: 'white', margin: '16px', padding: '16px' }}>\n          Waiting for Your Opponent ...\n        </Typography>\n      );\n    }\n    const title = !isOnlineGame(this.props.gameArgs) ? `Player ${this._playerName()}: ` : '' + 'Enter secret word';\n    return <EnterWordPrompt setSecret={this._setSecret} title={title} />;\n  }\n\n  _renderPlay() {\n    return (\n      <div>\n        <Typography variant=\"h5\" style={{ textAlign: 'center', color: 'white', marginBottom: '16px' }}>\n          {this._getStatus()}\n        </Typography>\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 10 10\">\n          {this._getWord()}\n          {this._getGuessesRemaining()}\n          {this._getAlphabets()}\n          {this._getHintButton()}\n        </svg>\n        {this._getHintModal()}\n      </div>\n    );\n  }\n\n  _getGameOver() {\n    if (this.props.ctx.gameover.draw) {\n      return 'draw';\n    }\n    if (isOnlineGame(this.props.gameArgs)) {\n      if (this.props.ctx.gameover.winner === this.props.playerID) {\n        return 'you won';\n      } else {\n        return 'you lost';\n      }\n    } else {\n      return `Player ${this._playerName()} won!`;\n    }\n  }\n\n  render() {\n    if (this.props.ctx.gameover) {\n      return <GameLayout gameOver={this._getGameOver()} gameArgs={this.props.gameArgs} />;\n    }\n    return (\n      <GameLayout gameArgs={this.props.gameArgs}>\n        {this.props.ctx.phase === 'prepare' ? this._renderPrepare() : this._renderPlay()}\n      </GameLayout>\n    );\n  }\n}\n\nexport default Board;\n","import { IGameConfig } from '../';\nimport { HangmanGame } from './game';\nimport { Board } from './board';\n\nconst config: IGameConfig = {\n  bgioGame: HangmanGame,\n  bgioBoard: Board,\n};\n\nexport default config;\n","import { HangmanState } from './definitions';\n\nexport const HANGMAN_INITIAL_STATE: HangmanState = {\n  players: {},\n};\n\nexport const MAX_WORD_LENGTH = 16;\n\nexport const MAX_MISTAKE_COUNT = 6;\n\nexport const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n","import { IGameArgs } from 'boardgame.io/core';\nimport { HANGMAN_INITIAL_STATE } from './constants';\nimport { setSecret, selectLetter, getWinner } from './util';\n\nexport const HangmanGame: IGameArgs = {\n  name: 'hangman',\n\n  setup: () => HANGMAN_INITIAL_STATE,\n\n  phases: {\n    prepare: {\n      //moves: { setSecret: { move: setSecret, client: false } },\n      moves: { setSecret },\n      start: true,\n      turn: {\n        moveLimit: 1,\n      },\n      next: 'play',\n    },\n    play: {\n      //moves: { selectLetter: { move: selectLetter, client: false } },\n      moves: { selectLetter },\n    },\n  },\n  endIf: getWinner,\n};\n","import { HangmanState, Guesses } from './definitions';\nimport { IGameCtx, INVALID_MOVE } from 'boardgame.io/core';\nimport { MAX_WORD_LENGTH, MAX_MISTAKE_COUNT, ALPHABET } from './constants';\n\n/** Called when users selects the initial word and (possibly) hint. */\nexport function setSecret(G: HangmanState, ctx: IGameCtx, secret: string, hint?: string) {\n  if (secret.length == 0 || secret.length > MAX_WORD_LENGTH) {\n    return INVALID_MOVE;\n  }\n  secret = secret.toLowerCase();\n  if (ctx.currentPlayer == '1') {\n    ctx.events.endPhase();\n  }\n  return {\n    players: {\n      ...G.players,\n      [ctx.playerID]: {\n        secret,\n        secretLength: secret.length,\n        hint,\n        guesses: {},\n      },\n    },\n  };\n}\n\nexport function getOpponent(playerID: string) {\n  switch (playerID) {\n    case '0':\n      return '1';\n    case '1':\n      return '0';\n  }\n  throw new Error(`Invalid playerID provided to getOpponnent: ${playerID}`);\n}\n\nfunction getWordIndexes(word: string, letter: string): number[] {\n  const indexes = [];\n  for (let i = 0; i < word.length; i++) {\n    if (word[i] === letter) {\n      indexes.push(i);\n    }\n  }\n  return indexes;\n}\n\n/** Gets array representing masked word. */\nexport function getMaskedWord(guesses: Guesses, secretLength: number): (string | undefined)[] {\n  const result = new Array(secretLength);\n  for (const [letter, guessResult] of Object.entries(guesses)) {\n    for (const index of guessResult) {\n      result[index] = letter;\n    }\n  }\n  return result;\n}\n\n/** Gets count of mistakes made in a set of guesses. */\nexport function getMistakeCount(guesses: Guesses) {\n  let count = 0;\n  for (const indexes of Object.values(guesses)) {\n    if (indexes.length === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\nfunction getCorrectLettersCount(guesses: Guesses) {\n  let count = 0;\n  for (const indexes of Object.values(guesses)) {\n    count += indexes.length;\n  }\n  return count;\n}\n\n/** Valides if all characters on this word is valid. */\nexport function isValidWord(word: string) {\n  for (let i = 0; i < word.length; i++) {\n    const letter = word[i].toLowerCase();\n    if (!ALPHABET.includes(letter)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Called when users selects letter. */\nexport function selectLetter(G: HangmanState, ctx: IGameCtx, letter: string) {\n  const player = G.players[ctx.playerID];\n  if (letter.length != 1 || letter in player.guesses) {\n    return INVALID_MOVE;\n  }\n  letter = letter.toLowerCase();\n  const opponent = G.players[getOpponent(ctx.playerID)];\n  const result = getWordIndexes(opponent.secret, letter);\n  player.guesses[letter] = result;\n  if (result.length == 0 && getMistakeCount(opponent.guesses) < MAX_MISTAKE_COUNT) {\n    ctx.events.endTurn();\n  } else if (getMistakeCount(player.guesses) >= MAX_MISTAKE_COUNT) {\n    ctx.events.endGame({ draw: true });\n  }\n  return G;\n}\n\n/** Returns the winner, if any. */\nexport function getWinner(G: HangmanState) {\n  for (const playerID of ['0', '1']) {\n    const player = G.players[playerID];\n    const opponent = G.players[getOpponent(playerID)];\n    if (player && opponent && getCorrectLettersCount(player.guesses) === opponent.secretLength) {\n      return { winner: playerID };\n    }\n  }\n}\n","// https://stackoverflow.com/a/59185109\n\nimport { useState, useEffect } from 'react';\n\nexport default function useWindowDimensions() {\n  const hasWindow = typeof window !== 'undefined';\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    if (hasWindow) {\n      const handleResize = () => {\n        setWindowDimensions(getWindowDimensions());\n      };\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [hasWindow]);\n\n  return windowDimensions;\n}\n"],"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;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAnGA;AACA;AAKA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AATA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AATA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAcA;AACA;AAhnBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAgBA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAJA;AAAA;AACA;AAFA;AAOA;AACA;AAAA;AACA;AAhBA;AAiBA;AAAA;AACA;AACA;AACA;AApBA;AAEA;AACA;AADA;AAGA;AACA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAHA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAUA;AACA;AACA;AA1CA;AA0CA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;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","sourceRoot":""}