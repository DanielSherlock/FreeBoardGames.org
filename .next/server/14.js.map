{"version":3,"file":"14.js","sources":["webpack:///./src/games/checkers/ai.ts","webpack:///./src/games/checkers/game.ts"],"sourcesContent":["import { IAIConfig } from '../index';\nimport { IG, getValidMoves, IMove } from './game';\nimport { IGameCtx } from 'boardgame.io/core';\n\ninterface IPlayState {\n  G: IG;\n  ctx: IGameCtx;\n}\n\nclass CheckersRandomBot {\n  async play(state: IPlayState, playerID: string) {\n    const moves =\n      state.G.jumping !== null ? getValidMoves(state.G, playerID, state.G.jumping) : getValidMoves(state.G, playerID);\n    const move = moves[Math.floor(Math.random() * moves.length)];\n\n    return this.makeMove(playerID, move);\n  }\n\n  makeMove(playerID: string, move: IMove) {\n    return { action: { type: 'MAKE_MOVE', payload: { type: 'move', args: [move.from, move.to], playerID } } };\n  }\n}\nconst config: IAIConfig = {\n  bgioAI: () => {\n    return {\n      bot: CheckersRandomBot,\n    };\n  },\n};\nexport default config;\n","import { IGameCtx, INVALID_MOVE, IGameArgs } from 'boardgame.io/core';\ninterface ICheckerPiece {\n  id: number;\n  playerID: string;\n  isKing: boolean;\n}\n\ninterface ICoord {\n  x: number;\n  y: number;\n}\n\ninterface ICheckerPieceWithCoord {\n  data: ICheckerPiece;\n  coord: ICoord;\n}\n\nexport interface IMove {\n  from: ICoord;\n  to: ICoord;\n  jumped: ICoord;\n}\n\ntype Piece = ICheckerPiece | null;\nexport interface IG {\n  board: Piece[];\n  jumping: ICheckerPieceWithCoord;\n}\n\nconst piece = (id: number, player: number): ICheckerPiece => ({ id, playerID: player.toString(), isKing: false });\n\nexport const INITIAL_BOARD: Piece[] = [\n  null,\n  piece(0, 1),\n  null,\n  piece(1, 1),\n  null,\n  piece(2, 1),\n  null,\n  piece(3, 1),\n  piece(4, 1),\n  null,\n  piece(5, 1),\n  null,\n  piece(6, 1),\n  null,\n  piece(7, 1),\n  null,\n  null,\n  piece(8, 1),\n  null,\n  piece(9, 1),\n  null,\n  piece(10, 1),\n  null,\n  piece(11, 1),\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  piece(12, 0),\n  null,\n  piece(13, 0),\n  null,\n  piece(14, 0),\n  null,\n  piece(15, 0),\n  null,\n  null,\n  piece(16, 0),\n  null,\n  piece(17, 0),\n  null,\n  piece(18, 0),\n  null,\n  piece(19, 0),\n  piece(20, 0),\n  null,\n  piece(21, 0),\n  null,\n  piece(22, 0),\n  null,\n  piece(23, 0),\n  null,\n];\n\nconst MAN_DIRS = [\n  [\n    { x: -1, y: -1 },\n    { x: 1, y: -1 },\n  ],\n  [\n    { x: -1, y: 1 },\n    { x: 1, y: 1 },\n  ],\n];\n\nconst KING_DIRS = [\n  { x: -1, y: 1 },\n  { x: 1, y: 1 },\n  { x: -1, y: -1 },\n  { x: 1, y: -1 },\n];\n\nexport function sumCoords(a: ICoord, b: ICoord) {\n  return { x: a.x + b.x, y: a.y + b.y };\n}\n\nexport function multiplyCoord(coord: ICoord, multiplier: number) {\n  return { x: coord.x * multiplier, y: coord.y * multiplier };\n}\n\nexport function inBounds(coord: ICoord) {\n  return coord.x >= 0 && coord.x < 8 && coord.y >= 0 && coord.y < 8;\n}\n\nexport function toCoord(position: number): ICoord {\n  const x = position % 8;\n  const y = Math.floor(position / 8);\n  return { x, y };\n}\n\nexport function toIndex(coord: ICoord) {\n  return coord.x + coord.y * 8;\n}\n\nexport function areCoordsEqual(a: ICoord, b: ICoord) {\n  return a.x === b.x && a.y === b.y;\n}\n\nexport function checkPosition(\n  G: IG,\n  playerID: string,\n  piece: ICheckerPiece,\n  coord: ICoord,\n): { moves: IMove[]; jumped: boolean } {\n  const dirs = piece.isKing ? KING_DIRS : MAN_DIRS[playerID as any];\n  let moves: IMove[] = [];\n  let jumped = false;\n\n  for (const dir of dirs) {\n    // Look into all valid directions\n    let opponentBefore = null;\n    for (let i = 1; piece.isKing ? true : i < 3; i++) {\n      const final = sumCoords(coord, multiplyCoord(dir, i));\n\n      // Break if move is out of bounds\n      if (!inBounds(final)) {\n        break;\n      }\n\n      const moveTo = G.board[toIndex(final)];\n\n      // Break if we encounter our piece\n      if (moveTo !== null && moveTo.playerID === playerID) {\n        break;\n      }\n\n      if (moveTo !== null && moveTo.playerID !== playerID) {\n        // If we already encountered opponent the directions is blocked\n        if (opponentBefore) {\n          break;\n        }\n        opponentBefore = final;\n      }\n\n      if (moveTo === null) {\n        moves.push({ from: coord, to: final, jumped: opponentBefore });\n        if (opponentBefore) {\n          jumped = true;\n          break;\n        }\n\n        // If there is nothing and the piece isn't king there is no need to continue\n        if (!piece.isKing) {\n          break;\n        }\n      }\n    }\n  }\n\n  return { moves, jumped };\n}\n\nexport function getValidMoves(G: IG, playerID: string, jumping?: ICheckerPieceWithCoord) {\n  let movesTotal: IMove[] = [];\n  let jumpedTotal = false;\n\n  if (typeof jumping === 'undefined') {\n    G.board.forEach((piece, index) => {\n      if (piece !== null && piece.playerID === playerID) {\n        const coord = toCoord(index);\n        const { moves, jumped } = checkPosition(G, playerID, piece, coord);\n        movesTotal.push(...moves);\n        jumpedTotal = jumpedTotal || jumped;\n      }\n    });\n  } else {\n    const { moves, jumped } = checkPosition(G, playerID, jumping.data, jumping.coord);\n    movesTotal = moves;\n    jumpedTotal = jumped;\n  }\n\n  if (jumpedTotal) {\n    return movesTotal.filter((move) => move.jumped);\n  } else {\n    return movesTotal;\n  }\n}\n\nexport function move(G: IG, ctx: IGameCtx, from: ICoord, to: ICoord): IG | string {\n  const indexFrom = toIndex(from);\n  const indexTo = toIndex(to);\n  const piece = G.board[indexFrom];\n  const crownhead = ctx.playerID === '0' ? 0 : 7;\n\n  if (piece === null || piece.playerID !== ctx.playerID || G.board[indexTo] !== null) {\n    return INVALID_MOVE;\n  }\n\n  const moves = G.jumping === null ? getValidMoves(G, ctx.playerID) : getValidMoves(G, ctx.playerID, G.jumping);\n  const move = moves.find((move) => areCoordsEqual(move.from, from) && areCoordsEqual(move.to, to));\n\n  if (typeof move === 'undefined') {\n    return INVALID_MOVE;\n  }\n\n  const jumped = move.jumped !== null ? toIndex(move.jumped) : -1;\n  const isKing = piece.isKing || to.y === crownhead;\n\n  const newG: IG = {\n    ...G,\n    board: G.board.map((square, i) => {\n      switch (i) {\n        case indexFrom:\n          return null;\n        case indexTo:\n          return {\n            ...piece,\n            isKing,\n          };\n        case jumped:\n          return null;\n        default:\n          return square;\n      }\n    }),\n    jumping: null,\n  };\n\n  if (move.jumped === null) {\n    return newG;\n  }\n\n  const jumping = {\n    data: {\n      ...piece,\n      isKing,\n    },\n    coord: to,\n  };\n  const postMoves = getValidMoves(newG, ctx.playerID, jumping);\n\n  if (postMoves.length > 0 && postMoves[0].jumped !== null) {\n    return {\n      ...newG,\n      jumping,\n    };\n  }\n\n  return newG;\n}\n\nexport const CheckersGame: IGameArgs = {\n  name: 'checkers',\n  setup: (): IG => ({ board: INITIAL_BOARD, jumping: null }),\n  moves: {\n    move,\n  },\n  turn: {\n    moveLimit: 1,\n    order: {\n      first: () => 0,\n      next: (G: IG, ctx) => (G.jumping === null ? (ctx.playOrderPos + 1) % ctx.numPlayers : ctx.playOrderPos),\n    },\n  },\n  endIf: (G: IG, ctx) => {\n    if (getValidMoves(G, ctx.currentPlayer === '0' ? '1' : '0').length === 0) {\n      return { winner: ctx.currentPlayer };\n    }\n  },\n};\n"],"mappingsmEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AATA;AACA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAZA;AACA;AAcA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAHA;AAKA;AACA;AANA;AAAA;AACA;AAhBA;AACA;AAsBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AACA;AACA;AAJA;AACA;AAOA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAXA;AAAA;AAYA;AACA;AACA;AA7CA;AA8CA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAGA;AAHA;AAIA;AACA;AALA;AAAA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAFA;AAGA;AACA;AACA;AAlBA;AACA;AAkBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAXA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAXA;AAaA;AACA;AAjBA;AApBA;AACA;AAuCA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AAEA;AAFA;AAIA;AALA;AAOA;AAnDA;AACA;AAoDA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AALA;AAAA;AACA;AAtDA;AA4DA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAGA;AAjBA;;;;A","sourceRoot":""}